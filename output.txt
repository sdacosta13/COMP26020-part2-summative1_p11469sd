Preprocessing executable 'summative' for summative-0.1.0.0..
Building executable 'summative' for summative-0.1.0.0..
[ 9 of 11] Compiling Test_Pretty      ( Test_Pretty.hs, dist/build/summative/summative-tmp/Test_Pretty.o )
[11 of 11] Compiling Main             ( Main.hs, dist/build/summative/summative-tmp/Main.o ) [Test_Pretty changed]
Linking dist/build/summative/summative ...
Running summative...
OK ### 2 Simple expressions
OK ### 1 Random expressions
OK ### 1 Random commands (no indentation)
FAIL Random commands (with indentation)
AST
If (Var "z") (Seq [Assign "a" (Binop Less (Const 1) (Var "z")),While (Const 0) (Seq [])]) (Assign "b" (Binop Less (Var "y") (Var "y")))
 was printed as
*******************
if z then { a = 1 < z ; while 0 do { } } else b = y < y

*******************
but expected
*******************
if z then {
  a = 1 < z ;
  while 0 do { }
} else
  b = y < y

*******************

AST
If (Const 0) (Seq [Assign "z" (Const 1),Assign "a" (Binop LessEq (Var "y") (Const 1)),Assign "b" (Const 1),Assign "x" (Binop And (Const 0) (Uminus (Uminus (Var "b")))),Assign "y" (Binop And (Var "x") (Const (-16))),Assign "z" (Const 23),If (Const 1) (If (Var "y") (If (Binop Less (Var "a") (Var "x")) (Seq []) (Seq [])) (Seq [])) (Assign "b" (Binop Div (Binop Times (Binop Plus (Const 19) (Const 21)) (Var "y")) (Binop Div (Const (-18)) (Binop Plus (Var "y") (Var "a")))))]) (Seq [Assign "z" (Const 1),Assign "z" (Const 0),Assign "y" (Binop Times (Const (-1)) (Const 0)),Assign "z" (Binop Plus (Uminus (Var "y")) (Const 1)),While (Uminus (Const 1)) (If (Binop And (Binop And (Const 0) (Const (-23))) (Const 0)) (Assign "z" (Const 1)) (Assign "a" (Uminus (Const 21)))),Assign "z" (Var "b")])
 was printed as
*******************
if 0 then { z = 1 ; a = y <= 1 ; b = 1 ; x = 0 && - ( - b ) ; y = x && -16 ; z = 23 ; if 1 then if y then if a < x then { } else { } else { } else b = ( 19 + 21 ) * y / ( -18 / ( y + a ) ) } else { z = 1 ; z = 0 ; y = -1 * 0 ; z = - y + 1 ; while - ( 1 ) do if 0 && -23 && 0 then z = 1 else a = - ( 21 ) ; z = b }

*******************
but expected
*******************
if 0 then {
  z = 1 ;
  a = y <= 1 ;
  b = 1 ;
  x = 0 && - ( - b ) ;
  y = x && -16 ;
  z = 23 ;
  if 1 then
    if y then
      if a < x then { } else { }
    else { }
  else
    b = ( 19 + 21 ) * y / ( -18 / ( y + a ) )
} else {
  z = 1 ;
  z = 0 ;
  y = -1 * 0 ;
  z = - y + 1 ;
  while - ( 1 ) do
    if 0 && -23 && 0 then
      z = 1
    else
      a = - ( 21 ) ;
  z = b
}

*******************

AST
If (Binop LessEq (Const (-5)) (Const 0)) (While (Binop Times (Var "a") (Const 1)) (Seq [If (Var "a") (Assign "b" (Var "z")) (If (Binop Times (Binop LessEq (Binop And (Var "x") (Var "a")) (Const 1)) (Const 1)) (Seq []) (Seq [])),Assign "y" (Binop Equal (Uminus (Binop Minus (Const 23) (Var "b"))) (Const 0)),Assign "z" (Binop Equal (Uminus (Binop Div (Const 1) (Var "a"))) (Uminus (Uminus (Const (-27)))))])) (Seq [Assign "y" (Var "b"),Assign "y" (Const 1),Assign "b" (Uminus (Binop Plus (Var "z") (Var "x"))),Assign "y" (Const (-19)),Assign "x" (Var "z")])
 was printed as
*******************
if -5 <= 0 then while a * 1 do { if a then b = z else if ( ( x && a ) <= 1 ) * 1 then { } else { } ; y = - ( 23 - b ) == 0 ; z = - ( 1 / a ) == - ( - ( -27 ) ) } else { y = b ; y = 1 ; b = - ( z + x ) ; y = -19 ; x = z }

*******************
but expected
*******************
if -5 <= 0 then
  while a * 1 do {
    if a then
      b = z
    else if ( ( x && a ) <= 1 ) * 1 then { } else { } ;
    y = - ( 23 - b ) == 0 ;
    z = - ( 1 / a ) == - ( - ( -27 ) )
  }
else {
  y = b ;
  y = 1 ;
  b = - ( z + x ) ;
  y = -19 ;
  x = z
}

*******************

AST
Seq [Assign "x" (Var "z"),If (Binop Plus (Uminus (Binop Or (Const 29) (Var "b"))) (Var "a")) (Seq []) (If (Var "b") (Seq []) (Seq [])),Assign "a" (Binop And (Binop Minus (Var "x") (Var "a")) (Binop Plus (Const 1) (Binop And (Binop Times (Binop Times (Var "x") (Var "y")) (Const 13)) (Var "y")))),If (Var "b") (Assign "b" (Var "a")) (While (Uminus (Const 0)) (Seq [])),Assign "a" (Var "b"),Assign "y" (Var "x"),Assign "b" (Const 1),Assign "z" (Uminus (Uminus (Binop Div (Const 1) (Var "x")))),If (Binop Times (Var "b") (Var "a")) (Seq []) (If (Uminus (Binop Minus (Binop Minus (Const 0) (Const 0)) (Var "x"))) (Assign "b" (Binop Less (Binop Times (Var "z") (Binop Plus (Const 1) (Const 1))) (Const 0))) (Assign "x" (Const 0))),Assign "x" (Const 1),Assign "a" (Var "z"),Assign "x" (Var "b"),Assign "a" (Binop Plus (Const 7) (Const 15)),If (Const 5) (Assign "a" (Uminus (Var "a"))) (If (Var "y") (Seq [Assign "a" (Binop Plus (Var "b") (Const 1))]) (Seq [])),Assign "y" (Var "b"),While (Binop Plus (Binop Less (Var "z") (Const (-2))) (Uminus (Const 0))) (If (Uminus (Binop Times (Var "b") (Const 0))) (Assign "a" (Var "b")) (Seq []))]
 was printed as
*******************
{ x = z ; if - ( 29 || b ) + a then { } else if b then { } else { } ; a = x - a && 1 + ( x * y * 13 && y ) ; if b then b = a else while - ( 0 ) do { } ; a = b ; y = x ; b = 1 ; z = - ( - ( 1 / x ) ) ; if b * a then { } else if - ( 0 -0 - x ) then b = z * ( 1 + 1 ) < 0 else x = 0 ; x = 1 ; a = z ; x = b ; a = 7 + 15 ; if 5 then a = - a else if y then { a = b + 1 } else { } ; y = b ; while ( z < -2 ) + - ( 0 ) do if - ( b * 0 ) then a = b else { } }

*******************
but expected
*******************
{
  x = z ;
  if - ( 29 || b ) + a then { } else if b then { } else { } ;
  a = x - a && 1 + ( x * y * 13 && y ) ;
  if b then
    b = a
  else
    while - ( 0 ) do { } ;
  a = b ;
  y = x ;
  b = 1 ;
  z = - ( - ( 1 / x ) ) ;
  if b * a then { } else if - ( 0 -0 - x ) then
    b = z * ( 1 + 1 ) < 0
  else
    x = 0 ;
  x = 1 ;
  a = z ;
  x = b ;
  a = 7 + 15 ;
  if 5 then
    a = - a
  else if y then {
    a = b + 1
  } else { } ;
  y = b ;
  while ( z < -2 ) + - ( 0 ) do
    if - ( b * 0 ) then
      a = b
    else { }
}

*******************

AST
Seq [While (Binop Times (Uminus (Var "b")) (Var "x")) (Assign "y" (Var "x")),Assign "y" (Var "a"),Assign "y" (Binop Minus (Var "a") (Binop Or (Const 1) (Const 0))),If (Var "y") (Assign "y" (Var "b")) (Seq [Assign "z" (Var "z")]),If (Var "x") (Assign "x" (Binop Plus (Binop Equal (Var "x") (Var "b")) (Const 1))) (Assign "z" (Binop Times (Var "z") (Binop Minus (Uminus (Const (-24))) (Binop And (Binop Minus (Uminus (Var "y")) (Var "z")) (Binop Or (Const 1) (Var "z")))))),Assign "y" (Const 0),Assign "b" (Uminus (Binop Div (Const 17) (Var "b"))),If (Var "x") (If (Var "z") (Assign "b" (Var "z")) (Seq [])) (If (Binop Less (Binop LessEq (Var "y") (Const 0)) (Binop Div (Var "a") (Const 30))) (Assign "z" (Binop And (Var "x") (Var "z"))) (Assign "z" (Var "x"))),Assign "a" (Var "x"),Assign "b" (Binop Minus (Const 0) (Binop Div (Binop Minus (Uminus (Var "x")) (Var "x")) (Var "z"))),Assign "b" (Var "b"),Assign "b" (Const 0),Assign "a" (Const 0),While (Const 1) (While (Const 0) (While (Var "a") (Seq []))),If (Const 1) (Assign "a" (Binop Times (Const 1) (Uminus (Var "z")))) (Seq []),Assign "b" (Var "b"),If (Var "x") (Seq []) (While (Var "a") (Seq [])),Assign "z" (Binop Plus (Var "x") (Var "z")),Assign "x" (Var "a"),Assign "a" (Binop Plus (Var "z") (Var "y")),Assign "x" (Binop Minus (Binop Or (Const 23) (Var "y")) (Var "z")),Assign "x" (Uminus (Const 1)),Assign "z" (Binop Plus (Binop Or (Binop Or (Var "z") (Var "y")) (Const 1)) (Binop Or (Var "b") (Const 0))),Assign "b" (Const 2)]
 was printed as
*******************
{ while - b * x do y = x ; y = a ; y = a - ( 1 || 0 ) ; if y then y = b else { z = z } ; if x then x = ( x == b ) + 1 else z = z * ( - ( -24 ) - ( - y - z && ( 1 || z ) ) ) ; y = 0 ; b = - ( 17 / b ) ; if x then if z then b = z else { } else if y <= 0 < a / 30 then z = x && z else z = x ; a = x ; b = 0 - ( - x - x ) / z ; b = b ; b = 0 ; a = 0 ; while 1 do while 0 do while a do { } ; if 1 then a = 1 * - z else { } ; b = b ; if x then { } else while a do { } ; z = x + z ; x = a ; a = z + y ; x = ( 23 || y ) - z ; x = - ( 1 ) ; z = ( z || y || 1 ) + ( b || 0 ) ; b = 2 }

*******************
but expected
*******************
{
  while - b * x do
    y = x ;
  y = a ;
  y = a - ( 1 || 0 ) ;
  if y then
    y = b
  else {
    z = z
  } ;
  if x then
    x = ( x == b ) + 1
  else
    z = z * ( - ( -24 ) - ( - y - z && ( 1 || z ) ) ) ;
  y = 0 ;
  b = - ( 17 / b ) ;
  if x then
    if z then
      b = z
    else { }
  else if y <= 0 < a / 30 then
    z = x && z
  else
    z = x ;
  a = x ;
  b = 0 - ( - x - x ) / z ;
  b = b ;
  b = 0 ;
  a = 0 ;
  while 1 do
    while 0 do
      while a do { } ;
  if 1 then
    a = 1 * - z
  else { } ;
  b = b ;
  if x then { } else
    while a do { } ;
  z = x + z ;
  x = a ;
  a = z + y ;
  x = ( 23 || y ) - z ;
  x = - ( 1 ) ;
  z = ( z || y || 1 ) + ( b || 0 ) ;
  b = 2
}

*******************

AST
Seq [Assign "z" (Var "a"),Assign "b" (Const 0),Assign "a" (Uminus (Const 1)),While (Binop Less (Const 1) (Const (-22))) (Assign "a" (Const 0)),If (Var "x") (Seq []) (Assign "y" (Binop LessEq (Var "x") (Binop Minus (Var "a") (Const (-10))))),While (Var "x") (If (Binop Times (Const 0) (Uminus (Var "y"))) (Assign "a" (Uminus (Const 0))) (Assign "a" (Binop Times (Const 0) (Var "x")))),While (Binop Or (Var "a") (Var "a")) (Seq []),Assign "z" (Var "y"),Assign "b" (Binop Times (Const 23) (Var "y")),While (Uminus (Uminus (Uminus (Const (-30))))) (Seq [Assign "y" (Binop Plus (Const 1) (Const 0))])]
 was printed as
*******************
{ z = a ; b = 0 ; a = - ( 1 ) ; while 1 < -22 do a = 0 ; if x then { } else y = x <= a - -10 ; while x do if 0 * - y then a = - ( 0 ) else a = 0 * x ; while a || a do { } ; z = y ; b = 23 * y ; while - ( - ( - ( -30 ) ) ) do { y = 1 + 0 } }

*******************
but expected
*******************
{
  z = a ;
  b = 0 ;
  a = - ( 1 ) ;
  while 1 < -22 do
    a = 0 ;
  if x then { } else
    y = x <= a - -10 ;
  while x do
    if 0 * - y then
      a = - ( 0 )
    else
      a = 0 * x ;
  while a || a do { } ;
  z = y ;
  b = 23 * y ;
  while - ( - ( - ( -30 ) ) ) do {
    y = 1 + 0
  }
}

*******************

AST
While (Const 0) (While (Binop Div (Const 1) (Var "z")) (Assign "b" (Const 1)))
 was printed as
*******************
while 0 do while 1 / z do b = 1

*******************
but expected
*******************
while 0 do
  while 1 / z do
    b = 1

*******************

AST
If (Var "a") (Assign "y" (Var "y")) (While (Uminus (Const 1)) (Assign "y" (Var "a")))
 was printed as
*******************
if a then y = y else while - ( 1 ) do y = a

*******************
but expected
*******************
if a then
  y = y
else
  while - ( 1 ) do
    y = a

*******************

AST
If (Binop And (Uminus (Binop Times (Binop LessEq (Uminus (Var "y")) (Var "x")) (Binop Or (Const (-1)) (Const 0)))) (Const (-20))) (Seq [If (Uminus (Const 0)) (While (Var "x") (Assign "a" (Binop Less (Binop Equal (Binop And (Const 0) (Var "z")) (Binop Div (Const 1) (Var "y"))) (Binop LessEq (Binop Times (Uminus (Binop Or (Var "x") (Var "a"))) (Binop Minus (Const 0) (Binop Or (Var "a") (Var "a")))) (Var "b"))))) (Assign "a" (Var "z")),Assign "b" (Uminus (Var "z")),Assign "x" (Var "z"),Assign "y" (Binop Minus (Var "x") (Binop Plus (Binop Equal (Binop Plus (Var "y") (Var "b")) (Var "z")) (Binop Minus (Var "y") (Const 26))))]) (Assign "b" (Var "y"))
 was printed as
*******************
if - ( ( - y <= x ) * ( -1 || 0 ) ) && -20 then { if - ( 0 ) then while x do a = ( 0 && z ) == 1 / y < ( - ( x || a ) * ( 0 - ( a || a ) ) <= b ) else a = z ; b = - z ; x = z ; y = x - ( ( y + b == z ) + ( y -26 ) ) } else b = y

*******************
but expected
*******************
if - ( ( - y <= x ) * ( -1 || 0 ) ) && -20 then {
  if - ( 0 ) then
    while x do
      a = ( 0 && z ) == 1 / y < ( - ( x || a ) * ( 0 - ( a || a ) ) <= b )
  else
    a = z ;
  b = - z ;
  x = z ;
  y = x - ( ( y + b == z ) + ( y -26 ) )
} else
  b = y

*******************

AST
If (Uminus (Const 1)) (While (Const 1) (Seq [Assign "y" (Var "a")])) (Seq [])
 was printed as
*******************
if - ( 1 ) then while 1 do { y = a } else { }

*******************
but expected
*******************
if - ( 1 ) then
  while 1 do {
    y = a
  }
else { }

*******************

AST
Seq [Assign "a" (Binop Or (Const 11) (Var "z")),While (Var "b") (Seq [Assign "a" (Const 1)]),Assign "b" (Const 1),While (Var "z") (Assign "x" (Uminus (Var "a"))),If (Const (-19)) (Seq []) (Assign "b" (Const 0)),While (Const 12) (Assign "b" (Const 3)),Assign "x" (Uminus (Binop Less (Const (-6)) (Uminus (Uminus (Const (-8)))))),While (Const 15) (Assign "z" (Var "b")),Assign "a" (Const (-26)),Assign "b" (Binop Div (Binop Times (Binop Div (Var "z") (Var "x")) (Binop Div (Binop LessEq (Binop Div (Const 9) (Const 0)) (Binop Plus (Var "a") (Const 1))) (Const 0))) (Const 12)),If (Const 0) (Assign "x" (Var "a")) (Assign "y" (Binop Equal (Binop Or (Const 0) (Binop Minus (Uminus (Binop Times (Const 1) (Const 0))) (Var "x"))) (Binop Times (Const 1) (Uminus (Const 1))))),If (Binop Less (Binop Less (Var "y") (Const 1)) (Const 0)) (Assign "b" (Var "y")) (Assign "b" (Const 0)),Assign "z" (Const 0),Assign "b" (Const 0),Assign "b" (Const 1),If (Var "a") (Assign "b" (Var "b")) (Assign "x" (Const 0)),Assign "z" (Binop Times (Uminus (Const 1)) (Binop Less (Binop Div (Binop Less (Binop And (Const 0) (Const 0)) (Binop Equal (Const 0) (Const 1))) (Const 17)) (Uminus (Binop Plus (Var "x") (Var "z"))))),If (Var "z") (Assign "z" (Uminus (Const 0))) (Assign "z" (Const 4)),If (Const 1) (Assign "a" (Uminus (Binop Or (Var "x") (Const 20)))) (If (Binop Plus (Var "a") (Var "a")) (While (Var "b") (Assign "a" (Var "a"))) (If (Const (-29)) (If (Binop Or (Const 1) (Const 0)) (Seq []) (Seq [])) (Assign "z" (Binop Equal (Const (-20)) (Const 1))))),Assign "a" (Var "b"),While (Binop LessEq (Uminus (Var "x")) (Const 26)) (Assign "z" (Uminus (Const 1))),Assign "z" (Binop Or (Binop Times (Var "x") (Binop Minus (Var "a") (Var "x"))) (Const 11))]
 was printed as
*******************
{ a = 11 || z ; while b do { a = 1 } ; b = 1 ; while z do x = - a ; if -19 then { } else b = 0 ; while 12 do b = 3 ; x = - ( -6 < - ( - ( -8 ) ) ) ; while 15 do z = b ; a = -26 ; b = z / x * ( ( 9 / 0 <= a + 1 ) / 0 ) / 12 ; if 0 then x = a else y = ( 0 || - ( 1 * 0 ) - x ) == 1 * - ( 1 ) ; if y < 1 < 0 then b = y else b = 0 ; z = 0 ; b = 0 ; b = 1 ; if a then b = b else x = 0 ; z = - ( 1 ) * ( ( ( 0 && 0 ) < ( 0 == 1 ) ) / 17 < - ( x + z ) ) ; if z then z = - ( 0 ) else z = 4 ; if 1 then a = - ( x || 20 ) else if a + a then while b do a = a else if -29 then if 1 || 0 then { } else { } else z = -20 == 1 ; a = b ; while - x <= 26 do z = - ( 1 ) ; z = x * ( a - x ) || 11 }

*******************
but expected
*******************
{
  a = 11 || z ;
  while b do {
    a = 1
  } ;
  b = 1 ;
  while z do
    x = - a ;
  if -19 then { } else
    b = 0 ;
  while 12 do
    b = 3 ;
  x = - ( -6 < - ( - ( -8 ) ) ) ;
  while 15 do
    z = b ;
  a = -26 ;
  b = z / x * ( ( 9 / 0 <= a + 1 ) / 0 ) / 12 ;
  if 0 then
    x = a
  else
    y = ( 0 || - ( 1 * 0 ) - x ) == 1 * - ( 1 ) ;
  if y < 1 < 0 then
    b = y
  else
    b = 0 ;
  z = 0 ;
  b = 0 ;
  b = 1 ;
  if a then
    b = b
  else
    x = 0 ;
  z = - ( 1 ) * ( ( ( 0 && 0 ) < ( 0 == 1 ) ) / 17 < - ( x + z ) ) ;
  if z then
    z = - ( 0 )
  else
    z = 4 ;
  if 1 then
    a = - ( x || 20 )
  else if a + a then
    while b do
      a = a
  else if -29 then
    if 1 || 0 then { } else { }
  else
    z = -20 == 1 ;
  a = b ;
  while - x <= 26 do
    z = - ( 1 ) ;
  z = x * ( a - x ) || 11
}

*******************

AST
Seq [If (Var "x") (Assign "z" (Binop Or (Var "x") (Const (-19)))) (Seq [If (Binop LessEq (Const 0) (Const 0)) (Seq []) (Seq [])]),If (Var "a") (While (Binop Equal (Const 1) (Var "x")) (Seq [])) (Seq []),Assign "z" (Const 0),Assign "y" (Var "b"),While (Const 1) (Assign "b" (Binop Minus (Binop Plus (Var "b") (Uminus (Var "x"))) (Uminus (Uminus (Const (-2)))))),Assign "z" (Binop Plus (Var "a") (Uminus (Binop Less (Uminus (Binop And (Const 16) (Const (-26)))) (Var "y")))),If (Binop And (Var "y") (Const 1)) (Assign "a" (Uminus (Binop Equal (Uminus (Var "b")) (Var "y")))) (Assign "x" (Const 28)),Assign "a" (Uminus (Binop Equal (Var "b") (Binop Or (Binop LessEq (Var "b") (Var "a")) (Uminus (Const (-26)))))),Assign "x" (Binop Plus (Const 13) (Binop LessEq (Var "x") (Var "y"))),If (Const 1) (Assign "x" (Var "b")) (If (Const 3) (Assign "a" (Const 21)) (Seq [])),Assign "a" (Binop Or (Var "x") (Uminus (Binop And (Var "b") (Binop Plus (Const 17) (Var "a")))))]
 was printed as
*******************
{ if x then z = x || -19 else { if 0 <= 0 then { } else { } } ; if a then while 1 == x do { } else { } ; z = 0 ; y = b ; while 1 do b = b + - x - - ( - ( -2 ) ) ; z = a + - ( - ( 16 && -26 ) < y ) ; if y && 1 then a = - ( - b == y ) else x = 28 ; a = - ( b == ( b <= a || - ( -26 ) ) ) ; x = 13 + ( x <= y ) ; if 1 then x = b else if 3 then a = 21 else { } ; a = x || - ( b && 17 + a ) }

*******************
but expected
*******************
{
  if x then
    z = x || -19
  else {
    if 0 <= 0 then { } else { }
  } ;
  if a then
    while 1 == x do { }
  else { } ;
  z = 0 ;
  y = b ;
  while 1 do
    b = b + - x - - ( - ( -2 ) ) ;
  z = a + - ( - ( 16 && -26 ) < y ) ;
  if y && 1 then
    a = - ( - b == y )
  else
    x = 28 ;
  a = - ( b == ( b <= a || - ( -26 ) ) ) ;
  x = 13 + ( x <= y ) ;
  if 1 then
    x = b
  else if 3 then
    a = 21
  else { } ;
  a = x || - ( b && 17 + a )
}

*******************

AST
Seq [While (Var "b") (Assign "b" (Binop Less (Const 0) (Const 0))),Assign "b" (Uminus (Const 1)),Assign "a" (Binop Equal (Uminus (Binop Less (Binop Equal (Var "a") (Var "y")) (Var "y"))) (Var "a"))]
 was printed as
*******************
{ while b do b = 0 < 0 ; b = - ( 1 ) ; a = - ( a == y < y ) == a }

*******************
but expected
*******************
{
  while b do
    b = 0 < 0 ;
  b = - ( 1 ) ;
  a = - ( a == y < y ) == a
}

*******************

AST
If (Var "b") (Assign "y" (Const (-18))) (Assign "a" (Binop Div (Var "a") (Var "z")))
 was printed as
*******************
if b then y = -18 else a = a / z

*******************
but expected
*******************
if b then
  y = -18
else
  a = a / z

*******************

AST
Seq [Assign "z" (Binop Plus (Uminus (Binop And (Const 6) (Var "y"))) (Var "x")),Assign "a" (Binop Less (Const (-20)) (Binop And (Var "z") (Binop Less (Uminus (Binop Plus (Const 25) (Var "x"))) (Const 0)))),Assign "x" (Binop Plus (Var "a") (Binop Or (Binop LessEq (Const 1) (Binop And (Binop Less (Var "z") (Var "x")) (Var "b"))) (Binop Div (Binop Plus (Uminus (Const 1)) (Binop Less (Const 1) (Var "x"))) (Binop Plus (Const 1) (Var "a"))))),Assign "x" (Var "b"),Assign "z" (Binop Equal (Var "y") (Var "z")),While (Uminus (Binop Minus (Var "b") (Binop Div (Const (-16)) (Const 17)))) (Assign "b" (Binop Times (Uminus (Binop Or (Var "y") (Binop Plus (Var "y") (Var "x")))) (Const 1))),If (Var "x") (Assign "b" (Const 0)) (Assign "z" (Uminus (Uminus (Const 1))))]
 was printed as
*******************
{ z = - ( 6 && y ) + x ; a = -20 < ( z && - ( 25 + x ) < 0 ) ; x = a + ( 1 <= ( z < x && b ) || ( - ( 1 ) + ( 1 < x ) ) / ( 1 + a ) ) ; x = b ; z = y == z ; while - ( b - -16 / 17 ) do b = - ( y || y + x ) * 1 ; if x then b = 0 else z = - ( - ( 1 ) ) }

*******************
but expected
*******************
{
  z = - ( 6 && y ) + x ;
  a = -20 < ( z && - ( 25 + x ) < 0 ) ;
  x = a + ( 1 <= ( z < x && b ) || ( - ( 1 ) + ( 1 < x ) ) / ( 1 + a ) ) ;
  x = b ;
  z = y == z ;
  while - ( b - -16 / 17 ) do
    b = - ( y || y + x ) * 1 ;
  if x then
    b = 0
  else
    z = - ( - ( 1 ) )
}

*******************

AST
If (Const (-10)) (Seq []) (Assign "y" (Uminus (Const 1)))
 was printed as
*******************
if -10 then { } else y = - ( 1 )

*******************
but expected
*******************
if -10 then { } else
  y = - ( 1 )

*******************

AST
If (Const 0) (Seq [If (Binop Times (Binop Times (Const 1) (Binop Minus (Binop Or (Const 1) (Const 27)) (Const (-29)))) (Binop Equal (Var "a") (Binop Plus (Const (-5)) (Uminus (Var "x"))))) (Seq []) (Assign "a" (Var "x")),If (Var "y") (Assign "y" (Binop Equal (Uminus (Var "a")) (Var "z"))) (Assign "x" (Var "z")),If (Const (-10)) (Assign "a" (Var "x")) (Seq [Assign "y" (Binop LessEq (Binop Times (Var "a") (Uminus (Var "z"))) (Binop Plus (Var "z") (Var "z")))])]) (If (Const 1) (Seq [Assign "y" (Const (-12)),Assign "y" (Const 1),Assign "x" (Binop Minus (Const 24) (Var "b"))]) (If (Var "a") (Seq [Assign "a" (Var "z")]) (While (Binop Or (Const 1) (Const 1)) (Assign "y" (Var "a")))))
 was printed as
*******************
if 0 then { if 1 * ( ( 1 || 27 ) - -29 ) * ( a == -5 + - x ) then { } else a = x ; if y then y = - a == z else x = z ; if -10 then a = x else { y = a * - z <= z + z } } else if 1 then { y = -12 ; y = 1 ; x = 24 - b } else if a then { a = z } else while 1 || 1 do y = a

*******************
but expected
*******************
if 0 then {
  if 1 * ( ( 1 || 27 ) - -29 ) * ( a == -5 + - x ) then { } else
    a = x ;
  if y then
    y = - a == z
  else
    x = z ;
  if -10 then
    a = x
  else {
    y = a * - z <= z + z
  }
} else if 1 then {
  y = -12 ;
  y = 1 ;
  x = 24 - b
} else if a then {
  a = z
} else
  while 1 || 1 do
    y = a

*******************

AST
While (Var "a") (Assign "y" (Var "a"))
 was printed as
*******************
while a do y = a

*******************
but expected
*******************
while a do
  y = a

*******************

AST
While (Const 0) (Seq [Assign "y" (Var "y"),Assign "a" (Binop Plus (Binop Or (Const 0) (Binop Equal (Binop Or (Var "b") (Const 1)) (Binop LessEq (Binop Minus (Const 0) (Const 0)) (Binop LessEq (Var "b") (Const 10))))) (Uminus (Binop Times (Var "z") (Var "x")))),If (Var "y") (If (Uminus (Binop Plus (Binop Equal (Uminus (Const 8)) (Const 1)) (Const 1))) (Seq []) (Seq [])) (Assign "a" (Uminus (Binop Less (Var "x") (Var "b")))),If (Const 1) (If (Var "a") (Seq []) (Seq [])) (Assign "y" (Const 1)),While (Binop Less (Binop Div (Binop Less (Var "z") (Const (-8))) (Binop Less (Uminus (Const 0)) (Const (-23)))) (Binop And (Var "x") (Var "z"))) (Assign "b" (Var "a")),If (Binop Less (Var "b") (Var "b")) (Seq []) (Seq []),While (Uminus (Binop Div (Uminus (Binop Less (Uminus (Var "a")) (Const 1))) (Var "x"))) (If (Var "y") (Seq []) (Seq [])),Assign "b" (Var "x")])
 was printed as
*******************
while 0 do { y = y ; a = ( 0 || ( b || 1 ) == ( 0 -0 <= ( b <= 10 ) ) ) + - ( z * x ) ; if y then if - ( ( - ( 8 ) == 1 ) + 1 ) then { } else { } else a = - ( x < b ) ; if 1 then if a then { } else { } else y = 1 ; while ( z < -8 ) / ( - ( 0 ) < -23 ) < ( x && z ) do b = a ; if b < b then { } else { } ; while - ( - ( - a < 1 ) / x ) do if y then { } else { } ; b = x }

*******************
but expected
*******************
while 0 do {
  y = y ;
  a = ( 0 || ( b || 1 ) == ( 0 -0 <= ( b <= 10 ) ) ) + - ( z * x ) ;
  if y then
    if - ( ( - ( 8 ) == 1 ) + 1 ) then { } else { }
  else
    a = - ( x < b ) ;
  if 1 then
    if a then { } else { }
  else
    y = 1 ;
  while ( z < -8 ) / ( - ( 0 ) < -23 ) < ( x && z ) do
    b = a ;
  if b < b then { } else { } ;
  while - ( - ( - a < 1 ) / x ) do
    if y then { } else { } ;
  b = x
}

*******************

AST
While (Const 1) (If (Var "y") (Seq [Assign "z" (Binop Less (Const 1) (Binop Plus (Const (-24)) (Const 0))),Assign "a" (Var "a"),Assign "x" (Uminus (Binop Equal (Const (-23)) (Uminus (Binop And (Const (-15)) (Const 1)))))]) (Assign "x" (Var "z")))
 was printed as
*******************
while 1 do if y then { z = 1 < -24 + 0 ; a = a ; x = - ( -23 == - ( -15 && 1 ) ) } else x = z

*******************
but expected
*******************
while 1 do
  if y then {
    z = 1 < -24 + 0 ;
    a = a ;
    x = - ( -23 == - ( -15 && 1 ) )
  } else
    x = z

*******************

AST
Seq [Assign "y" (Const 0),Assign "a" (Var "b"),Assign "y" (Binop Div (Binop Less (Binop Minus (Const 1) (Uminus (Const 1))) (Var "z")) (Binop Minus (Uminus (Var "x")) (Const 0))),Assign "b" (Uminus (Binop Times (Var "b") (Const 0))),While (Const 0) (Assign "z" (Var "b")),Assign "x" (Var "x"),If (Binop Minus (Var "x") (Uminus (Const 0))) (Assign "y" (Binop Div (Const 30) (Const 0))) (While (Var "x") (Assign "a" (Binop Times (Uminus (Var "a")) (Binop LessEq (Const 0) (Uminus (Const 0)))))),Assign "b" (Const 1),Assign "b" (Const 0),Assign "a" (Var "b"),Assign "a" (Var "z"),Assign "x" (Uminus (Uminus (Const (-11)))),Assign "x" (Binop Or (Uminus (Const 0)) (Const (-27))),Assign "x" (Var "a"),Assign "y" (Var "y"),Assign "y" (Var "z"),Assign "x" (Const 0),Assign "b" (Var "b"),Assign "a" (Var "z"),Assign "x" (Var "x")]
 was printed as
*******************
{ y = 0 ; a = b ; y = ( 1 - - ( 1 ) < z ) / ( - x -0 ) ; b = - ( b * 0 ) ; while 0 do z = b ; x = x ; if x - - ( 0 ) then y = 30 / 0 else while x do a = - a * ( 0 <= - ( 0 ) ) ; b = 1 ; b = 0 ; a = b ; a = z ; x = - ( - ( -11 ) ) ; x = - ( 0 ) || -27 ; x = a ; y = y ; y = z ; x = 0 ; b = b ; a = z ; x = x }

*******************
but expected
*******************
{
  y = 0 ;
  a = b ;
  y = ( 1 - - ( 1 ) < z ) / ( - x -0 ) ;
  b = - ( b * 0 ) ;
  while 0 do
    z = b ;
  x = x ;
  if x - - ( 0 ) then
    y = 30 / 0
  else
    while x do
      a = - a * ( 0 <= - ( 0 ) ) ;
  b = 1 ;
  b = 0 ;
  a = b ;
  a = z ;
  x = - ( - ( -11 ) ) ;
  x = - ( 0 ) || -27 ;
  x = a ;
  y = y ;
  y = z ;
  x = 0 ;
  b = b ;
  a = z ;
  x = x
}

*******************

AST
Seq [While (Const (-25)) (Seq []),Assign "y" (Binop Minus (Binop Minus (Binop Div (Binop And (Var "x") (Binop Plus (Var "b") (Var "x"))) (Var "z")) (Binop Or (Binop Plus (Binop Or (Const 0) (Const (-27))) (Const 0)) (Binop Or (Var "z") (Binop Equal (Var "z") (Var "x"))))) (Const (-19))),If (Const 8) (If (Uminus (Binop Or (Const 0) (Const (-25)))) (Assign "z" (Binop LessEq (Binop Times (Var "y") (Binop LessEq (Var "x") (Const 1))) (Const 1))) (Seq [])) (Seq []),Assign "b" (Var "y"),Assign "a" (Var "x"),Assign "a" (Binop Times (Const 0) (Var "b")),Assign "y" (Binop Minus (Const 1) (Uminus (Binop LessEq (Var "z") (Binop And (Var "x") (Binop Div (Const 2) (Var "a")))))),Assign "x" (Uminus (Uminus (Var "z"))),While (Binop LessEq (Var "z") (Var "b")) (If (Var "a") (Seq []) (Assign "b" (Var "y"))),Assign "b" (Binop LessEq (Binop LessEq (Const 1) (Var "z")) (Const 1)),While (Const 1) (Seq []),Assign "y" (Var "b")]
 was printed as
*******************
{ while -25 do { } ; y = ( x && b + x ) / z - ( ( 0 || -27 ) + 0 || ( z || z == x ) ) - -19 ; if 8 then if - ( 0 || -25 ) then z = y * ( x <= 1 ) <= 1 else { } else { } ; b = y ; a = x ; a = 0 * b ; y = 1 - - ( z <= ( x && 2 / a ) ) ; x = - ( - z ) ; while z <= b do if a then { } else b = y ; b = 1 <= z <= 1 ; while 1 do { } ; y = b }

*******************
but expected
*******************
{
  while -25 do { } ;
  y = ( x && b + x ) / z - ( ( 0 || -27 ) + 0 || ( z || z == x ) ) - -19 ;
  if 8 then
    if - ( 0 || -25 ) then
      z = y * ( x <= 1 ) <= 1
    else { }
  else { } ;
  b = y ;
  a = x ;
  a = 0 * b ;
  y = 1 - - ( z <= ( x && 2 / a ) ) ;
  x = - ( - z ) ;
  while z <= b do
    if a then { } else
      b = y ;
  b = 1 <= z <= 1 ;
  while 1 do { } ;
  y = b
}

*******************

AST
If (Binop Minus (Var "a") (Var "y")) (Assign "y" (Binop Equal (Binop Plus (Const 0) (Var "x")) (Var "b"))) (If (Const 30) (If (Binop LessEq (Const 1) (Var "a")) (Assign "z" (Const 0)) (If (Var "a") (Seq []) (While (Var "b") (Seq [])))) (Assign "a" (Var "b")))
 was printed as
*******************
if a - y then y = 0 + x == b else if 30 then if 1 <= a then z = 0 else if a then { } else while b do { } else a = b

*******************
but expected
*******************
if a - y then
  y = 0 + x == b
else if 30 then
  if 1 <= a then
    z = 0
  else if a then { } else
    while b do { }
else
  a = b

*******************

AST
Seq [Assign "a" (Binop Equal (Const 0) (Var "a")),Assign "a" (Var "b"),Assign "x" (Uminus (Binop Plus (Uminus (Binop Or (Binop Less (Const 0) (Var "b")) (Binop LessEq (Var "x") (Var "a")))) (Binop Less (Const 0) (Binop Equal (Const 0) (Var "a"))))),Assign "y" (Binop Less (Binop Or (Uminus (Const 23)) (Uminus (Const 25))) (Binop And (Var "b") (Binop Div (Var "a") (Var "b")))),If (Const 0) (Assign "b" (Const 22)) (If (Binop Less (Var "b") (Binop Minus (Binop LessEq (Binop And (Binop Or (Var "y") (Const 1)) (Var "b")) (Const (-6))) (Binop Equal (Binop And (Const 1) (Const 0)) (Const 0)))) (If (Uminus (Const 0)) (Seq []) (Seq [])) (Seq [])),While (Var "a") (Assign "b" (Var "y")),If (Uminus (Var "z")) (Assign "y" (Var "y")) (Seq []),If (Var "z") (Assign "x" (Const 30)) (Assign "x" (Binop Plus (Binop LessEq (Const 0) (Var "b")) (Uminus (Binop Or (Binop Or (Binop Times (Const 1) (Var "x")) (Const 1)) (Const 1))))),Assign "x" (Var "a"),If (Const 1) (While (Binop And (Var "b") (Uminus (Binop Minus (Binop Div (Var "x") (Binop Or (Var "z") (Var "a"))) (Var "z")))) (Assign "y" (Var "y"))) (Seq [If (Var "z") (Seq []) (If (Binop And (Var "a") (Const (-17))) (Seq []) (Seq [])),Assign "a" (Var "z"),Assign "x" (Binop Minus (Uminus (Const (-19))) (Var "z"))]),Assign "a" (Var "x"),Assign "a" (Uminus (Const 1)),While (Binop LessEq (Const 1) (Binop Or (Var "b") (Binop Less (Const 0) (Binop LessEq (Const 0) (Var "b"))))) (Assign "a" (Var "x")),Assign "y" (Const 0)]
 was printed as
*******************
{ a = 0 == a ; a = b ; x = - ( - ( 0 < b || x <= a ) + ( 0 < ( 0 == a ) ) ) ; y = ( - ( 23 ) || - ( 25 ) ) < ( b && a / b ) ; if 0 then b = 22 else if b < ( ( ( y || 1 ) && b ) <= -6 ) - ( ( 1 && 0 ) == 0 ) then if - ( 0 ) then { } else { } else { } ; while a do b = y ; if - z then y = y else { } ; if z then x = 30 else x = ( 0 <= b ) + - ( 1 * x || 1 || 1 ) ; x = a ; if 1 then while b && - ( x / ( z || a ) - z ) do y = y else { if z then { } else if a && -17 then { } else { } ; a = z ; x = - ( -19 ) - z } ; a = x ; a = - ( 1 ) ; while 1 <= ( b || 0 < ( 0 <= b ) ) do a = x ; y = 0 }

*******************
but expected
*******************
{
  a = 0 == a ;
  a = b ;
  x = - ( - ( 0 < b || x <= a ) + ( 0 < ( 0 == a ) ) ) ;
  y = ( - ( 23 ) || - ( 25 ) ) < ( b && a / b ) ;
  if 0 then
    b = 22
  else if b < ( ( ( y || 1 ) && b ) <= -6 ) - ( ( 1 && 0 ) == 0 ) then
    if - ( 0 ) then { } else { }
  else { } ;
  while a do
    b = y ;
  if - z then
    y = y
  else { } ;
  if z then
    x = 30
  else
    x = ( 0 <= b ) + - ( 1 * x || 1 || 1 ) ;
  x = a ;
  if 1 then
    while b && - ( x / ( z || a ) - z ) do
      y = y
  else {
    if z then { } else if a && -17 then { } else { } ;
    a = z ;
    x = - ( -19 ) - z
  } ;
  a = x ;
  a = - ( 1 ) ;
  while 1 <= ( b || 0 < ( 0 <= b ) ) do
    a = x ;
  y = 0
}

*******************

AST
While (Const 0) (If (Binop And (Const 1) (Binop Div (Var "b") (Var "a"))) (Assign "x" (Uminus (Const 0))) (Assign "b" (Var "z")))
 was printed as
*******************
while 0 do if 1 && b / a then x = - ( 0 ) else b = z

*******************
but expected
*******************
while 0 do
  if 1 && b / a then
    x = - ( 0 )
  else
    b = z

*******************

AST
Seq [Assign "z" (Binop And (Const (-20)) (Const (-3))),Assign "b" (Var "x"),Assign "b" (Var "y"),While (Var "x") (Seq []),Assign "x" (Uminus (Var "y")),Assign "b" (Uminus (Const 0)),While (Uminus (Binop LessEq (Var "x") (Const 7))) (Assign "y" (Binop Less (Binop Less (Const 0) (Binop Minus (Const 1) (Binop Or (Binop Minus (Const 1) (Const 0)) (Uminus (Var "b"))))) (Uminus (Uminus (Binop And (Binop Less (Var "a") (Var "y")) (Uminus (Const 1))))))),While (Var "y") (Assign "z" (Binop Plus (Const 30) (Const 0))),If (Binop And (Const 0) (Const (-17))) (Assign "z" (Uminus (Const 1))) (Seq []),Assign "b" (Binop Times (Const 0) (Const 1)),If (Binop Div (Const 1) (Var "a")) (Assign "a" (Uminus (Var "y"))) (Seq [If (Var "a") (Seq []) (Assign "a" (Var "y"))]),Assign "y" (Var "x"),Assign "z" (Uminus (Binop And (Var "x") (Binop Div (Uminus (Uminus (Const 1))) (Binop Equal (Var "b") (Binop Plus (Const (-19)) (Var "y")))))),If (Const 12) (Seq [Assign "z" (Binop And (Binop Minus (Binop Times (Const 1) (Const 1)) (Binop LessEq (Binop Plus (Uminus (Var "x")) (Const 0)) (Const 0))) (Const (-6)))]) (While (Uminus (Uminus (Var "y"))) (If (Var "z") (Seq []) (Seq []))),Assign "a" (Const 0),Assign "b" (Binop Equal (Var "z") (Const (-22))),Assign "a" (Var "b"),Assign "a" (Const (-3)),If (Uminus (Var "a")) (If (Const (-18)) (Assign "y" (Const 0)) (Seq [])) (Assign "x" (Const 21)),If (Var "y") (While (Binop Times (Const 1) (Var "b")) (While (Var "a") (Assign "x" (Const 1)))) (Assign "z" (Uminus (Const 1)))]
 was printed as
*******************
{ z = -20 && -3 ; b = x ; b = y ; while x do { } ; x = - y ; b = - ( 0 ) ; while - ( x <= 7 ) do y = 0 < 1 - ( 1 -0 || - b ) < - ( - ( a < y && - ( 1 ) ) ) ; while y do z = 30 + 0 ; if 0 && -17 then z = - ( 1 ) else { } ; b = 0 * 1 ; if 1 / a then a = - y else { if a then { } else a = y } ; y = x ; z = - ( x && - ( - ( 1 ) ) / ( b == -19 + y ) ) ; if 12 then { z = 1 * 1 - ( - x + 0 <= 0 ) && -6 } else while - ( - y ) do if z then { } else { } ; a = 0 ; b = z == -22 ; a = b ; a = -3 ; if - a then if -18 then y = 0 else { } else x = 21 ; if y then while 1 * b do while a do x = 1 else z = - ( 1 ) }

*******************
but expected
*******************
{
  z = -20 && -3 ;
  b = x ;
  b = y ;
  while x do { } ;
  x = - y ;
  b = - ( 0 ) ;
  while - ( x <= 7 ) do
    y = 0 < 1 - ( 1 -0 || - b ) < - ( - ( a < y && - ( 1 ) ) ) ;
  while y do
    z = 30 + 0 ;
  if 0 && -17 then
    z = - ( 1 )
  else { } ;
  b = 0 * 1 ;
  if 1 / a then
    a = - y
  else {
    if a then { } else
      a = y
  } ;
  y = x ;
  z = - ( x && - ( - ( 1 ) ) / ( b == -19 + y ) ) ;
  if 12 then {
    z = 1 * 1 - ( - x + 0 <= 0 ) && -6
  } else
    while - ( - y ) do
      if z then { } else { } ;
  a = 0 ;
  b = z == -22 ;
  a = b ;
  a = -3 ;
  if - a then
    if -18 then
      y = 0
    else { }
  else
    x = 21 ;
  if y then
    while 1 * b do
      while a do
        x = 1
  else
    z = - ( 1 )
}

*******************

AST
Seq [Assign "a" (Uminus (Binop Div (Const 0) (Var "y"))),Assign "a" (Const 1),While (Var "x") (If (Uminus (Var "y")) (Seq []) (Seq [])),If (Var "b") (While (Var "x") (Assign "z" (Binop Times (Binop And (Binop Minus (Binop Plus (Const 1) (Const (-11))) (Var "z")) (Const 22)) (Binop And (Const 1) (Const 8))))) (Seq [If (Uminus (Var "x")) (Seq []) (While (Var "b") (Seq [])),Assign "x" (Binop Div (Var "a") (Const 0))]),If (Const 0) (Assign "x" (Uminus (Binop Or (Binop And (Var "x") (Const 7)) (Uminus (Const 0))))) (Assign "a" (Const 22))]
 was printed as
*******************
{ a = - ( 0 / y ) ; a = 1 ; while x do if - y then { } else { } ; if b then while x do z = ( 1 + -11 - z && 22 ) * ( 1 && 8 ) else { if - x then { } else while b do { } ; x = a / 0 } ; if 0 then x = - ( x && 7 || - ( 0 ) ) else a = 22 }

*******************
but expected
*******************
{
  a = - ( 0 / y ) ;
  a = 1 ;
  while x do
    if - y then { } else { } ;
  if b then
    while x do
      z = ( 1 + -11 - z && 22 ) * ( 1 && 8 )
  else {
    if - x then { } else
      while b do { } ;
    x = a / 0
  } ;
  if 0 then
    x = - ( x && 7 || - ( 0 ) )
  else
    a = 22
}

*******************

AST
If (Uminus (Var "y")) (Seq [If (Binop Or (Binop Plus (Uminus (Var "a")) (Uminus (Binop Div (Var "b") (Binop Minus (Var "a") (Var "a"))))) (Var "x")) (Seq []) (Assign "a" (Var "z")),Assign "z" (Var "a"),While (Var "y") (Assign "x" (Var "x"))]) (Seq [If (Var "x") (If (Binop Times (Var "z") (Uminus (Const 1))) (Assign "z" (Var "y")) (If (Binop Equal (Const 0) (Binop Minus (Uminus (Var "a")) (Var "a"))) (Seq []) (Seq []))) (If (Binop Or (Const 0) (Const 1)) (While (Binop LessEq (Const 0) (Binop Less (Var "b") (Binop LessEq (Const 14) (Var "b")))) (Seq [])) (Seq [])),Assign "b" (Var "y")])
 was printed as
*******************
if - y then { if - a + - ( b / ( a - a ) ) || x then { } else a = z ; z = a ; while y do x = x } else { if x then if z * - ( 1 ) then z = y else if 0 == - a - a then { } else { } else if 0 || 1 then while 0 <= ( b < ( 14 <= b ) ) do { } else { } ; b = y }

*******************
but expected
*******************
if - y then {
  if - a + - ( b / ( a - a ) ) || x then { } else
    a = z ;
  z = a ;
  while y do
    x = x
} else {
  if x then
    if z * - ( 1 ) then
      z = y
    else if 0 == - a - a then { } else { }
  else if 0 || 1 then
    while 0 <= ( b < ( 14 <= b ) ) do { }
  else { } ;
  b = y
}

*******************

AST
If (Uminus (Var "b")) (If (Var "x") (If (Var "y") (Seq [If (Uminus (Uminus (Var "z"))) (Seq []) (Seq [])]) (Assign "a" (Const 0))) (If (Binop Less (Var "z") (Const 1)) (While (Binop And (Binop Div (Var "x") (Const 28)) (Binop Equal (Const 7) (Var "z"))) (Assign "y" (Binop Plus (Binop Plus (Const 1) (Const (-10))) (Binop LessEq (Var "z") (Uminus (Var "x")))))) (If (Var "b") (Assign "x" (Const 0)) (Seq [])))) (While (Const 2) (Assign "y" (Var "b")))
 was printed as
*******************
if - b then if x then if y then { if - ( - z ) then { } else { } } else a = 0 else if z < 1 then while x / 28 && 7 == z do y = 1 + -10 + ( z <= - x ) else if b then x = 0 else { } else while 2 do y = b

*******************
but expected
*******************
if - b then
  if x then
    if y then {
      if - ( - z ) then { } else { }
    } else
      a = 0
  else if z < 1 then
    while x / 28 && 7 == z do
      y = 1 + -10 + ( z <= - x )
  else if b then
    x = 0
  else { }
else
  while 2 do
    y = b

*******************

AST
Seq [If (Const 0) (Assign "a" (Uminus (Var "b"))) (Assign "b" (Const 1)),Assign "z" (Var "a"),If (Const (-13)) (Assign "z" (Const 10)) (If (Var "x") (Seq []) (Assign "b" (Var "y")))]
 was printed as
*******************
{ if 0 then a = - b else b = 1 ; z = a ; if -13 then z = 10 else if x then { } else b = y }

*******************
but expected
*******************
{
  if 0 then
    a = - b
  else
    b = 1 ;
  z = a ;
  if -13 then
    z = 10
  else if x then { } else
    b = y
}

*******************

AST
Seq [Assign "z" (Binop Less (Const (-13)) (Binop Minus (Var "b") (Binop Minus (Binop Minus (Var "z") (Var "z")) (Const 1)))),Assign "b" (Var "y"),Assign "a" (Binop Or (Binop And (Binop Or (Const 0) (Binop LessEq (Uminus (Var "a")) (Const (-24)))) (Var "b")) (Const 25)),Assign "x" (Var "a"),If (Const 0) (If (Const 0) (Seq []) (Seq [])) (While (Binop Times (Const 14) (Var "b")) (Assign "a" (Const 0))),If (Var "y") (Assign "z" (Uminus (Const 0))) (If (Var "b") (Assign "z" (Const 1)) (Assign "b" (Var "y"))),Assign "b" (Const 12),While (Const 1) (Seq []),Assign "z" (Binop Times (Const 0) (Var "y")),Assign "y" (Var "x"),Assign "b" (Uminus (Binop Equal (Const 1) (Uminus (Uminus (Var "x"))))),If (Var "x") (Seq []) (Assign "x" (Binop LessEq (Uminus (Binop Or (Binop LessEq (Binop Equal (Var "x") (Const 14)) (Binop Or (Var "z") (Const (-4)))) (Var "x"))) (Var "b"))),Assign "a" (Const 0),While (Uminus (Binop LessEq (Binop Minus (Binop Minus (Const 1) (Const 0)) (Const 1)) (Binop Minus (Const 14) (Uminus (Var "x"))))) (Seq [If (Binop Plus (Uminus (Var "b")) (Const 0)) (Seq []) (Seq [])]),Assign "x" (Binop Less (Var "a") (Binop Plus (Uminus (Const 1)) (Const 1))),Assign "z" (Var "y"),If (Const 1) (Assign "x" (Binop Plus (Binop Div (Const 1) (Uminus (Const (-30)))) (Binop Equal (Var "x") (Var "a")))) (Assign "x" (Binop Div (Uminus (Binop Div (Var "z") (Const 0))) (Binop LessEq (Uminus (Binop And (Var "b") (Binop Times (Const 0) (Var "x")))) (Var "x")))),Assign "z" (Uminus (Const 0))]
 was printed as
*******************
{ z = -13 < b - ( z - z -1 ) ; b = y ; a = ( 0 || - a <= -24 ) && b || 25 ; x = a ; if 0 then if 0 then { } else { } else while 14 * b do a = 0 ; if y then z = - ( 0 ) else if b then z = 1 else b = y ; b = 12 ; while 1 do { } ; z = 0 * y ; y = x ; b = - ( 1 == - ( - x ) ) ; if x then { } else x = - ( x == 14 <= ( z || -4 ) || x ) <= b ; a = 0 ; while - ( 1 -0 -1 <= 14 - - x ) do { if - b + 0 then { } else { } } ; x = a < - ( 1 ) + 1 ; z = y ; if 1 then x = 1 / - ( -30 ) + ( x == a ) else x = - ( z / 0 ) / ( - ( b && 0 * x ) <= x ) ; z = - ( 0 ) }

*******************
but expected
*******************
{
  z = -13 < b - ( z - z -1 ) ;
  b = y ;
  a = ( 0 || - a <= -24 ) && b || 25 ;
  x = a ;
  if 0 then
    if 0 then { } else { }
  else
    while 14 * b do
      a = 0 ;
  if y then
    z = - ( 0 )
  else if b then
    z = 1
  else
    b = y ;
  b = 12 ;
  while 1 do { } ;
  z = 0 * y ;
  y = x ;
  b = - ( 1 == - ( - x ) ) ;
  if x then { } else
    x = - ( x == 14 <= ( z || -4 ) || x ) <= b ;
  a = 0 ;
  while - ( 1 -0 -1 <= 14 - - x ) do {
    if - b + 0 then { } else { }
  } ;
  x = a < - ( 1 ) + 1 ;
  z = y ;
  if 1 then
    x = 1 / - ( -30 ) + ( x == a )
  else
    x = - ( z / 0 ) / ( - ( b && 0 * x ) <= x ) ;
  z = - ( 0 )
}

*******************

AST
Seq [Assign "b" (Uminus (Const 20)),While (Var "b") (Seq []),While (Uminus (Var "y")) (Assign "z" (Binop And (Binop LessEq (Uminus (Uminus (Var "y"))) (Var "a")) (Const 0)))]
 was printed as
*******************
{ b = - ( 20 ) ; while b do { } ; while - y do z = - ( - y ) <= a && 0 }

*******************
but expected
*******************
{
  b = - ( 20 ) ;
  while b do { } ;
  while - y do
    z = - ( - y ) <= a && 0
}

*******************

AST
Seq [If (Uminus (Const 0)) (Assign "y" (Var "b")) (Seq []),If (Binop LessEq (Const 1) (Binop Div (Var "y") (Const 1))) (Seq []) (Assign "y" (Const 0)),Assign "y" (Const (-15)),While (Uminus (Var "y")) (Seq []),Assign "a" (Var "x"),Assign "b" (Const 1),Assign "z" (Const (-2))]
 was printed as
*******************
{ if - ( 0 ) then y = b else { } ; if 1 <= y / 1 then { } else y = 0 ; y = -15 ; while - y do { } ; a = x ; b = 1 ; z = -2 }

*******************
but expected
*******************
{
  if - ( 0 ) then
    y = b
  else { } ;
  if 1 <= y / 1 then { } else
    y = 0 ;
  y = -15 ;
  while - y do { } ;
  a = x ;
  b = 1 ;
  z = -2
}

*******************

AST
Seq [While (Binop Less (Var "y") (Binop LessEq (Var "x") (Const 1))) (If (Binop Less (Binop And (Binop Equal (Const 0) (Var "a")) (Binop Times (Uminus (Uminus (Var "y"))) (Binop Minus (Uminus (Var "b")) (Binop Equal (Var "b") (Var "x"))))) (Var "b")) (Assign "a" (Const 1)) (Assign "b" (Uminus (Binop And (Const 8) (Binop And (Uminus (Binop Equal (Var "b") (Var "z"))) (Uminus (Const 0))))))),Assign "z" (Var "y"),While (Binop Less (Binop LessEq (Const 1) (Const 0)) (Uminus (Var "a"))) (Seq []),If (Const 1) (Seq []) (Assign "b" (Binop LessEq (Const 1) (Var "y"))),If (Var "a") (While (Const 1) (Seq [])) (Assign "b" (Binop Or (Binop Minus (Const 1) (Const 1)) (Binop Minus (Const (-30)) (Var "y")))),Assign "a" (Var "x"),Assign "y" (Var "a"),If (Const 1) (Seq []) (If (Var "x") (Seq []) (Seq [])),While (Var "y") (Assign "b" (Binop Div (Uminus (Var "b")) (Binop Times (Const 1) (Binop Equal (Binop LessEq (Const 1) (Var "a")) (Const 0))))),Assign "y" (Const 21),While (Var "y") (While (Binop LessEq (Var "a") (Uminus (Const 1))) (Assign "x" (Binop Or (Const 0) (Uminus (Binop Minus (Var "b") (Const 1)))))),Assign "a" (Uminus (Binop Plus (Binop And (Var "b") (Binop Less (Const (-22)) (Binop Plus (Var "a") (Var "b")))) (Binop And (Binop Times (Var "a") (Binop Div (Const 1) (Const 1))) (Binop Plus (Var "b") (Const (-30)))))),Assign "y" (Uminus (Const 0)),Assign "x" (Var "x"),If (Var "y") (Seq []) (Assign "b" (Var "z")),Assign "y" (Const 10),Assign "x" (Const 30),Assign "a" (Binop Times (Const 8) (Var "x"))]
 was printed as
*******************
{ while y < ( x <= 1 ) do if ( 0 == a && - ( - y ) * ( - b - ( b == x ) ) ) < b then a = 1 else b = - ( 8 && ( - ( b == z ) && - ( 0 ) ) ) ; z = y ; while 1 <= 0 < - a do { } ; if 1 then { } else b = 1 <= y ; if a then while 1 do { } else b = 1 -1 || -30 - y ; a = x ; y = a ; if 1 then { } else if x then { } else { } ; while y do b = - b / ( 1 * ( 1 <= a == 0 ) ) ; y = 21 ; while y do while a <= - ( 1 ) do x = 0 || - ( b -1 ) ; a = - ( ( b && -22 < a + b ) + ( a * ( 1 / 1 ) && b + -30 ) ) ; y = - ( 0 ) ; x = x ; if y then { } else b = z ; y = 10 ; x = 30 ; a = 8 * x }

*******************
but expected
*******************
{
  while y < ( x <= 1 ) do
    if ( 0 == a && - ( - y ) * ( - b - ( b == x ) ) ) < b then
      a = 1
    else
      b = - ( 8 && ( - ( b == z ) && - ( 0 ) ) ) ;
  z = y ;
  while 1 <= 0 < - a do { } ;
  if 1 then { } else
    b = 1 <= y ;
  if a then
    while 1 do { }
  else
    b = 1 -1 || -30 - y ;
  a = x ;
  y = a ;
  if 1 then { } else if x then { } else { } ;
  while y do
    b = - b / ( 1 * ( 1 <= a == 0 ) ) ;
  y = 21 ;
  while y do
    while a <= - ( 1 ) do
      x = 0 || - ( b -1 ) ;
  a = - ( ( b && -22 < a + b ) + ( a * ( 1 / 1 ) && b + -30 ) ) ;
  y = - ( 0 ) ;
  x = x ;
  if y then { } else
    b = z ;
  y = 10 ;
  x = 30 ;
  a = 8 * x
}

*******************

AST
Seq [Assign "b" (Uminus (Uminus (Const 0))),Assign "b" (Var "b"),Assign "b" (Const (-8)),While (Var "z") (Seq []),Assign "y" (Uminus (Binop Div (Var "x") (Var "x"))),Assign "z" (Uminus (Var "x")),Assign "z" (Uminus (Binop Or (Var "y") (Binop And (Const 0) (Binop And (Var "a") (Const 1))))),If (Var "a") (Seq []) (While (Binop Plus (Const 0) (Const 0)) (Seq [])),Assign "y" (Const 25),While (Const (-23)) (Assign "y" (Binop Less (Var "b") (Var "a"))),While (Binop Minus (Uminus (Var "x")) (Var "z")) (Assign "x" (Uminus (Var "z"))),Assign "a" (Const 1),If (Uminus (Const (-6))) (Seq [Assign "z" (Uminus (Const 0))]) (Assign "a" (Binop Minus (Binop LessEq (Const 18) (Var "y")) (Binop Plus (Binop And (Var "x") (Var "z")) (Uminus (Const 11))))),Assign "z" (Const 30),Assign "b" (Var "x"),Assign "z" (Const 0),Assign "b" (Var "z")]
 was printed as
*******************
{ b = - ( - ( 0 ) ) ; b = b ; b = -8 ; while z do { } ; y = - ( x / x ) ; z = - x ; z = - ( y || 0 && ( a && 1 ) ) ; if a then { } else while 0 + 0 do { } ; y = 25 ; while -23 do y = b < a ; while - x - z do x = - z ; a = 1 ; if - ( -6 ) then { z = - ( 0 ) } else a = ( 18 <= y ) - ( ( x && z ) + - ( 11 ) ) ; z = 30 ; b = x ; z = 0 ; b = z }

*******************
but expected
*******************
{
  b = - ( - ( 0 ) ) ;
  b = b ;
  b = -8 ;
  while z do { } ;
  y = - ( x / x ) ;
  z = - x ;
  z = - ( y || 0 && ( a && 1 ) ) ;
  if a then { } else
    while 0 + 0 do { } ;
  y = 25 ;
  while -23 do
    y = b < a ;
  while - x - z do
    x = - z ;
  a = 1 ;
  if - ( -6 ) then {
    z = - ( 0 )
  } else
    a = ( 18 <= y ) - ( ( x && z ) + - ( 11 ) ) ;
  z = 30 ;
  b = x ;
  z = 0 ;
  b = z
}

*******************

AST
Seq [Assign "x" (Binop Times (Binop Less (Var "x") (Var "b")) (Const 1)),Assign "z" (Var "b"),Assign "b" (Uminus (Binop Plus (Var "a") (Uminus (Binop Minus (Binop And (Const (-9)) (Const 0)) (Binop Times (Var "y") (Const 1)))))),Assign "b" (Const 26),Assign "x" (Binop And (Binop Equal (Binop Equal (Var "x") (Const (-20))) (Uminus (Binop Plus (Var "b") (Const 0)))) (Const 1)),Assign "y" (Var "z"),Assign "a" (Const 0),Assign "x" (Var "y"),If (Binop Less (Var "x") (Var "y")) (Assign "b" (Binop Or (Const 0) (Binop And (Const 24) (Var "b")))) (Assign "a" (Const 20)),Assign "a" (Binop Less (Binop Times (Const 13) (Const 1)) (Const 7)),If (Binop Plus (Binop Times (Var "y") (Const 18)) (Const 0)) (If (Const 1) (Seq []) (Assign "b" (Var "z"))) (Assign "y" (Const (-24))),Assign "y" (Var "a"),Assign "z" (Var "y"),Assign "a" (Var "b"),Assign "x" (Var "a"),While (Binop Div (Uminus (Binop Less (Uminus (Var "y")) (Var "a"))) (Var "x")) (Assign "y" (Var "b")),Assign "z" (Const 3),Assign "x" (Binop Less (Uminus (Binop Div (Const 1) (Binop Or (Binop Plus (Const 5) (Const 1)) (Var "z")))) (Const 29)),Assign "z" (Const (-29)),Assign "x" (Const (-19)),Assign "b" (Binop Equal (Binop Times (Const 0) (Binop LessEq (Uminus (Const 28)) (Var "x"))) (Binop Div (Var "b") (Const 16))),If (Binop Times (Binop Equal (Binop Less (Const 1) (Var "z")) (Const 1)) (Const 1)) (Assign "z" (Var "y")) (Assign "x" (Var "b"))]
 was printed as
*******************
{ x = ( x < b ) * 1 ; z = b ; b = - ( a + - ( ( -9 && 0 ) - y * 1 ) ) ; b = 26 ; x = x == -20 == - ( b + 0 ) && 1 ; y = z ; a = 0 ; x = y ; if x < y then b = 0 || 24 && b else a = 20 ; a = 13 * 1 < 7 ; if y * 18 + 0 then if 1 then { } else b = z else y = -24 ; y = a ; z = y ; a = b ; x = a ; while - ( - y < a ) / x do y = b ; z = 3 ; x = - ( 1 / ( 5 + 1 || z ) ) < 29 ; z = -29 ; x = -19 ; b = 0 * ( - ( 28 ) <= x ) == b / 16 ; if ( 1 < z == 1 ) * 1 then z = y else x = b }

*******************
but expected
*******************
{
  x = ( x < b ) * 1 ;
  z = b ;
  b = - ( a + - ( ( -9 && 0 ) - y * 1 ) ) ;
  b = 26 ;
  x = x == -20 == - ( b + 0 ) && 1 ;
  y = z ;
  a = 0 ;
  x = y ;
  if x < y then
    b = 0 || 24 && b
  else
    a = 20 ;
  a = 13 * 1 < 7 ;
  if y * 18 + 0 then
    if 1 then { } else
      b = z
  else
    y = -24 ;
  y = a ;
  z = y ;
  a = b ;
  x = a ;
  while - ( - y < a ) / x do
    y = b ;
  z = 3 ;
  x = - ( 1 / ( 5 + 1 || z ) ) < 29 ;
  z = -29 ;
  x = -19 ;
  b = 0 * ( - ( 28 ) <= x ) == b / 16 ;
  if ( 1 < z == 1 ) * 1 then
    z = y
  else
    x = b
}

*******************

AST
Seq [If (Const 1) (While (Const 0) (Assign "y" (Binop Times (Const 23) (Binop Plus (Var "b") (Binop Times (Const 1) (Var "y")))))) (Seq []),While (Const 1) (Seq [While (Var "z") (Assign "z" (Const 1))]),Assign "y" (Const 0),Assign "z" (Uminus (Const 0))]
 was printed as
*******************
{ if 1 then while 0 do y = 23 * ( b + 1 * y ) else { } ; while 1 do { while z do z = 1 } ; y = 0 ; z = - ( 0 ) }

*******************
but expected
*******************
{
  if 1 then
    while 0 do
      y = 23 * ( b + 1 * y )
  else { } ;
  while 1 do {
    while z do
      z = 1
  } ;
  y = 0 ;
  z = - ( 0 )
}

*******************

AST
If (Const 1) (Assign "x" (Const 0)) (If (Var "x") (While (Binop And (Const (-12)) (Binop Equal (Const (-9)) (Const 0))) (If (Binop Less (Uminus (Uminus (Var "a"))) (Binop And (Uminus (Uminus (Binop Minus (Var "y") (Const 0)))) (Var "b"))) (Assign "z" (Const (-25))) (Assign "b" (Uminus (Binop Equal (Var "a") (Const 0)))))) (Seq []))
 was printed as
*******************
if 1 then x = 0 else if x then while -12 && -9 == 0 do if - ( - a ) < ( - ( - ( y -0 ) ) && b ) then z = -25 else b = - ( a == 0 ) else { }

*******************
but expected
*******************
if 1 then
  x = 0
else if x then
  while -12 && -9 == 0 do
    if - ( - a ) < ( - ( - ( y -0 ) ) && b ) then
      z = -25
    else
      b = - ( a == 0 )
else { }

*******************

AST
Seq [Assign "y" (Binop And (Binop Times (Const 1) (Const (-9))) (Const (-27))),If (Binop Plus (Var "a") (Const (-19))) (If (Binop Div (Uminus (Uminus (Const 0))) (Const 11)) (Assign "x" (Binop Equal (Uminus (Uminus (Binop Plus (Var "b") (Var "x")))) (Binop LessEq (Const 1) (Const 20)))) (Assign "a" (Uminus (Binop Times (Const 0) (Var "b"))))) (Assign "b" (Const 0)),Assign "a" (Uminus (Binop Equal (Var "a") (Var "x"))),Assign "y" (Var "z"),Assign "x" (Uminus (Var "a")),Assign "y" (Const 0),Assign "y" (Uminus (Var "x")),While (Const 1) (Seq [Assign "y" (Binop Less (Binop LessEq (Var "y") (Uminus (Var "a"))) (Const 0))]),Assign "b" (Binop Plus (Const 0) (Uminus (Uminus (Var "a")))),Assign "b" (Binop Div (Var "b") (Var "z")),Assign "a" (Binop Plus (Const 1) (Binop Times (Var "y") (Const 0))),While (Binop Plus (Binop Equal (Var "x") (Binop Times (Uminus (Var "x")) (Const 1))) (Var "x")) (Seq []),Assign "z" (Uminus (Uminus (Const 1))),If (Const 0) (Seq []) (Seq []),Assign "y" (Const 6),Assign "b" (Binop Plus (Var "a") (Var "y")),Assign "z" (Binop Times (Binop Equal (Uminus (Binop Minus (Uminus (Const 0)) (Const 1))) (Var "x")) (Binop Equal (Var "b") (Const 0))),While (Var "y") (Assign "y" (Const 0))]
 was printed as
*******************
{ y = 1 * -9 && -27 ; if a + -19 then if - ( - ( 0 ) ) / 11 then x = - ( - ( b + x ) ) == ( 1 <= 20 ) else a = - ( 0 * b ) else b = 0 ; a = - ( a == x ) ; y = z ; x = - a ; y = 0 ; y = - x ; while 1 do { y = y <= - a < 0 } ; b = 0 + - ( - a ) ; b = b / z ; a = 1 + y * 0 ; while ( x == - x * 1 ) + x do { } ; z = - ( - ( 1 ) ) ; if 0 then { } else { } ; y = 6 ; b = a + y ; z = ( - ( - ( 0 ) -1 ) == x ) * ( b == 0 ) ; while y do y = 0 }

*******************
but expected
*******************
{
  y = 1 * -9 && -27 ;
  if a + -19 then
    if - ( - ( 0 ) ) / 11 then
      x = - ( - ( b + x ) ) == ( 1 <= 20 )
    else
      a = - ( 0 * b )
  else
    b = 0 ;
  a = - ( a == x ) ;
  y = z ;
  x = - a ;
  y = 0 ;
  y = - x ;
  while 1 do {
    y = y <= - a < 0
  } ;
  b = 0 + - ( - a ) ;
  b = b / z ;
  a = 1 + y * 0 ;
  while ( x == - x * 1 ) + x do { } ;
  z = - ( - ( 1 ) ) ;
  if 0 then { } else { } ;
  y = 6 ;
  b = a + y ;
  z = ( - ( - ( 0 ) -1 ) == x ) * ( b == 0 ) ;
  while y do
    y = 0
}

*******************

AST
Seq [Assign "z" (Binop And (Uminus (Binop Div (Const 1) (Binop LessEq (Const 1) (Const 1)))) (Var "b")),Assign "x" (Const 1),If (Binop Minus (Const 0) (Const 1)) (If (Uminus (Const 1)) (If (Binop Minus (Var "a") (Binop Times (Const 0) (Binop Div (Var "y") (Binop Div (Binop Plus (Var "z") (Var "b")) (Const 30))))) (Seq []) (Seq [])) (If (Var "z") (Seq []) (Seq []))) (Assign "b" (Binop LessEq (Const 0) (Uminus (Var "x")))),If (Binop And (Const 24) (Var "a")) (Assign "a" (Const 0)) (Seq [Assign "b" (Var "x"),While (Binop LessEq (Var "x") (Var "y")) (Assign "z" (Var "y"))]),If (Const (-8)) (If (Const 7) (Seq []) (Seq [])) (Assign "x" (Var "x")),While (Var "y") (If (Var "b") (Assign "a" (Var "b")) (Seq [])),Assign "z" (Binop And (Uminus (Var "a")) (Binop Minus (Const 1) (Binop Or (Const 0) (Binop And (Binop And (Var "y") (Var "x")) (Const 1))))),Assign "b" (Uminus (Const 0)),While (Var "b") (Assign "x" (Const 5)),If (Const 1) (Assign "b" (Const 1)) (If (Const 1) (If (Var "z") (Seq []) (Seq [])) (Assign "b" (Binop And (Var "x") (Const (-7))))),Assign "x" (Const 0),If (Var "y") (Assign "z" (Const 1)) (If (Binop Less (Const 1) (Var "z")) (Assign "z" (Var "y")) (If (Const (-22)) (Assign "z" (Const (-28))) (Assign "z" (Const 1)))),Assign "x" (Binop Equal (Binop LessEq (Binop Less (Var "y") (Var "y")) (Const 1)) (Var "a")),Assign "z" (Binop Minus (Var "y") (Binop Times (Uminus (Const 0)) (Const 0))),If (Binop Or (Const (-7)) (Var "x")) (Assign "a" (Uminus (Var "z"))) (If (Binop Minus (Const 1) (Uminus (Var "b"))) (Assign "x" (Binop Div (Binop Times (Var "a") (Const (-7))) (Uminus (Uminus (Binop Plus (Binop Plus (Const 0) (Var "z")) (Binop Less (Var "b") (Const (-2)))))))) (While (Var "z") (Seq []))),Assign "b" (Var "y"),Assign "b" (Const 1),Assign "b" (Binop Equal (Const 0) (Uminus (Var "a"))),Assign "x" (Var "y"),If (Var "y") (Assign "z" (Var "y")) (Seq [If (Var "x") (Seq []) (Seq []),If (Uminus (Const 7)) (Seq []) (Seq [])]),Assign "x" (Binop Plus (Const 4) (Var "x"))]
 was printed as
*******************
{ z = - ( 1 / ( 1 <= 1 ) ) && b ; x = 1 ; if 0 -1 then if - ( 1 ) then if a -0 * ( y / ( ( z + b ) / 30 ) ) then { } else { } else if z then { } else { } else b = 0 <= - x ; if 24 && a then a = 0 else { b = x ; while x <= y do z = y } ; if -8 then if 7 then { } else { } else x = x ; while y do if b then a = b else { } ; z = - a && 1 - ( 0 || y && x && 1 ) ; b = - ( 0 ) ; while b do x = 5 ; if 1 then b = 1 else if 1 then if z then { } else { } else b = x && -7 ; x = 0 ; if y then z = 1 else if 1 < z then z = y else if -22 then z = -28 else z = 1 ; x = y < y <= 1 == a ; z = y - - ( 0 ) * 0 ; if -7 || x then a = - z else if 1 - - b then x = a * -7 / - ( - ( 0 + z + ( b < -2 ) ) ) else while z do { } ; b = y ; b = 1 ; b = 0 == - a ; x = y ; if y then z = y else { if x then { } else { } ; if - ( 7 ) then { } else { } } ; x = 4 + x }

*******************
but expected
*******************
{
  z = - ( 1 / ( 1 <= 1 ) ) && b ;
  x = 1 ;
  if 0 -1 then
    if - ( 1 ) then
      if a -0 * ( y / ( ( z + b ) / 30 ) ) then { } else { }
    else if z then { } else { }
  else
    b = 0 <= - x ;
  if 24 && a then
    a = 0
  else {
    b = x ;
    while x <= y do
      z = y
  } ;
  if -8 then
    if 7 then { } else { }
  else
    x = x ;
  while y do
    if b then
      a = b
    else { } ;
  z = - a && 1 - ( 0 || y && x && 1 ) ;
  b = - ( 0 ) ;
  while b do
    x = 5 ;
  if 1 then
    b = 1
  else if 1 then
    if z then { } else { }
  else
    b = x && -7 ;
  x = 0 ;
  if y then
    z = 1
  else if 1 < z then
    z = y
  else if -22 then
    z = -28
  else
    z = 1 ;
  x = y < y <= 1 == a ;
  z = y - - ( 0 ) * 0 ;
  if -7 || x then
    a = - z
  else if 1 - - b then
    x = a * -7 / - ( - ( 0 + z + ( b < -2 ) ) )
  else
    while z do { } ;
  b = y ;
  b = 1 ;
  b = 0 == - a ;
  x = y ;
  if y then
    z = y
  else {
    if x then { } else { } ;
    if - ( 7 ) then { } else { }
  } ;
  x = 4 + x
}

*******************

AST
If (Const 3) (Seq [While (Binop Minus (Const 1) (Binop Equal (Binop Div (Const 0) (Const 9)) (Uminus (Binop Or (Const 1) (Const (-22)))))) (Assign "y" (Const 0)),Assign "y" (Binop Plus (Binop Times (Var "z") (Binop Minus (Binop Times (Var "y") (Binop Times (Var "z") (Const 0))) (Binop Less (Const 1) (Binop LessEq (Var "b") (Var "y"))))) (Const 16)),Assign "z" (Var "a"),If (Uminus (Binop Or (Var "a") (Binop LessEq (Binop And (Var "x") (Binop Equal (Const 0) (Var "y"))) (Uminus (Binop Minus (Const 1) (Const 22)))))) (If (Var "a") (Seq []) (Seq [])) (If (Const 0) (Seq []) (Assign "y" (Const 3)))]) (Assign "y" (Binop Less (Uminus (Var "z")) (Const 22)))
 was printed as
*******************
if 3 then { while 1 - ( 0 / 9 == - ( 1 || -22 ) ) do y = 0 ; y = z * ( y * ( z * 0 ) - ( 1 < ( b <= y ) ) ) + 16 ; z = a ; if - ( a || ( x && 0 == y ) <= - ( 1 -22 ) ) then if a then { } else { } else if 0 then { } else y = 3 } else y = - z < 22

*******************
but expected
*******************
if 3 then {
  while 1 - ( 0 / 9 == - ( 1 || -22 ) ) do
    y = 0 ;
  y = z * ( y * ( z * 0 ) - ( 1 < ( b <= y ) ) ) + 16 ;
  z = a ;
  if - ( a || ( x && 0 == y ) <= - ( 1 -22 ) ) then
    if a then { } else { }
  else if 0 then { } else
    y = 3
} else
  y = - z < 22

*******************

AST
If (Const 0) (Seq [Assign "z" (Const 2),Assign "a" (Const 1),Assign "a" (Const 1),Assign "y" (Const 0),Assign "x" (Binop LessEq (Var "b") (Const 0))]) (Seq [If (Var "y") (Assign "y" (Binop Times (Binop Minus (Const 0) (Binop Minus (Const 1) (Binop Times (Binop Minus (Const 1) (Const 1)) (Const 1)))) (Binop Equal (Const (-26)) (Binop Or (Const 1) (Uminus (Uminus (Var "a"))))))) (Seq []),Assign "a" (Const 1),Assign "x" (Uminus (Var "y")),Assign "y" (Uminus (Const 1)),While (Uminus (Const 1)) (Assign "z" (Const 1)),If (Var "z") (Assign "z" (Var "a")) (Assign "a" (Var "y"))])
 was printed as
*******************
if 0 then { z = 2 ; a = 1 ; a = 1 ; y = 0 ; x = b <= 0 } else { if y then y = ( 0 - ( 1 - ( 1 -1 ) * 1 ) ) * ( -26 == ( 1 || - ( - a ) ) ) else { } ; a = 1 ; x = - y ; y = - ( 1 ) ; while - ( 1 ) do z = 1 ; if z then z = a else a = y }

*******************
but expected
*******************
if 0 then {
  z = 2 ;
  a = 1 ;
  a = 1 ;
  y = 0 ;
  x = b <= 0
} else {
  if y then
    y = ( 0 - ( 1 - ( 1 -1 ) * 1 ) ) * ( -26 == ( 1 || - ( - a ) ) )
  else { } ;
  a = 1 ;
  x = - y ;
  y = - ( 1 ) ;
  while - ( 1 ) do
    z = 1 ;
  if z then
    z = a
  else
    a = y
}

*******************

AST
While (Var "x") (If (Binop Or (Var "z") (Const 1)) (Assign "z" (Const 0)) (Seq []))
 was printed as
*******************
while x do if z || 1 then z = 0 else { }

*******************
but expected
*******************
while x do
  if z || 1 then
    z = 0
  else { }

*******************

AST
If (Uminus (Uminus (Var "x"))) (Seq [If (Uminus (Var "z")) (Assign "z" (Const 0)) (Assign "y" (Uminus (Var "y"))),If (Const 0) (Seq []) (While (Const 1) (If (Binop Plus (Const (-28)) (Binop Minus (Const 0) (Var "y"))) (Seq []) (Seq []))),Assign "x" (Var "a"),While (Binop Less (Var "y") (Binop Minus (Const 1) (Binop LessEq (Binop LessEq (Var "a") (Var "y")) (Uminus (Binop Plus (Var "b") (Const 1)))))) (Seq [If (Binop Minus (Var "b") (Var "x")) (Seq []) (Seq [])]),Assign "z" (Const (-7)),Assign "a" (Uminus (Const (-27)))]) (If (Uminus (Binop Times (Uminus (Var "a")) (Binop Less (Const 0) (Var "b")))) (If (Uminus (Uminus (Var "y"))) (Seq []) (Assign "y" (Binop And (Const 1) (Binop Plus (Var "z") (Var "y"))))) (Assign "b" (Uminus (Uminus (Binop And (Binop And (Var "x") (Uminus (Const 0))) (Binop Plus (Const 1) (Var "x")))))))
 was printed as
*******************
if - ( - x ) then { if - z then z = 0 else y = - y ; if 0 then { } else while 1 do if -28 + ( 0 - y ) then { } else { } ; x = a ; while y < 1 - ( a <= y <= - ( b + 1 ) ) do { if b - x then { } else { } } ; z = -7 ; a = - ( -27 ) } else if - ( - a * ( 0 < b ) ) then if - ( - y ) then { } else y = 1 && z + y else b = - ( - ( x && - ( 0 ) && 1 + x ) )

*******************
but expected
*******************
if - ( - x ) then {
  if - z then
    z = 0
  else
    y = - y ;
  if 0 then { } else
    while 1 do
      if -28 + ( 0 - y ) then { } else { } ;
  x = a ;
  while y < 1 - ( a <= y <= - ( b + 1 ) ) do {
    if b - x then { } else { }
  } ;
  z = -7 ;
  a = - ( -27 )
} else if - ( - a * ( 0 < b ) ) then
  if - ( - y ) then { } else
    y = 1 && z + y
else
  b = - ( - ( x && - ( 0 ) && 1 + x ) )

*******************

AST
Seq [If (Binop Or (Var "z") (Const 0)) (Assign "b" (Binop Minus (Uminus (Var "y")) (Binop Minus (Binop Times (Var "b") (Binop Times (Const (-8)) (Binop LessEq (Const (-19)) (Var "x")))) (Binop Div (Const 0) (Uminus (Const 1)))))) (Seq [Assign "y" (Binop Div (Const 1) (Var "a"))]),Assign "x" (Const 0),While (Const (-17)) (Seq []),Assign "z" (Const (-12)),If (Var "b") (Seq [Assign "a" (Const 1),While (Var "y") (If (Var "x") (Seq []) (Seq []))]) (If (Uminus (Uminus (Binop Plus (Var "b") (Binop Times (Binop Less (Const 1) (Var "x")) (Const 1))))) (While (Const 1) (Assign "x" (Binop Equal (Var "a") (Const 4)))) (Assign "x" (Var "x"))),If (Binop Less (Var "y") (Binop Times (Binop Plus (Uminus (Const 0)) (Var "z")) (Const 6))) (Assign "b" (Const 10)) (Seq [Assign "y" (Const (-14))]),Assign "b" (Var "x"),If (Var "b") (While (Const 0) (Seq [Assign "b" (Const 5)])) (If (Var "z") (Assign "a" (Binop Plus (Binop And (Binop Equal (Var "y") (Const 1)) (Const 1)) (Binop Or (Uminus (Var "a")) (Const (-7))))) (Assign "b" (Var "y"))),Assign "b" (Binop And (Binop Minus (Binop Plus (Uminus (Const 1)) (Uminus (Var "a"))) (Const 0)) (Binop Or (Const 3) (Uminus (Uminus (Binop And (Var "z") (Const 0)))))),While (Var "b") (Assign "b" (Const 0)),Assign "x" (Uminus (Binop Less (Var "a") (Const 0))),While (Var "a") (Seq []),Assign "b" (Binop LessEq (Var "x") (Var "b")),Assign "b" (Const 1),Assign "a" (Const 1),Assign "a" (Var "a"),Assign "y" (Var "y"),Assign "z" (Const 15),Assign "z" (Binop Times (Binop Div (Uminus (Var "z")) (Var "x")) (Uminus (Var "b"))),While (Uminus (Var "b")) (Seq [Assign "z" (Uminus (Uminus (Const 0)))]),Assign "z" (Var "z"),Assign "y" (Uminus (Binop Less (Uminus (Var "a")) (Const 1))),Assign "x" (Var "b"),Assign "y" (Binop Or (Const 1) (Var "y")),Assign "a" (Var "b"),Assign "z" (Var "y"),Assign "z" (Var "b"),Assign "x" (Binop And (Const 0) (Binop And (Const 1) (Binop Minus (Var "y") (Var "y")))),If (Var "z") (Seq [Assign "y" (Const (-18)),Assign "b" (Binop Times (Uminus (Var "x")) (Var "x"))]) (If (Const (-18)) (While (Var "x") (Assign "z" (Var "x"))) (Assign "a" (Var "b"))),Assign "b" (Binop Times (Binop Plus (Uminus (Uminus (Const 28))) (Var "z")) (Binop LessEq (Var "y") (Var "b")))]
 was printed as
*******************
{ if z || 0 then b = - y - ( b * ( -8 * ( -19 <= x ) ) -0 / - ( 1 ) ) else { y = 1 / a } ; x = 0 ; while -17 do { } ; z = -12 ; if b then { a = 1 ; while y do if x then { } else { } } else if - ( - ( b + ( 1 < x ) * 1 ) ) then while 1 do x = a == 4 else x = x ; if y < ( - ( 0 ) + z ) * 6 then b = 10 else { y = -14 } ; b = x ; if b then while 0 do { b = 5 } else if z then a = ( y == 1 && 1 ) + ( - a || -7 ) else b = y ; b = - ( 1 ) + - a -0 && ( 3 || - ( - ( z && 0 ) ) ) ; while b do b = 0 ; x = - ( a < 0 ) ; while a do { } ; b = x <= b ; b = 1 ; a = 1 ; a = a ; y = y ; z = 15 ; z = - z / x * - b ; while - b do { z = - ( - ( 0 ) ) } ; z = z ; y = - ( - a < 1 ) ; x = b ; y = 1 || y ; a = b ; z = y ; z = b ; x = 0 && ( 1 && y - y ) ; if z then { y = -18 ; b = - x * x } else if -18 then while x do z = x else a = b ; b = ( - ( - ( 28 ) ) + z ) * ( y <= b ) }

*******************
but expected
*******************
{
  if z || 0 then
    b = - y - ( b * ( -8 * ( -19 <= x ) ) -0 / - ( 1 ) )
  else {
    y = 1 / a
  } ;
  x = 0 ;
  while -17 do { } ;
  z = -12 ;
  if b then {
    a = 1 ;
    while y do
      if x then { } else { }
  } else if - ( - ( b + ( 1 < x ) * 1 ) ) then
    while 1 do
      x = a == 4
  else
    x = x ;
  if y < ( - ( 0 ) + z ) * 6 then
    b = 10
  else {
    y = -14
  } ;
  b = x ;
  if b then
    while 0 do {
      b = 5
    }
  else if z then
    a = ( y == 1 && 1 ) + ( - a || -7 )
  else
    b = y ;
  b = - ( 1 ) + - a -0 && ( 3 || - ( - ( z && 0 ) ) ) ;
  while b do
    b = 0 ;
  x = - ( a < 0 ) ;
  while a do { } ;
  b = x <= b ;
  b = 1 ;
  a = 1 ;
  a = a ;
  y = y ;
  z = 15 ;
  z = - z / x * - b ;
  while - b do {
    z = - ( - ( 0 ) )
  } ;
  z = z ;
  y = - ( - a < 1 ) ;
  x = b ;
  y = 1 || y ;
  a = b ;
  z = y ;
  z = b ;
  x = 0 && ( 1 && y - y ) ;
  if z then {
    y = -18 ;
    b = - x * x
  } else if -18 then
    while x do
      z = x
  else
    a = b ;
  b = ( - ( - ( 28 ) ) + z ) * ( y <= b )
}

*******************

AST
If (Const (-28)) (If (Var "x") (If (Const 12) (Assign "a" (Var "y")) (Assign "x" (Const 1))) (Assign "b" (Binop Plus (Const 0) (Binop Plus (Const (-3)) (Var "z"))))) (Assign "z" (Const 1))
 was printed as
*******************
if -28 then if x then if 12 then a = y else x = 1 else b = 0 + ( -3 + z ) else z = 1

*******************
but expected
*******************
if -28 then
  if x then
    if 12 then
      a = y
    else
      x = 1
  else
    b = 0 + ( -3 + z )
else
  z = 1

*******************

AST
If (Var "y") (Assign "y" (Binop Minus (Var "y") (Const 0))) (Assign "a" (Binop Times (Const 0) (Var "x")))
 was printed as
*******************
if y then y = y -0 else a = 0 * x

*******************
but expected
*******************
if y then
  y = y -0
else
  a = 0 * x

*******************

AST
While (Const 14) (Assign "y" (Binop Minus (Binop Minus (Var "b") (Uminus (Binop Div (Const 0) (Uminus (Var "a"))))) (Binop And (Uminus (Const 0)) (Uminus (Const 0)))))
 was printed as
*******************
while 14 do y = b - - ( 0 / - a ) - ( - ( 0 ) && - ( 0 ) )

*******************
but expected
*******************
while 14 do
  y = b - - ( 0 / - a ) - ( - ( 0 ) && - ( 0 ) )

*******************

AST
Seq [Assign "a" (Const 1),Assign "y" (Var "a"),Assign "x" (Var "y"),Assign "z" (Const 1),If (Const (-28)) (If (Var "z") (Assign "y" (Const 24)) (While (Const 0) (Assign "y" (Uminus (Uminus (Const 0)))))) (Assign "y" (Binop And (Binop Equal (Var "x") (Var "a")) (Const 0))),If (Binop Div (Var "x") (Const 1)) (Seq []) (Assign "y" (Const (-5)))]
 was printed as
*******************
{ a = 1 ; y = a ; x = y ; z = 1 ; if -28 then if z then y = 24 else while 0 do y = - ( - ( 0 ) ) else y = x == a && 0 ; if x / 1 then { } else y = -5 }

*******************
but expected
*******************
{
  a = 1 ;
  y = a ;
  x = y ;
  z = 1 ;
  if -28 then
    if z then
      y = 24
    else
      while 0 do
        y = - ( - ( 0 ) )
  else
    y = x == a && 0 ;
  if x / 1 then { } else
    y = -5
}

*******************

AST
While (Const 1) (Seq [If (Var "z") (While (Binop Div (Var "y") (Uminus (Binop Div (Binop Or (Uminus (Const 1)) (Var "y")) (Var "a")))) (If (Uminus (Var "b")) (Seq []) (Seq []))) (Assign "x" (Uminus (Binop Equal (Binop And (Var "b") (Var "b")) (Const 9))))])
 was printed as
*******************
while 1 do { if z then while y / - ( ( - ( 1 ) || y ) / a ) do if - b then { } else { } else x = - ( ( b && b ) == 9 ) }

*******************
but expected
*******************
while 1 do {
  if z then
    while y / - ( ( - ( 1 ) || y ) / a ) do
      if - b then { } else { }
  else
    x = - ( ( b && b ) == 9 )
}

*******************

AST
While (Binop Or (Var "a") (Var "x")) (Assign "a" (Binop Times (Uminus (Var "x")) (Var "b")))
 was printed as
*******************
while a || x do a = - x * b

*******************
but expected
*******************
while a || x do
  a = - x * b

*******************

AST
Seq [If (Const 5) (If (Binop Times (Var "x") (Uminus (Uminus (Var "a")))) (Assign "a" (Uminus (Binop Or (Const 0) (Binop Or (Const (-12)) (Const 0))))) (Assign "z" (Binop Minus (Const 11) (Var "b")))) (If (Var "a") (Assign "z" (Binop Or (Var "z") (Binop Less (Const 1) (Const 30)))) (Assign "z" (Var "z"))),If (Var "x") (Assign "y" (Var "x")) (Assign "y" (Var "b")),If (Binop Less (Binop Times (Var "b") (Const 8)) (Uminus (Binop LessEq (Const 1) (Var "b")))) (If (Var "y") (Assign "b" (Const 0)) (Assign "b" (Uminus (Var "b")))) (If (Const 0) (While (Var "x") (While (Binop Less (Binop Times (Binop Equal (Binop Or (Var "z") (Const 0)) (Binop Plus (Var "a") (Const 3))) (Var "z")) (Var "z")) (Seq []))) (Assign "b" (Var "a"))),Assign "b" (Uminus (Uminus (Var "x")))]
 was printed as
*******************
{ if 5 then if x * - ( - a ) then a = - ( 0 || ( -12 || 0 ) ) else z = 11 - b else if a then z = z || 1 < 30 else z = z ; if x then y = x else y = b ; if b * 8 < - ( 1 <= b ) then if y then b = 0 else b = - b else if 0 then while x do while ( ( z || 0 ) == a + 3 ) * z < z do { } else b = a ; b = - ( - x ) }

*******************
but expected
*******************
{
  if 5 then
    if x * - ( - a ) then
      a = - ( 0 || ( -12 || 0 ) )
    else
      z = 11 - b
  else if a then
    z = z || 1 < 30
  else
    z = z ;
  if x then
    y = x
  else
    y = b ;
  if b * 8 < - ( 1 <= b ) then
    if y then
      b = 0
    else
      b = - b
  else if 0 then
    while x do
      while ( ( z || 0 ) == a + 3 ) * z < z do { }
  else
    b = a ;
  b = - ( - x )
}

*******************

AST
Seq [If (Uminus (Binop Times (Var "y") (Uminus (Binop Minus (Binop LessEq (Const 0) (Const 0)) (Binop Equal (Var "a") (Const 1)))))) (If (Binop Plus (Binop Times (Binop Plus (Var "a") (Const 1)) (Binop Less (Uminus (Const 0)) (Const (-11)))) (Var "x")) (Assign "z" (Var "a")) (Seq [Assign "y" (Var "x")])) (Assign "x" (Binop Less (Binop Or (Var "z") (Binop Equal (Var "x") (Var "z"))) (Const 27))),Assign "z" (Binop And (Var "b") (Const 0)),Assign "a" (Var "z"),While (Binop Less (Uminus (Var "b")) (Uminus (Const 1))) (Seq []),Assign "x" (Binop Or (Binop LessEq (Binop And (Var "b") (Uminus (Binop LessEq (Var "x") (Var "a")))) (Uminus (Const 0))) (Var "z"))]
 was printed as
*******************
{ if - ( y * - ( ( 0 <= 0 ) - ( a == 1 ) ) ) then if ( a + 1 ) * ( - ( 0 ) < -11 ) + x then z = a else { y = x } else x = ( z || x == z ) < 27 ; z = b && 0 ; a = z ; while - b < - ( 1 ) do { } ; x = ( b && - ( x <= a ) ) <= - ( 0 ) || z }

*******************
but expected
*******************
{
  if - ( y * - ( ( 0 <= 0 ) - ( a == 1 ) ) ) then
    if ( a + 1 ) * ( - ( 0 ) < -11 ) + x then
      z = a
    else {
      y = x
    }
  else
    x = ( z || x == z ) < 27 ;
  z = b && 0 ;
  a = z ;
  while - b < - ( 1 ) do { } ;
  x = ( b && - ( x <= a ) ) <= - ( 0 ) || z
}

*******************

AST
Seq [If (Binop Less (Var "a") (Const 0)) (Assign "z" (Binop Or (Var "y") (Var "y"))) (Assign "b" (Const 0))]
 was printed as
*******************
{ if a < 0 then z = y || y else b = 0 }

*******************
but expected
*******************
{
  if a < 0 then
    z = y || y
  else
    b = 0
}

*******************

AST
Seq [Assign "y" (Const 0),Assign "b" (Var "z"),Assign "y" (Binop Div (Const 1) (Const 0))]
 was printed as
*******************
{ y = 0 ; b = z ; y = 1 / 0 }

*******************
but expected
*******************
{
  y = 0 ;
  b = z ;
  y = 1 / 0
}

*******************

AST
Seq [If (Binop Plus (Binop Minus (Const 18) (Uminus (Uminus (Binop Or (Const 2) (Var "y"))))) (Const 1)) (Assign "x" (Var "x")) (Assign "a" (Binop Plus (Binop Div (Uminus (Const 1)) (Var "b")) (Const (-7)))),Assign "b" (Const (-30)),Assign "b" (Var "y"),Assign "a" (Binop Div (Binop Times (Binop Div (Var "a") (Var "y")) (Binop And (Const 1) (Const 16))) (Binop Less (Var "z") (Binop And (Binop Or (Const (-25)) (Var "a")) (Binop Div (Const (-3)) (Const 11))))),If (Var "b") (Assign "y" (Var "b")) (Assign "b" (Const 0)),If (Binop Equal (Const 0) (Binop And (Var "a") (Var "y"))) (If (Uminus (Const 1)) (If (Var "z") (While (Const 0) (Seq [])) (Assign "y" (Binop Or (Var "z") (Binop Times (Var "x") (Var "a"))))) (Seq [Assign "b" (Uminus (Const 0))])) (While (Var "a") (Assign "y" (Const 0))),While (Const 0) (If (Binop Or (Var "x") (Binop LessEq (Const 1) (Const 0))) (Assign "y" (Binop Plus (Binop And (Var "y") (Const 1)) (Const 1))) (While (Uminus (Const (-22))) (Assign "x" (Binop Minus (Binop Minus (Binop LessEq (Uminus (Const 1)) (Const 1)) (Uminus (Binop Minus (Const 1) (Binop Div (Const 0) (Var "a"))))) (Var "z"))))),Assign "x" (Uminus (Var "b")),If (Binop LessEq (Const 3) (Var "b")) (While (Uminus (Binop Div (Const (-14)) (Binop Div (Var "b") (Const 1)))) (Seq [])) (Seq [While (Uminus (Uminus (Const 11))) (Seq [])]),If (Const 19) (Seq [If (Binop Or (Const 0) (Binop And (Const 1) (Var "z"))) (Seq []) (Seq [])]) (Seq []),Assign "z" (Var "x")]
 was printed as
*******************
{ if 18 - - ( - ( 2 || y ) ) + 1 then x = x else a = - ( 1 ) / b + -7 ; b = -30 ; b = y ; a = a / y * ( 1 && 16 ) / ( z < ( ( -25 || a ) && -3 / 11 ) ) ; if b then y = b else b = 0 ; if 0 == ( a && y ) then if - ( 1 ) then if z then while 0 do { } else y = z || x * a else { b = - ( 0 ) } else while a do y = 0 ; while 0 do if x || 1 <= 0 then y = ( y && 1 ) + 1 else while - ( -22 ) do x = ( - ( 1 ) <= 1 ) - - ( 1 -0 / a ) - z ; x = - b ; if 3 <= b then while - ( -14 / ( b / 1 ) ) do { } else { while - ( - ( 11 ) ) do { } } ; if 19 then { if 0 || 1 && z then { } else { } } else { } ; z = x }

*******************
but expected
*******************
{
  if 18 - - ( - ( 2 || y ) ) + 1 then
    x = x
  else
    a = - ( 1 ) / b + -7 ;
  b = -30 ;
  b = y ;
  a = a / y * ( 1 && 16 ) / ( z < ( ( -25 || a ) && -3 / 11 ) ) ;
  if b then
    y = b
  else
    b = 0 ;
  if 0 == ( a && y ) then
    if - ( 1 ) then
      if z then
        while 0 do { }
      else
        y = z || x * a
    else {
      b = - ( 0 )
    }
  else
    while a do
      y = 0 ;
  while 0 do
    if x || 1 <= 0 then
      y = ( y && 1 ) + 1
    else
      while - ( -22 ) do
        x = ( - ( 1 ) <= 1 ) - - ( 1 -0 / a ) - z ;
  x = - b ;
  if 3 <= b then
    while - ( -14 / ( b / 1 ) ) do { }
  else {
    while - ( - ( 11 ) ) do { }
  } ;
  if 19 then {
    if 0 || 1 && z then { } else { }
  } else { } ;
  z = x
}

*******************

AST
Seq [While (Binop Times (Const 0) (Var "z")) (Assign "z" (Binop Times (Const 1) (Var "x"))),If (Const 0) (Seq [Assign "x" (Var "y")]) (Assign "y" (Const (-9))),If (Binop Div (Binop Times (Const 0) (Binop LessEq (Binop And (Uminus (Var "x")) (Var "x")) (Var "x"))) (Binop Div (Binop Minus (Const 1) (Uminus (Var "y"))) (Uminus (Const 1)))) (Assign "a" (Binop Equal (Binop Equal (Const 1) (Const 1)) (Uminus (Var "x")))) (If (Var "a") (Seq []) (If (Var "z") (Seq []) (If (Binop Minus (Var "x") (Var "z")) (Seq []) (Seq [])))),Assign "z" (Var "x"),Assign "x" (Const (-12)),Assign "a" (Binop Times (Binop Div (Binop LessEq (Uminus (Const 11)) (Binop Minus (Binop Equal (Var "b") (Var "z")) (Binop And (Var "z") (Var "b")))) (Var "z")) (Binop Plus (Binop Times (Const 0) (Const 0)) (Var "x"))),Assign "b" (Const 1),Assign "x" (Binop Div (Const 0) (Var "x")),If (Var "b") (Assign "b" (Var "z")) (Assign "a" (Const 1)),Assign "y" (Var "a"),If (Var "x") (Assign "a" (Var "y")) (Assign "x" (Var "z")),Assign "b" (Binop And (Const 0) (Var "a")),While (Binop Minus (Binop Less (Binop Times (Const 0) (Binop Less (Var "x") (Const 0))) (Uminus (Binop Less (Var "z") (Binop Or (Var "b") (Var "z"))))) (Var "a")) (Seq [Assign "a" (Const (-20)),If (Var "z") (Seq []) (Seq [])]),While (Uminus (Var "b")) (Seq [While (Uminus (Var "b")) (Assign "b" (Var "b"))]),Assign "a" (Binop Times (Var "z") (Const 0)),Assign "z" (Var "a"),If (Var "b") (Assign "y" (Var "x")) (Seq [If (Const 1) (Assign "x" (Const 12)) (If (Var "b") (Seq []) (Seq [])),Assign "a" (Uminus (Var "y"))])]
 was printed as
*******************
{ while 0 * z do z = 1 * x ; if 0 then { x = y } else y = -9 ; if 0 * ( ( - x && x ) <= x ) / ( ( 1 - - y ) / - ( 1 ) ) then a = 1 == 1 == - x else if a then { } else if z then { } else if x - z then { } else { } ; z = x ; x = -12 ; a = ( - ( 11 ) <= ( b == z ) - ( z && b ) ) / z * ( 0 * 0 + x ) ; b = 1 ; x = 0 / x ; if b then b = z else a = 1 ; y = a ; if x then a = y else x = z ; b = 0 && a ; while ( 0 * ( x < 0 ) < - ( z < ( b || z ) ) ) - a do { a = -20 ; if z then { } else { } } ; while - b do { while - b do b = b } ; a = z * 0 ; z = a ; if b then y = x else { if 1 then x = 12 else if b then { } else { } ; a = - y } }

*******************
but expected
*******************
{
  while 0 * z do
    z = 1 * x ;
  if 0 then {
    x = y
  } else
    y = -9 ;
  if 0 * ( ( - x && x ) <= x ) / ( ( 1 - - y ) / - ( 1 ) ) then
    a = 1 == 1 == - x
  else if a then { } else if z then { } else if x - z then { } else { } ;
  z = x ;
  x = -12 ;
  a = ( - ( 11 ) <= ( b == z ) - ( z && b ) ) / z * ( 0 * 0 + x ) ;
  b = 1 ;
  x = 0 / x ;
  if b then
    b = z
  else
    a = 1 ;
  y = a ;
  if x then
    a = y
  else
    x = z ;
  b = 0 && a ;
  while ( 0 * ( x < 0 ) < - ( z < ( b || z ) ) ) - a do {
    a = -20 ;
    if z then { } else { }
  } ;
  while - b do {
    while - b do
      b = b
  } ;
  a = z * 0 ;
  z = a ;
  if b then
    y = x
  else {
    if 1 then
      x = 12
    else if b then { } else { } ;
    a = - y
  }
}

*******************

AST
Seq [Assign "z" (Binop Less (Binop Times (Const 1) (Uminus (Binop Div (Binop Plus (Var "x") (Const 0)) (Binop Minus (Var "y") (Var "b"))))) (Binop Minus (Var "b") (Binop Div (Binop And (Const 0) (Const 1)) (Const 1)))),Assign "a" (Uminus (Const 0)),Assign "b" (Binop Less (Var "x") (Const 9)),Assign "b" (Const 0),If (Var "y") (Assign "y" (Var "b")) (Assign "x" (Var "b")),Assign "a" (Var "y"),If (Binop Times (Const 0) (Binop Times (Uminus (Const 0)) (Binop Minus (Var "b") (Var "b")))) (If (Binop LessEq (Var "y") (Binop Or (Const 1) (Binop Plus (Binop LessEq (Uminus (Const 1)) (Binop Less (Const 1) (Var "a"))) (Const 1)))) (Assign "y" (Binop Less (Uminus (Uminus (Const 1))) (Const 16))) (While (Const 1) (Seq []))) (Seq [If (Var "b") (Seq []) (Seq [])]),While (Binop Minus (Const (-14)) (Var "x")) (If (Const 0) (Seq []) (Assign "b" (Uminus (Binop Less (Uminus (Binop LessEq (Var "b") (Binop Plus (Var "a") (Var "b")))) (Binop Less (Var "x") (Var "a")))))),Assign "x" (Binop Minus (Binop Less (Binop Equal (Uminus (Uminus (Var "z"))) (Binop And (Const 1) (Binop Plus (Const 0) (Const (-28))))) (Const (-9))) (Const 1))]
 was printed as
*******************
{ z = 1 * - ( ( x + 0 ) / ( y - b ) ) < b - ( 0 && 1 ) / 1 ; a = - ( 0 ) ; b = x < 9 ; b = 0 ; if y then y = b else x = b ; a = y ; if 0 * ( - ( 0 ) * ( b - b ) ) then if y <= ( 1 || ( - ( 1 ) <= ( 1 < a ) ) + 1 ) then y = - ( - ( 1 ) ) < 16 else while 1 do { } else { if b then { } else { } } ; while -14 - x do if 0 then { } else b = - ( - ( b <= a + b ) < ( x < a ) ) ; x = ( - ( - z ) == ( 1 && 0 + -28 ) < -9 ) -1 }

*******************
but expected
*******************
{
  z = 1 * - ( ( x + 0 ) / ( y - b ) ) < b - ( 0 && 1 ) / 1 ;
  a = - ( 0 ) ;
  b = x < 9 ;
  b = 0 ;
  if y then
    y = b
  else
    x = b ;
  a = y ;
  if 0 * ( - ( 0 ) * ( b - b ) ) then
    if y <= ( 1 || ( - ( 1 ) <= ( 1 < a ) ) + 1 ) then
      y = - ( - ( 1 ) ) < 16
    else
      while 1 do { }
  else {
    if b then { } else { }
  } ;
  while -14 - x do
    if 0 then { } else
      b = - ( - ( b <= a + b ) < ( x < a ) ) ;
  x = ( - ( - z ) == ( 1 && 0 + -28 ) < -9 ) -1
}

*******************

AST
If (Var "z") (Assign "b" (Const 0)) (Assign "b" (Const (-13)))
 was printed as
*******************
if z then b = 0 else b = -13

*******************
but expected
*******************
if z then
  b = 0
else
  b = -13

*******************

AST
Seq [Assign "z" (Var "y"),While (Const 0) (Seq []),Assign "b" (Const 0),Assign "b" (Binop Plus (Binop Times (Binop Plus (Const 1) (Const 0)) (Var "y")) (Binop And (Binop Or (Var "z") (Var "a")) (Binop Minus (Const 0) (Binop And (Binop Plus (Var "x") (Var "a")) (Uminus (Var "y")))))),If (Binop Plus (Binop Equal (Binop LessEq (Binop Or (Var "b") (Uminus (Const 13))) (Uminus (Var "z"))) (Const 7)) (Const 21)) (Assign "b" (Uminus (Var "a"))) (Assign "z" (Binop Equal (Uminus (Const 13)) (Const (-11)))),While (Binop Minus (Const 8) (Const 0)) (Seq []),Assign "a" (Binop And (Var "z") (Var "x")),While (Var "b") (Assign "a" (Var "a")),Assign "a" (Var "z")]
 was printed as
*******************
{ z = y ; while 0 do { } ; b = 0 ; b = ( 1 + 0 ) * y + ( ( z || a ) && 0 - ( x + a && - y ) ) ; if ( ( b || - ( 13 ) ) <= - z == 7 ) + 21 then b = - a else z = - ( 13 ) == -11 ; while 8 -0 do { } ; a = z && x ; while b do a = a ; a = z }

*******************
but expected
*******************
{
  z = y ;
  while 0 do { } ;
  b = 0 ;
  b = ( 1 + 0 ) * y + ( ( z || a ) && 0 - ( x + a && - y ) ) ;
  if ( ( b || - ( 13 ) ) <= - z == 7 ) + 21 then
    b = - a
  else
    z = - ( 13 ) == -11 ;
  while 8 -0 do { } ;
  a = z && x ;
  while b do
    a = a ;
  a = z
}

*******************

AST
Seq [If (Var "b") (Assign "b" (Binop Equal (Binop Times (Binop Or (Const 0) (Var "y")) (Const 1)) (Const 0))) (Assign "x" (Const 27)),While (Binop Times (Uminus (Binop Times (Const 0) (Const (-27)))) (Binop Times (Var "z") (Binop Div (Uminus (Const 1)) (Binop And (Var "x") (Uminus (Const (-28))))))) (Seq []),Assign "a" (Var "a"),Assign "a" (Uminus (Const (-25))),Assign "a" (Const 9),Assign "z" (Var "b"),If (Binop LessEq (Const 0) (Uminus (Var "z"))) (Assign "z" (Const (-25))) (Assign "z" (Var "a")),While (Const 1) (If (Binop Times (Uminus (Const 1)) (Var "y")) (If (Var "a") (Seq []) (Seq [])) (Assign "x" (Const 1))),Assign "b" (Uminus (Binop Minus (Var "a") (Const 1))),Assign "a" (Var "a"),Assign "x" (Uminus (Const 0))]
 was printed as
*******************
{ if b then b = ( 0 || y ) * 1 == 0 else x = 27 ; while - ( 0 * -27 ) * ( z * ( - ( 1 ) / ( x && - ( -28 ) ) ) ) do { } ; a = a ; a = - ( -25 ) ; a = 9 ; z = b ; if 0 <= - z then z = -25 else z = a ; while 1 do if - ( 1 ) * y then if a then { } else { } else x = 1 ; b = - ( a -1 ) ; a = a ; x = - ( 0 ) }

*******************
but expected
*******************
{
  if b then
    b = ( 0 || y ) * 1 == 0
  else
    x = 27 ;
  while - ( 0 * -27 ) * ( z * ( - ( 1 ) / ( x && - ( -28 ) ) ) ) do { } ;
  a = a ;
  a = - ( -25 ) ;
  a = 9 ;
  z = b ;
  if 0 <= - z then
    z = -25
  else
    z = a ;
  while 1 do
    if - ( 1 ) * y then
      if a then { } else { }
    else
      x = 1 ;
  b = - ( a -1 ) ;
  a = a ;
  x = - ( 0 )
}

*******************

AST
Seq [Assign "z" (Const 16),Assign "x" (Const (-30)),Assign "a" (Uminus (Const 2)),Assign "a" (Uminus (Const 0)),While (Var "z") (While (Binop Plus (Binop And (Binop Or (Binop LessEq (Var "y") (Const 1)) (Uminus (Binop Times (Const (-15)) (Const 1)))) (Const (-28))) (Binop Times (Var "b") (Binop LessEq (Binop Or (Var "x") (Var "y")) (Const 1)))) (Assign "y" (Binop Times (Var "x") (Binop Div (Binop Times (Var "b") (Const 0)) (Const 0))))),If (Var "x") (If (Binop Less (Var "y") (Var "z")) (If (Binop Less (Const 0) (Binop And (Const 1) (Binop Or (Const 1) (Const 1)))) (Seq []) (Seq [])) (Seq [])) (Assign "y" (Var "y")),Assign "x" (Var "y"),While (Binop And (Const (-20)) (Const 6)) (Assign "y" (Var "b")),Assign "x" (Const (-8)),While (Const 1) (Seq []),If (Var "y") (Assign "z" (Const 1)) (Seq [If (Binop Equal (Const 1) (Var "y")) (Seq []) (Seq [])])]
 was printed as
*******************
{ z = 16 ; x = -30 ; a = - ( 2 ) ; a = - ( 0 ) ; while z do while ( ( y <= 1 || - ( -15 * 1 ) ) && -28 ) + b * ( ( x || y ) <= 1 ) do y = x * ( b * 0 / 0 ) ; if x then if y < z then if 0 < ( 1 && ( 1 || 1 ) ) then { } else { } else { } else y = y ; x = y ; while -20 && 6 do y = b ; x = -8 ; while 1 do { } ; if y then z = 1 else { if 1 == y then { } else { } } }

*******************
but expected
*******************
{
  z = 16 ;
  x = -30 ;
  a = - ( 2 ) ;
  a = - ( 0 ) ;
  while z do
    while ( ( y <= 1 || - ( -15 * 1 ) ) && -28 ) + b * ( ( x || y ) <= 1 ) do
      y = x * ( b * 0 / 0 ) ;
  if x then
    if y < z then
      if 0 < ( 1 && ( 1 || 1 ) ) then { } else { }
    else { }
  else
    y = y ;
  x = y ;
  while -20 && 6 do
    y = b ;
  x = -8 ;
  while 1 do { } ;
  if y then
    z = 1
  else {
    if 1 == y then { } else { }
  }
}

*******************

AST
Seq [Assign "y" (Const 1),If (Binop Plus (Const 26) (Binop Plus (Const (-24)) (Var "y"))) (If (Const (-4)) (Seq [Assign "x" (Const 1)]) (Assign "z" (Binop Or (Binop And (Var "y") (Uminus (Var "y"))) (Binop Or (Uminus (Const 0)) (Uminus (Var "y")))))) (If (Var "a") (Assign "a" (Uminus (Var "z"))) (Assign "b" (Const 1))),Assign "b" (Const 0),Assign "a" (Var "a"),Assign "z" (Var "x"),Assign "z" (Var "y"),Assign "b" (Var "x"),If (Const (-16)) (Assign "b" (Uminus (Binop LessEq (Binop Div (Const 19) (Uminus (Const 22))) (Var "b")))) (If (Const 22) (Seq []) (Assign "x" (Const 1))),If (Var "y") (Assign "a" (Const 0)) (If (Var "b") (Seq []) (Seq [])),Assign "x" (Uminus (Uminus (Binop Or (Var "x") (Binop LessEq (Var "z") (Uminus (Var "y")))))),Assign "b" (Var "x")]
 was printed as
*******************
{ y = 1 ; if 26 + ( -24 + y ) then if -4 then { x = 1 } else z = y && - y || ( - ( 0 ) || - y ) else if a then a = - z else b = 1 ; b = 0 ; a = a ; z = x ; z = y ; b = x ; if -16 then b = - ( 19 / - ( 22 ) <= b ) else if 22 then { } else x = 1 ; if y then a = 0 else if b then { } else { } ; x = - ( - ( x || z <= - y ) ) ; b = x }

*******************
but expected
*******************
{
  y = 1 ;
  if 26 + ( -24 + y ) then
    if -4 then {
      x = 1
    } else
      z = y && - y || ( - ( 0 ) || - y )
  else if a then
    a = - z
  else
    b = 1 ;
  b = 0 ;
  a = a ;
  z = x ;
  z = y ;
  b = x ;
  if -16 then
    b = - ( 19 / - ( 22 ) <= b )
  else if 22 then { } else
    x = 1 ;
  if y then
    a = 0
  else if b then { } else { } ;
  x = - ( - ( x || z <= - y ) ) ;
  b = x
}

*******************

AST
While (Var "a") (Assign "b" (Const 0))
 was printed as
*******************
while a do b = 0

*******************
but expected
*******************
while a do
  b = 0

*******************

AST
If (Const (-14)) (Seq []) (Assign "a" (Uminus (Binop Or (Binop Minus (Const 1) (Var "a")) (Var "y"))))
 was printed as
*******************
if -14 then { } else a = - ( 1 - a || y )

*******************
but expected
*******************
if -14 then { } else
  a = - ( 1 - a || y )

*******************

AST
If (Uminus (Uminus (Const (-23)))) (Assign "z" (Const 4)) (Assign "b" (Binop Less (Binop And (Uminus (Binop LessEq (Const 1) (Const 1))) (Var "a")) (Const 1)))
 was printed as
*******************
if - ( - ( -23 ) ) then z = 4 else b = ( - ( 1 <= 1 ) && a ) < 1

*******************
but expected
*******************
if - ( - ( -23 ) ) then
  z = 4
else
  b = ( - ( 1 <= 1 ) && a ) < 1

*******************

AST
If (Const 0) (While (Var "y") (Seq [Assign "y" (Binop Minus (Const 10) (Binop Less (Const 0) (Var "z")))])) (If (Const 1) (Assign "z" (Const 0)) (Assign "z" (Var "y")))
 was printed as
*******************
if 0 then while y do { y = 10 - ( 0 < z ) } else if 1 then z = 0 else z = y

*******************
but expected
*******************
if 0 then
  while y do {
    y = 10 - ( 0 < z )
  }
else if 1 then
  z = 0
else
  z = y

*******************

AST
If (Binop Or (Var "x") (Var "a")) (Seq [Assign "a" (Const (-16)),Assign "z" (Var "b"),If (Var "y") (Assign "b" (Const (-6))) (Assign "z" (Var "y")),If (Const (-26)) (Assign "b" (Const 1)) (Assign "z" (Uminus (Binop Or (Const 1) (Binop Less (Const (-18)) (Uminus (Var "x")))))),Assign "y" (Const 1),Assign "a" (Binop Div (Binop Times (Var "x") (Const 4)) (Uminus (Binop Or (Var "z") (Const 0)))),If (Var "x") (If (Var "x") (Assign "z" (Const (-3))) (Assign "a" (Uminus (Const (-13))))) (Assign "b" (Binop And (Const 0) (Binop Plus (Const 17) (Var "a"))))]) (If (Uminus (Binop Div (Uminus (Var "a")) (Var "y"))) (Seq []) (While (Uminus (Binop Div (Var "x") (Const 0))) (Seq [])))
 was printed as
*******************
if x || a then { a = -16 ; z = b ; if y then b = -6 else z = y ; if -26 then b = 1 else z = - ( 1 || -18 < - x ) ; y = 1 ; a = x * 4 / - ( z || 0 ) ; if x then if x then z = -3 else a = - ( -13 ) else b = 0 && 17 + a } else if - ( - a / y ) then { } else while - ( x / 0 ) do { }

*******************
but expected
*******************
if x || a then {
  a = -16 ;
  z = b ;
  if y then
    b = -6
  else
    z = y ;
  if -26 then
    b = 1
  else
    z = - ( 1 || -18 < - x ) ;
  y = 1 ;
  a = x * 4 / - ( z || 0 ) ;
  if x then
    if x then
      z = -3
    else
      a = - ( -13 )
  else
    b = 0 && 17 + a
} else if - ( - a / y ) then { } else
  while - ( x / 0 ) do { }

*******************

AST
Seq [If (Binop Minus (Binop Plus (Binop Equal (Var "a") (Binop Or (Binop Plus (Var "z") (Var "x")) (Var "a"))) (Var "z")) (Var "x")) (Assign "a" (Const 1)) (If (Var "x") (Seq []) (If (Var "x") (If (Var "x") (Seq []) (Seq [])) (Assign "a" (Binop Plus (Binop LessEq (Uminus (Var "a")) (Uminus (Const (-9)))) (Const (-6)))))),If (Var "y") (Assign "z" (Const 1)) (Seq [Assign "y" (Var "a")]),Assign "z" (Uminus (Const 0)),Assign "b" (Uminus (Uminus (Var "y"))),Assign "y" (Var "a"),Assign "z" (Const 0),Assign "b" (Var "x"),Assign "a" (Const 0),While (Var "a") (Assign "b" (Const 1)),Assign "x" (Binop LessEq (Var "x") (Var "b")),Assign "b" (Const 0),If (Var "z") (Assign "a" (Const 1)) (Assign "z" (Var "a"))]
 was printed as
*******************
{ if ( a == ( z + x || a ) ) + z - x then a = 1 else if x then { } else if x then if x then { } else { } else a = ( - a <= - ( -9 ) ) + -6 ; if y then z = 1 else { y = a } ; z = - ( 0 ) ; b = - ( - y ) ; y = a ; z = 0 ; b = x ; a = 0 ; while a do b = 1 ; x = x <= b ; b = 0 ; if z then a = 1 else z = a }

*******************
but expected
*******************
{
  if ( a == ( z + x || a ) ) + z - x then
    a = 1
  else if x then { } else if x then
    if x then { } else { }
  else
    a = ( - a <= - ( -9 ) ) + -6 ;
  if y then
    z = 1
  else {
    y = a
  } ;
  z = - ( 0 ) ;
  b = - ( - y ) ;
  y = a ;
  z = 0 ;
  b = x ;
  a = 0 ;
  while a do
    b = 1 ;
  x = x <= b ;
  b = 0 ;
  if z then
    a = 1
  else
    z = a
}

*******************

AST
Seq [If (Uminus (Var "y")) (Assign "x" (Var "z")) (Seq []),Assign "a" (Binop Div (Const (-3)) (Binop Less (Uminus (Const 8)) (Const 0))),Assign "z" (Binop Or (Var "b") (Const 0)),While (Binop Div (Var "z") (Var "a")) (Assign "x" (Uminus (Binop Minus (Const 1) (Const (-14)))))]
 was printed as
*******************
{ if - y then x = z else { } ; a = -3 / ( - ( 8 ) < 0 ) ; z = b || 0 ; while z / a do x = - ( 1 - -14 ) }

*******************
but expected
*******************
{
  if - y then
    x = z
  else { } ;
  a = -3 / ( - ( 8 ) < 0 ) ;
  z = b || 0 ;
  while z / a do
    x = - ( 1 - -14 )
}

*******************

AST
If (Binop Equal (Binop Times (Binop Or (Binop Plus (Var "y") (Const 0)) (Const 1)) (Var "x")) (Const 6)) (If (Const 1) (If (Const (-27)) (Seq []) (Assign "a" (Var "z"))) (Seq [])) (If (Binop Times (Binop Minus (Const (-5)) (Uminus (Binop Less (Binop Div (Const 1) (Const 7)) (Const 0)))) (Const 1)) (If (Binop LessEq (Var "a") (Uminus (Var "x"))) (Assign "x" (Const (-8))) (Assign "z" (Var "b"))) (Assign "b" (Binop LessEq (Const (-29)) (Const (-13)))))
 was printed as
*******************
if ( y + 0 || 1 ) * x == 6 then if 1 then if -27 then { } else a = z else { } else if ( -5 - - ( 1 / 7 < 0 ) ) * 1 then if a <= - x then x = -8 else z = b else b = -29 <= -13

*******************
but expected
*******************
if ( y + 0 || 1 ) * x == 6 then
  if 1 then
    if -27 then { } else
      a = z
  else { }
else if ( -5 - - ( 1 / 7 < 0 ) ) * 1 then
  if a <= - x then
    x = -8
  else
    z = b
else
  b = -29 <= -13

*******************

AST
Seq [If (Binop Plus (Var "a") (Const 1)) (While (Const 1) (Assign "b" (Const 0))) (While (Binop Div (Const 11) (Const (-15))) (While (Uminus (Uminus (Var "y"))) (Seq [])))]
 was printed as
*******************
{ if a + 1 then while 1 do b = 0 else while 11 / -15 do while - ( - y ) do { } }

*******************
but expected
*******************
{
  if a + 1 then
    while 1 do
      b = 0
  else
    while 11 / -15 do
      while - ( - y ) do { }
}

*******************

AST
Seq [Assign "y" (Const 27),If (Binop Less (Binop Plus (Uminus (Var "b")) (Binop Times (Const 0) (Var "a"))) (Uminus (Const 0))) (Assign "y" (Binop Equal (Binop Plus (Binop Plus (Var "x") (Var "b")) (Const 10)) (Uminus (Const 0)))) (Seq [While (Uminus (Uminus (Const 0))) (Seq []),While (Uminus (Const (-30))) (If (Binop Less (Const 1) (Var "b")) (Seq []) (Seq [])),Assign "b" (Const (-28))]),Assign "b" (Const 1)]
 was printed as
*******************
{ y = 27 ; if - b + 0 * a < - ( 0 ) then y = x + b + 10 == - ( 0 ) else { while - ( - ( 0 ) ) do { } ; while - ( -30 ) do if 1 < b then { } else { } ; b = -28 } ; b = 1 }

*******************
but expected
*******************
{
  y = 27 ;
  if - b + 0 * a < - ( 0 ) then
    y = x + b + 10 == - ( 0 )
  else {
    while - ( - ( 0 ) ) do { } ;
    while - ( -30 ) do
      if 1 < b then { } else { } ;
    b = -28
  } ;
  b = 1
}

*******************

AST
While (Uminus (Binop Plus (Var "z") (Const 0))) (While (Binop Plus (Const 0) (Var "b")) (Assign "z" (Var "b")))
 was printed as
*******************
while - ( z + 0 ) do while 0 + b do z = b

*******************
but expected
*******************
while - ( z + 0 ) do
  while 0 + b do
    z = b

*******************

AST
Seq [Assign "x" (Uminus (Const 0)),While (Var "b") (Assign "a" (Const 0)),If (Var "x") (Assign "z" (Const (-12))) (If (Const 1) (If (Binop Or (Binop Or (Const (-27)) (Binop And (Var "y") (Const (-3)))) (Var "a")) (Seq []) (Seq [])) (Assign "x" (Binop Less (Uminus (Uminus (Var "x"))) (Binop Equal (Var "x") (Const 0))))),Assign "x" (Const (-6)),Assign "y" (Var "a"),Assign "a" (Binop Div (Var "b") (Var "b")),Assign "x" (Binop Less (Const 0) (Uminus (Uminus (Const 1)))),Assign "x" (Uminus (Binop And (Const 10) (Const 1))),Assign "b" (Const 1),Assign "a" (Var "y"),Assign "y" (Uminus (Binop Plus (Binop Div (Binop Less (Var "b") (Binop Div (Const 1) (Const 0))) (Binop Plus (Uminus (Const 0)) (Const (-19)))) (Const 12))),Assign "a" (Uminus (Var "b")),If (Binop And (Binop LessEq (Uminus (Const (-18))) (Binop Equal (Const (-28)) (Const (-17)))) (Binop Less (Const 1) (Uminus (Binop Times (Binop Minus (Var "b") (Var "y")) (Const 1))))) (Seq [Assign "b" (Const 0)]) (Assign "x" (Var "x")),While (Uminus (Uminus (Uminus (Binop Equal (Binop Less (Var "z") (Var "z")) (Const 1))))) (Assign "y" (Const 1))]
 was printed as
*******************
{ x = - ( 0 ) ; while b do a = 0 ; if x then z = -12 else if 1 then if -27 || y && -3 || a then { } else { } else x = - ( - x ) < ( x == 0 ) ; x = -6 ; y = a ; a = b / b ; x = 0 < - ( - ( 1 ) ) ; x = - ( 10 && 1 ) ; b = 1 ; a = y ; y = - ( ( b < 1 / 0 ) / ( - ( 0 ) + -19 ) + 12 ) ; a = - b ; if - ( -18 ) <= ( -28 == -17 ) && 1 < - ( ( b - y ) * 1 ) then { b = 0 } else x = x ; while - ( - ( - ( z < z == 1 ) ) ) do y = 1 }

*******************
but expected
*******************
{
  x = - ( 0 ) ;
  while b do
    a = 0 ;
  if x then
    z = -12
  else if 1 then
    if -27 || y && -3 || a then { } else { }
  else
    x = - ( - x ) < ( x == 0 ) ;
  x = -6 ;
  y = a ;
  a = b / b ;
  x = 0 < - ( - ( 1 ) ) ;
  x = - ( 10 && 1 ) ;
  b = 1 ;
  a = y ;
  y = - ( ( b < 1 / 0 ) / ( - ( 0 ) + -19 ) + 12 ) ;
  a = - b ;
  if - ( -18 ) <= ( -28 == -17 ) && 1 < - ( ( b - y ) * 1 ) then {
    b = 0
  } else
    x = x ;
  while - ( - ( - ( z < z == 1 ) ) ) do
    y = 1
}

*******************

AST
Seq [Assign "y" (Uminus (Binop Div (Var "x") (Const 0))),Assign "b" (Uminus (Var "x")),While (Binop Plus (Binop Plus (Binop Plus (Const 27) (Var "x")) (Var "x")) (Const 1)) (Assign "b" (Var "b")),Assign "z" (Binop LessEq (Uminus (Binop LessEq (Var "a") (Const 0))) (Var "y")),Assign "y" (Var "y"),Assign "a" (Var "b"),Assign "y" (Binop Or (Const 1) (Var "b")),If (Binop Equal (Binop Or (Var "a") (Var "y")) (Binop Or (Const 0) (Binop Plus (Const 1) (Binop Plus (Const 0) (Const 0))))) (Seq []) (While (Var "x") (Assign "z" (Var "y"))),Assign "y" (Var "b"),Assign "z" (Binop Less (Const 0) (Const 0)),If (Binop Or (Const 0) (Const 9)) (Assign "y" (Uminus (Var "y"))) (Seq []),Assign "x" (Const 1),Assign "z" (Binop Equal (Var "b") (Const (-14))),Assign "b" (Var "y"),Assign "y" (Const 0),Assign "a" (Const (-25)),Assign "z" (Uminus (Const 0)),Assign "y" (Var "z"),Assign "b" (Const (-15)),While (Const 1) (Assign "z" (Binop Div (Binop Or (Const 1) (Var "b")) (Binop Div (Var "x") (Var "z")))),Assign "x" (Var "z"),Assign "y" (Const 1),Assign "y" (Binop Minus (Binop Minus (Const (-14)) (Binop Minus (Binop Equal (Binop LessEq (Var "z") (Const 1)) (Binop Div (Const 24) (Const 0))) (Const 0))) (Binop LessEq (Binop Times (Binop Or (Uminus (Const 1)) (Uminus (Const (-10)))) (Var "z")) (Var "y"))),Assign "z" (Const 14),If (Var "z") (Seq []) (Seq []),Assign "b" (Var "y"),Assign "b" (Const 14),Assign "a" (Binop Times (Const 1) (Const 1)),Assign "x" (Binop And (Binop And (Binop Minus (Const 1) (Binop Or (Var "y") (Var "z"))) (Uminus (Const (-26)))) (Binop LessEq (Var "a") (Const 1))),Assign "b" (Const (-9))]
 was printed as
*******************
{ y = - ( x / 0 ) ; b = - x ; while 27 + x + x + 1 do b = b ; z = - ( a <= 0 ) <= y ; y = y ; a = b ; y = 1 || b ; if ( a || y ) == ( 0 || 1 + ( 0 + 0 ) ) then { } else while x do z = y ; y = b ; z = 0 < 0 ; if 0 || 9 then y = - y else { } ; x = 1 ; z = b == -14 ; b = y ; y = 0 ; a = -25 ; z = - ( 0 ) ; y = z ; b = -15 ; while 1 do z = ( 1 || b ) / ( x / z ) ; x = z ; y = 1 ; y = -14 - ( ( z <= 1 == 24 / 0 ) -0 ) - ( ( - ( 1 ) || - ( -10 ) ) * z <= y ) ; z = 14 ; if z then { } else { } ; b = y ; b = 14 ; a = 1 * 1 ; x = 1 - ( y || z ) && - ( -26 ) && a <= 1 ; b = -9 }

*******************
but expected
*******************
{
  y = - ( x / 0 ) ;
  b = - x ;
  while 27 + x + x + 1 do
    b = b ;
  z = - ( a <= 0 ) <= y ;
  y = y ;
  a = b ;
  y = 1 || b ;
  if ( a || y ) == ( 0 || 1 + ( 0 + 0 ) ) then { } else
    while x do
      z = y ;
  y = b ;
  z = 0 < 0 ;
  if 0 || 9 then
    y = - y
  else { } ;
  x = 1 ;
  z = b == -14 ;
  b = y ;
  y = 0 ;
  a = -25 ;
  z = - ( 0 ) ;
  y = z ;
  b = -15 ;
  while 1 do
    z = ( 1 || b ) / ( x / z ) ;
  x = z ;
  y = 1 ;
  y = -14 - ( ( z <= 1 == 24 / 0 ) -0 ) - ( ( - ( 1 ) || - ( -10 ) ) * z <= y ) ;
  z = 14 ;
  if z then { } else { } ;
  b = y ;
  b = 14 ;
  a = 1 * 1 ;
  x = 1 - ( y || z ) && - ( -26 ) && a <= 1 ;
  b = -9
}

*******************

AST
Seq [If (Binop And (Uminus (Binop And (Const 0) (Var "b"))) (Var "y")) (Assign "z" (Binop Less (Binop Minus (Const 0) (Var "a")) (Var "a"))) (Seq [Assign "x" (Binop Or (Binop Less (Uminus (Const 1)) (Var "b")) (Var "y")),If (Binop LessEq (Const 0) (Const 0)) (Assign "b" (Uminus (Binop Or (Binop Less (Binop LessEq (Const 1) (Binop Equal (Var "b") (Const 0))) (Binop Times (Binop Times (Var "x") (Var "z")) (Binop Plus (Var "z") (Const (-6))))) (Var "a")))) (If (Const 0) (Seq []) (Seq [])),While (Var "b") (Seq [])]),If (Var "a") (Seq [Assign "b" (Var "z")]) (Seq []),Assign "b" (Const 1),Assign "x" (Var "x"),While (Binop Or (Const 0) (Var "b")) (Seq [If (Var "z") (Seq []) (Seq [])]),If (Var "z") (If (Const 7) (Assign "x" (Uminus (Const 0))) (Assign "a" (Binop Less (Binop Plus (Const (-2)) (Const 1)) (Var "a")))) (Assign "y" (Binop Or (Var "x") (Var "x"))),Assign "a" (Var "y"),Assign "b" (Const 0),Assign "b" (Const 0),Assign "b" (Const 6),If (Var "z") (Seq [Assign "x" (Var "y")]) (Assign "z" (Var "y")),Assign "z" (Var "a"),Assign "a" (Var "y"),While (Const 1) (Seq []),Assign "a" (Uminus (Const 1)),If (Var "a") (Assign "z" (Binop Times (Const 1) (Const 1))) (Seq []),Assign "z" (Binop Minus (Var "a") (Binop Less (Binop Div (Uminus (Uminus (Const 0))) (Const 0)) (Var "z"))),While (Uminus (Const 21)) (If (Const 1) (Assign "y" (Const 1)) (If (Binop LessEq (Binop Less (Uminus (Var "a")) (Const 30)) (Const 0)) (Seq []) (If (Binop And (Uminus (Binop Times (Var "x") (Var "b"))) (Uminus (Const 0))) (Seq []) (Seq [])))),Assign "b" (Var "x"),While (Binop Or (Binop LessEq (Uminus (Uminus (Const 0))) (Var "x")) (Binop And (Var "b") (Var "a"))) (Seq []),Assign "x" (Const 1),Assign "b" (Binop Plus (Var "z") (Const 0)),While (Uminus (Binop Times (Var "y") (Uminus (Const 7)))) (If (Var "a") (Seq [Assign "a" (Binop And (Binop Div (Const 0) (Const 25)) (Binop LessEq (Const 24) (Const 0)))]) (While (Uminus (Uminus (Var "x"))) (Seq [])))]
 was printed as
*******************
{ if - ( 0 && b ) && y then z = 0 - a < a else { x = - ( 1 ) < b || y ; if 0 <= 0 then b = - ( 1 <= ( b == 0 ) < x * z * ( z + -6 ) || a ) else if 0 then { } else { } ; while b do { } } ; if a then { b = z } else { } ; b = 1 ; x = x ; while 0 || b do { if z then { } else { } } ; if z then if 7 then x = - ( 0 ) else a = -2 + 1 < a else y = x || x ; a = y ; b = 0 ; b = 0 ; b = 6 ; if z then { x = y } else z = y ; z = a ; a = y ; while 1 do { } ; a = - ( 1 ) ; if a then z = 1 * 1 else { } ; z = a - ( - ( - ( 0 ) ) / 0 < z ) ; while - ( 21 ) do if 1 then y = 1 else if - a < 30 <= 0 then { } else if - ( x * b ) && - ( 0 ) then { } else { } ; b = x ; while - ( - ( 0 ) ) <= x || b && a do { } ; x = 1 ; b = z + 0 ; while - ( y * - ( 7 ) ) do if a then { a = 0 / 25 && 24 <= 0 } else while - ( - x ) do { } }

*******************
but expected
*******************
{
  if - ( 0 && b ) && y then
    z = 0 - a < a
  else {
    x = - ( 1 ) < b || y ;
    if 0 <= 0 then
      b = - ( 1 <= ( b == 0 ) < x * z * ( z + -6 ) || a )
    else if 0 then { } else { } ;
    while b do { }
  } ;
  if a then {
    b = z
  } else { } ;
  b = 1 ;
  x = x ;
  while 0 || b do {
    if z then { } else { }
  } ;
  if z then
    if 7 then
      x = - ( 0 )
    else
      a = -2 + 1 < a
  else
    y = x || x ;
  a = y ;
  b = 0 ;
  b = 0 ;
  b = 6 ;
  if z then {
    x = y
  } else
    z = y ;
  z = a ;
  a = y ;
  while 1 do { } ;
  a = - ( 1 ) ;
  if a then
    z = 1 * 1
  else { } ;
  z = a - ( - ( - ( 0 ) ) / 0 < z ) ;
  while - ( 21 ) do
    if 1 then
      y = 1
    else if - a < 30 <= 0 then { } else if - ( x * b ) && - ( 0 ) then { } else { } ;
  b = x ;
  while - ( - ( 0 ) ) <= x || b && a do { } ;
  x = 1 ;
  b = z + 0 ;
  while - ( y * - ( 7 ) ) do
    if a then {
      a = 0 / 25 && 24 <= 0
    } else
      while - ( - x ) do { }
}

*******************

AST
Seq [If (Const 1) (Assign "y" (Const 1)) (Assign "a" (Binop Minus (Binop Less (Binop Div (Binop Div (Binop Less (Const 1) (Const (-21))) (Binop Minus (Const 1) (Const 14))) (Binop Or (Var "a") (Uminus (Const (-7))))) (Const 0)) (Uminus (Var "a")))),While (Const 8) (If (Const (-19)) (Seq []) (Seq [])),Assign "z" (Var "z"),If (Const 0) (Assign "x" (Const 0)) (Seq []),If (Const 25) (Assign "y" (Binop Less (Binop Div (Var "b") (Var "z")) (Const 22))) (Seq []),Assign "y" (Uminus (Var "a")),Assign "b" (Const (-22)),While (Binop Plus (Binop Less (Var "y") (Const 23)) (Var "b")) (Seq []),If (Uminus (Const 5)) (If (Var "a") (Assign "y" (Var "x")) (Seq [])) (While (Var "b") (If (Const 1) (Seq []) (Seq []))),Assign "x" (Var "a")]
 was printed as
*******************
{ if 1 then y = 1 else a = ( ( 1 < -21 ) / ( 1 -14 ) / ( a || - ( -7 ) ) < 0 ) - - a ; while 8 do if -19 then { } else { } ; z = z ; if 0 then x = 0 else { } ; if 25 then y = b / z < 22 else { } ; y = - a ; b = -22 ; while ( y < 23 ) + b do { } ; if - ( 5 ) then if a then y = x else { } else while b do if 1 then { } else { } ; x = a }

*******************
but expected
*******************
{
  if 1 then
    y = 1
  else
    a = ( ( 1 < -21 ) / ( 1 -14 ) / ( a || - ( -7 ) ) < 0 ) - - a ;
  while 8 do
    if -19 then { } else { } ;
  z = z ;
  if 0 then
    x = 0
  else { } ;
  if 25 then
    y = b / z < 22
  else { } ;
  y = - a ;
  b = -22 ;
  while ( y < 23 ) + b do { } ;
  if - ( 5 ) then
    if a then
      y = x
    else { }
  else
    while b do
      if 1 then { } else { } ;
  x = a
}

*******************

AST
Seq [Assign "a" (Const 1),If (Const 1) (If (Const 0) (If (Var "x") (Seq []) (Seq [])) (If (Const 0) (Seq []) (Assign "a" (Binop LessEq (Uminus (Const 1)) (Const (-20)))))) (Seq []),If (Binop And (Uminus (Const 1)) (Uminus (Var "z"))) (Assign "z" (Const 0)) (If (Var "x") (Seq []) (Assign "a" (Const 1))),Assign "b" (Const (-23)),Assign "b" (Uminus (Binop Plus (Const (-19)) (Uminus (Uminus (Binop Times (Const 5) (Var "x")))))),If (Const 18) (Seq [Assign "y" (Binop Or (Binop Minus (Binop Less (Const 0) (Uminus (Var "y"))) (Const 1)) (Binop Plus (Binop LessEq (Const 0) (Binop Div (Var "z") (Const 1))) (Uminus (Const 1))))]) (Assign "a" (Binop Or (Const 1) (Var "x"))),While (Uminus (Binop Div (Var "a") (Var "a"))) (While (Binop Plus (Const 1) (Var "y")) (While (Const 1) (Seq []))),If (Var "b") (Assign "y" (Var "a")) (Seq []),Assign "x" (Var "b"),Assign "a" (Const 0),If (Var "b") (Assign "b" (Binop Equal (Const 0) (Var "a"))) (If (Binop Div (Const 1) (Const 0)) (While (Var "b") (Seq [])) (Assign "x" (Var "a"))),If (Binop Equal (Const 0) (Binop Minus (Binop And (Binop Less (Const 1) (Uminus (Var "a"))) (Const 27)) (Var "z"))) (While (Binop Times (Uminus (Const 0)) (Var "x")) (Seq [])) (Seq []),Assign "a" (Binop And (Const 0) (Const 0)),Assign "y" (Var "a")]
 was printed as
*******************
{ a = 1 ; if 1 then if 0 then if x then { } else { } else if 0 then { } else a = - ( 1 ) <= -20 else { } ; if - ( 1 ) && - z then z = 0 else if x then { } else a = 1 ; b = -23 ; b = - ( -19 + - ( - ( 5 * x ) ) ) ; if 18 then { y = ( 0 < - y ) -1 || ( 0 <= z / 1 ) + - ( 1 ) } else a = 1 || x ; while - ( a / a ) do while 1 + y do while 1 do { } ; if b then y = a else { } ; x = b ; a = 0 ; if b then b = 0 == a else if 1 / 0 then while b do { } else x = a ; if 0 == ( 1 < - a && 27 ) - z then while - ( 0 ) * x do { } else { } ; a = 0 && 0 ; y = a }

*******************
but expected
*******************
{
  a = 1 ;
  if 1 then
    if 0 then
      if x then { } else { }
    else if 0 then { } else
      a = - ( 1 ) <= -20
  else { } ;
  if - ( 1 ) && - z then
    z = 0
  else if x then { } else
    a = 1 ;
  b = -23 ;
  b = - ( -19 + - ( - ( 5 * x ) ) ) ;
  if 18 then {
    y = ( 0 < - y ) -1 || ( 0 <= z / 1 ) + - ( 1 )
  } else
    a = 1 || x ;
  while - ( a / a ) do
    while 1 + y do
      while 1 do { } ;
  if b then
    y = a
  else { } ;
  x = b ;
  a = 0 ;
  if b then
    b = 0 == a
  else if 1 / 0 then
    while b do { }
  else
    x = a ;
  if 0 == ( 1 < - a && 27 ) - z then
    while - ( 0 ) * x do { }
  else { } ;
  a = 0 && 0 ;
  y = a
}

*******************

AST
If (Var "b") (Assign "x" (Var "y")) (Assign "b" (Uminus (Uminus (Uminus (Binop Plus (Const 13) (Const 0))))))
 was printed as
*******************
if b then x = y else b = - ( - ( - ( 13 + 0 ) ) )

*******************
but expected
*******************
if b then
  x = y
else
  b = - ( - ( - ( 13 + 0 ) ) )

*******************

AST
If (Uminus (Uminus (Const 0))) (While (Var "a") (If (Const 1) (If (Binop LessEq (Uminus (Const 1)) (Uminus (Var "b"))) (Assign "b" (Binop LessEq (Binop Minus (Const 0) (Binop Div (Uminus (Binop LessEq (Const 0) (Const 1))) (Binop Div (Const (-8)) (Const 9)))) (Var "y"))) (Seq [])) (If (Binop Times (Const 25) (Var "a")) (Assign "b" (Var "y")) (Assign "x" (Var "x"))))) (Assign "z" (Const 0))
 was printed as
*******************
if - ( - ( 0 ) ) then while a do if 1 then if - ( 1 ) <= - b then b = 0 - - ( 0 <= 1 ) / ( -8 / 9 ) <= y else { } else if 25 * a then b = y else x = x else z = 0

*******************
but expected
*******************
if - ( - ( 0 ) ) then
  while a do
    if 1 then
      if - ( 1 ) <= - b then
        b = 0 - - ( 0 <= 1 ) / ( -8 / 9 ) <= y
      else { }
    else if 25 * a then
      b = y
    else
      x = x
else
  z = 0

*******************

AST
If (Const (-8)) (Assign "x" (Binop And (Const 1) (Binop Times (Const 19) (Binop And (Const 20) (Uminus (Const 0)))))) (Assign "a" (Var "y"))
 was printed as
*******************
if -8 then x = 1 && 19 * ( 20 && - ( 0 ) ) else a = y

*******************
but expected
*******************
if -8 then
  x = 1 && 19 * ( 20 && - ( 0 ) )
else
  a = y

*******************

AST
If (Uminus (Var "z")) (Assign "x" (Uminus (Var "x"))) (If (Var "x") (Assign "a" (Var "a")) (Assign "x" (Var "z")))
 was printed as
*******************
if - z then x = - x else if x then a = a else x = z

*******************
but expected
*******************
if - z then
  x = - x
else if x then
  a = a
else
  x = z

*******************

AST
If (Binop And (Binop Less (Var "a") (Const 0)) (Binop Div (Uminus (Var "y")) (Var "x"))) (Seq [Assign "x" (Binop LessEq (Binop Times (Const 0) (Binop Plus (Const 1) (Const 3))) (Uminus (Binop And (Var "x") (Var "y")))),If (Const 16) (While (Var "b") (Seq [])) (If (Const 0) (Seq []) (Seq [])),If (Uminus (Uminus (Const 1))) (Seq [While (Const 7) (Seq [])]) (Assign "z" (Const (-17)))]) (Seq [If (Binop Div (Binop Minus (Var "y") (Var "z")) (Uminus (Const 1))) (Assign "b" (Const (-4))) (Assign "y" (Binop Less (Const 1) (Var "z"))),Assign "x" (Binop Equal (Uminus (Const 0)) (Const 16)),While (Const 5) (Assign "y" (Const 0))])
 was printed as
*******************
if a < 0 && - y / x then { x = 0 * ( 1 + 3 ) <= - ( x && y ) ; if 16 then while b do { } else if 0 then { } else { } ; if - ( - ( 1 ) ) then { while 7 do { } } else z = -17 } else { if ( y - z ) / - ( 1 ) then b = -4 else y = 1 < z ; x = - ( 0 ) == 16 ; while 5 do y = 0 }

*******************
but expected
*******************
if a < 0 && - y / x then {
  x = 0 * ( 1 + 3 ) <= - ( x && y ) ;
  if 16 then
    while b do { }
  else if 0 then { } else { } ;
  if - ( - ( 1 ) ) then {
    while 7 do { }
  } else
    z = -17
} else {
  if ( y - z ) / - ( 1 ) then
    b = -4
  else
    y = 1 < z ;
  x = - ( 0 ) == 16 ;
  while 5 do
    y = 0
}

*******************

AST
Seq [If (Binop Or (Uminus (Uminus (Const 1))) (Var "y")) (While (Const 0) (If (Binop Or (Const 1) (Binop Less (Var "y") (Var "a"))) (Assign "z" (Binop Minus (Binop LessEq (Const 21) (Const 0)) (Var "a"))) (If (Binop Times (Const 0) (Var "y")) (Seq []) (Seq [])))) (While (Uminus (Const 0)) (While (Binop Plus (Uminus (Var "a")) (Binop Minus (Const 1) (Var "a"))) (Assign "a" (Const 0)))),Assign "b" (Var "b"),If (Binop Equal (Binop Or (Uminus (Uminus (Var "x"))) (Var "y")) (Binop Or (Const 1) (Const 1))) (Assign "x" (Binop LessEq (Var "x") (Var "x"))) (Assign "b" (Var "z")),Assign "x" (Const 0),If (Var "y") (Seq []) (Seq []),Assign "x" (Var "y"),While (Const 25) (Seq [Assign "y" (Binop Minus (Const 1) (Binop And (Var "a") (Const 1))),If (Var "x") (If (Binop Minus (Var "b") (Const 0)) (Seq []) (Seq [])) (If (Var "a") (Seq []) (Seq [])),Assign "z" (Const (-19))])]
 was printed as
*******************
{ if - ( - ( 1 ) ) || y then while 0 do if 1 || y < a then z = ( 21 <= 0 ) - a else if 0 * y then { } else { } else while - ( 0 ) do while - a + ( 1 - a ) do a = 0 ; b = b ; if ( - ( - x ) || y ) == ( 1 || 1 ) then x = x <= x else b = z ; x = 0 ; if y then { } else { } ; x = y ; while 25 do { y = 1 - ( a && 1 ) ; if x then if b -0 then { } else { } else if a then { } else { } ; z = -19 } }

*******************
but expected
*******************
{
  if - ( - ( 1 ) ) || y then
    while 0 do
      if 1 || y < a then
        z = ( 21 <= 0 ) - a
      else if 0 * y then { } else { }
  else
    while - ( 0 ) do
      while - a + ( 1 - a ) do
        a = 0 ;
  b = b ;
  if ( - ( - x ) || y ) == ( 1 || 1 ) then
    x = x <= x
  else
    b = z ;
  x = 0 ;
  if y then { } else { } ;
  x = y ;
  while 25 do {
    y = 1 - ( a && 1 ) ;
    if x then
      if b -0 then { } else { }
    else if a then { } else { } ;
    z = -19
  }
}

*******************

AST
Seq [If (Const 0) (Assign "b" (Var "z")) (Assign "y" (Var "y")),While (Uminus (Const 1)) (Assign "z" (Const 25)),Assign "y" (Binop Or (Binop And (Binop Equal (Uminus (Binop And (Var "x") (Const 1))) (Binop Or (Const 1) (Var "y"))) (Const 1)) (Binop Div (Const 1) (Binop Div (Binop Equal (Const 0) (Var "y")) (Uminus (Binop LessEq (Const 0) (Var "y")))))),If (Var "a") (Assign "x" (Var "b")) (If (Const (-20)) (Seq []) (Assign "z" (Var "x"))),Assign "y" (Var "y"),Assign "b" (Binop Equal (Const 4) (Binop LessEq (Binop Or (Const 0) (Var "x")) (Const 1))),Assign "z" (Var "x"),Assign "z" (Var "y")]
 was printed as
*******************
{ if 0 then b = z else y = y ; while - ( 1 ) do z = 25 ; y = - ( x && 1 ) == ( 1 || y ) && 1 || 1 / ( ( 0 == y ) / - ( 0 <= y ) ) ; if a then x = b else if -20 then { } else z = x ; y = y ; b = 4 == ( ( 0 || x ) <= 1 ) ; z = x ; z = y }

*******************
but expected
*******************
{
  if 0 then
    b = z
  else
    y = y ;
  while - ( 1 ) do
    z = 25 ;
  y = - ( x && 1 ) == ( 1 || y ) && 1 || 1 / ( ( 0 == y ) / - ( 0 <= y ) ) ;
  if a then
    x = b
  else if -20 then { } else
    z = x ;
  y = y ;
  b = 4 == ( ( 0 || x ) <= 1 ) ;
  z = x ;
  z = y
}

*******************

AST
If (Const 17) (If (Var "a") (Seq [Assign "z" (Const 1),If (Binop Or (Binop Minus (Var "b") (Uminus (Const (-9)))) (Var "a")) (Assign "z" (Var "y")) (If (Uminus (Const 1)) (Seq []) (Seq [])),Assign "y" (Binop Less (Binop Less (Const (-19)) (Var "b")) (Const 0))]) (Seq [Assign "a" (Uminus (Var "y"))])) (Assign "a" (Binop Div (Var "b") (Uminus (Var "z"))))
 was printed as
*******************
if 17 then if a then { z = 1 ; if b - - ( -9 ) || a then z = y else if - ( 1 ) then { } else { } ; y = -19 < b < 0 } else { a = - y } else a = b / - z

*******************
but expected
*******************
if 17 then
  if a then {
    z = 1 ;
    if b - - ( -9 ) || a then
      z = y
    else if - ( 1 ) then { } else { } ;
    y = -19 < b < 0
  } else {
    a = - y
  }
else
  a = b / - z

*******************

AST
If (Var "a") (Seq [Assign "y" (Var "z"),While (Binop And (Var "b") (Binop And (Var "y") (Var "y"))) (Assign "a" (Binop Times (Var "x") (Const (-8)))),If (Binop LessEq (Const 0) (Var "a")) (Assign "b" (Var "x")) (While (Binop Plus (Var "y") (Binop Equal (Var "z") (Binop Div (Const (-26)) (Const 5)))) (Assign "b" (Const (-1)))),Assign "a" (Uminus (Var "b"))]) (Assign "z" (Uminus (Uminus (Binop Equal (Var "x") (Const 5)))))
 was printed as
*******************
if a then { y = z ; while b && ( y && y ) do a = x * -8 ; if 0 <= a then b = x else while y + ( z == -26 / 5 ) do b = -1 ; a = - b } else z = - ( - ( x == 5 ) )

*******************
but expected
*******************
if a then {
  y = z ;
  while b && ( y && y ) do
    a = x * -8 ;
  if 0 <= a then
    b = x
  else
    while y + ( z == -26 / 5 ) do
      b = -1 ;
  a = - b
} else
  z = - ( - ( x == 5 ) )

*******************

AST
If (Binop And (Binop Div (Const 0) (Var "a")) (Const 12)) (If (Binop LessEq (Var "b") (Var "y")) (While (Binop Equal (Var "x") (Binop Equal (Var "z") (Const 0))) (Assign "y" (Const 0))) (Assign "x" (Uminus (Const 0)))) (Assign "x" (Binop Or (Var "y") (Var "b")))
 was printed as
*******************
if 0 / a && 12 then if b <= y then while x == ( z == 0 ) do y = 0 else x = - ( 0 ) else x = y || b

*******************
but expected
*******************
if 0 / a && 12 then
  if b <= y then
    while x == ( z == 0 ) do
      y = 0
  else
    x = - ( 0 )
else
  x = y || b

*******************

AST
Seq [If (Const (-26)) (Assign "a" (Var "x")) (Assign "x" (Const 1)),Assign "z" (Var "y"),If (Const (-3)) (Assign "a" (Var "y")) (Assign "y" (Binop Less (Var "b") (Binop Minus (Var "y") (Var "z")))),Assign "b" (Binop Or (Var "x") (Var "z")),If (Const 1) (While (Var "y") (Assign "x" (Var "x"))) (If (Binop Or (Const 0) (Var "a")) (If (Var "y") (Assign "a" (Binop And (Binop Equal (Const 0) (Const (-11))) (Var "b"))) (Assign "a" (Const 1))) (Seq [])),Assign "a" (Uminus (Var "b")),Assign "x" (Const 1),Assign "b" (Const 19),If (Const 0) (Assign "y" (Uminus (Var "a"))) (Seq []),If (Uminus (Uminus (Var "a"))) (Assign "b" (Var "a")) (While (Var "y") (Seq [])),Assign "x" (Binop Times (Var "z") (Var "y")),Assign "x" (Binop Plus (Uminus (Const 7)) (Const (-4))),If (Var "z") (Seq [While (Var "y") (Assign "a" (Const 0)),Assign "a" (Binop Times (Var "b") (Var "x"))]) (Assign "b" (Binop And (Uminus (Uminus (Var "y"))) (Const 0))),If (Var "y") (While (Binop Times (Const 0) (Const 22)) (If (Const (-10)) (Seq []) (Seq []))) (If (Binop Plus (Const (-3)) (Var "a")) (Seq []) (Seq [])),Assign "y" (Var "z"),If (Var "z") (While (Binop Or (Const 1) (Var "z")) (Assign "z" (Const 0))) (Assign "y" (Var "z")),Assign "a" (Const 27),If (Uminus (Const 0)) (If (Const 0) (Assign "z" (Uminus (Const 9))) (Assign "y" (Const 21))) (While (Binop Less (Var "b") (Binop Div (Uminus (Const (-27))) (Var "z"))) (If (Binop And (Var "z") (Var "b")) (Assign "b" (Uminus (Binop LessEq (Binop Plus (Uminus (Binop Equal (Var "x") (Var "b"))) (Binop Times (Const (-9)) (Var "b"))) (Var "y")))) (If (Var "a") (Seq []) (Seq []))))]
 was printed as
*******************
{ if -26 then a = x else x = 1 ; z = y ; if -3 then a = y else y = b < y - z ; b = x || z ; if 1 then while y do x = x else if 0 || a then if y then a = 0 == -11 && b else a = 1 else { } ; a = - b ; x = 1 ; b = 19 ; if 0 then y = - a else { } ; if - ( - a ) then b = a else while y do { } ; x = z * y ; x = - ( 7 ) + -4 ; if z then { while y do a = 0 ; a = b * x } else b = - ( - y ) && 0 ; if y then while 0 * 22 do if -10 then { } else { } else if -3 + a then { } else { } ; y = z ; if z then while 1 || z do z = 0 else y = z ; a = 27 ; if - ( 0 ) then if 0 then z = - ( 9 ) else y = 21 else while b < - ( -27 ) / z do if z && b then b = - ( - ( x == b ) + -9 * b <= y ) else if a then { } else { } }

*******************
but expected
*******************
{
  if -26 then
    a = x
  else
    x = 1 ;
  z = y ;
  if -3 then
    a = y
  else
    y = b < y - z ;
  b = x || z ;
  if 1 then
    while y do
      x = x
  else if 0 || a then
    if y then
      a = 0 == -11 && b
    else
      a = 1
  else { } ;
  a = - b ;
  x = 1 ;
  b = 19 ;
  if 0 then
    y = - a
  else { } ;
  if - ( - a ) then
    b = a
  else
    while y do { } ;
  x = z * y ;
  x = - ( 7 ) + -4 ;
  if z then {
    while y do
      a = 0 ;
    a = b * x
  } else
    b = - ( - y ) && 0 ;
  if y then
    while 0 * 22 do
      if -10 then { } else { }
  else if -3 + a then { } else { } ;
  y = z ;
  if z then
    while 1 || z do
      z = 0
  else
    y = z ;
  a = 27 ;
  if - ( 0 ) then
    if 0 then
      z = - ( 9 )
    else
      y = 21
  else
    while b < - ( -27 ) / z do
      if z && b then
        b = - ( - ( x == b ) + -9 * b <= y )
      else if a then { } else { }
}

*******************

AST
Seq [Assign "y" (Uminus (Var "a")),Assign "y" (Const 1),Assign "y" (Binop Or (Const 0) (Uminus (Var "y"))),While (Uminus (Var "a")) (If (Var "b") (If (Var "z") (Assign "y" (Binop Less (Uminus (Binop Div (Var "a") (Const (-9)))) (Binop Equal (Const 0) (Const 0)))) (Assign "x" (Binop Equal (Const 0) (Binop Minus (Var "y") (Binop Div (Uminus (Const 23)) (Var "z")))))) (Assign "y" (Var "z"))),If (Const 0) (Assign "a" (Const 1)) (Assign "a" (Var "y")),If (Binop Minus (Binop Times (Const 16) (Var "x")) (Var "x")) (Seq []) (Assign "x" (Binop Equal (Var "y") (Uminus (Var "a"))))]
 was printed as
*******************
{ y = - a ; y = 1 ; y = 0 || - y ; while - a do if b then if z then y = - ( a / -9 ) < ( 0 == 0 ) else x = 0 == y - - ( 23 ) / z else y = z ; if 0 then a = 1 else a = y ; if 16 * x - x then { } else x = y == - a }

*******************
but expected
*******************
{
  y = - a ;
  y = 1 ;
  y = 0 || - y ;
  while - a do
    if b then
      if z then
        y = - ( a / -9 ) < ( 0 == 0 )
      else
        x = 0 == y - - ( 23 ) / z
    else
      y = z ;
  if 0 then
    a = 1
  else
    a = y ;
  if 16 * x - x then { } else
    x = y == - a
}

*******************

AST
If (Var "x") (Seq [Assign "z" (Var "b")]) (Assign "x" (Binop And (Const 0) (Const 22)))
 was printed as
*******************
if x then { z = b } else x = 0 && 22

*******************
but expected
*******************
if x then {
  z = b
} else
  x = 0 && 22

*******************

AST
While (Const 1) (Assign "z" (Var "x"))
 was printed as
*******************
while 1 do z = x

*******************
but expected
*******************
while 1 do
  z = x

*******************

AST
Seq [If (Binop Times (Binop Or (Var "b") (Binop Plus (Const (-7)) (Binop Div (Const (-7)) (Const 0)))) (Const 0)) (Assign "a" (Const 1)) (Assign "b" (Const 1)),Assign "a" (Const 0),Assign "b" (Const (-3)),If (Var "x") (If (Var "b") (Assign "a" (Binop Minus (Uminus (Binop And (Const 1) (Binop Times (Const 1) (Binop Plus (Var "y") (Var "y"))))) (Binop Minus (Var "y") (Binop Div (Const 10) (Var "b"))))) (While (Var "z") (Seq []))) (Seq [Assign "x" (Const 28),Assign "z" (Uminus (Binop Or (Const 0) (Binop Equal (Binop Plus (Binop Times (Const 27) (Const 0)) (Const (-3))) (Var "x"))))]),Assign "x" (Binop Minus (Binop Times (Uminus (Binop Times (Const (-22)) (Const 0))) (Const 1)) (Binop Less (Binop Equal (Uminus (Uminus (Var "y"))) (Const 25)) (Const 0))),If (Const 14) (If (Uminus (Const 1)) (Assign "x" (Binop Or (Var "y") (Var "x"))) (Seq [Assign "y" (Const 7)])) (Assign "x" (Const (-19))),If (Const (-30)) (Assign "b" (Const 1)) (Assign "b" (Var "b")),If (Uminus (Binop Times (Binop LessEq (Var "y") (Binop Times (Binop Minus (Var "x") (Const (-28))) (Binop Less (Var "b") (Var "b")))) (Const 1))) (Seq [Assign "z" (Const 5),While (Binop Or (Var "y") (Const 0)) (Seq [])]) (Assign "b" (Var "b")),Assign "a" (Binop Minus (Uminus (Const 1)) (Const 0)),If (Var "x") (If (Var "y") (Seq []) (Seq [])) (Seq []),Assign "y" (Binop Div (Binop And (Uminus (Const 20)) (Const 10)) (Const 1)),Assign "a" (Binop LessEq (Const 0) (Var "x")),Assign "x" (Const 29),If (Var "a") (If (Var "z") (Assign "x" (Binop And (Binop Equal (Binop Plus (Binop LessEq (Var "x") (Var "z")) (Binop Div (Const (-28)) (Binop Equal (Var "z") (Const 1)))) (Const (-19))) (Const 0))) (Seq [])) (Assign "a" (Var "y")),Assign "y" (Const 1),Assign "x" (Var "z"),Assign "b" (Uminus (Const (-19))),Assign "x" (Const 1),Assign "z" (Binop Minus (Var "b") (Binop Div (Var "x") (Var "x"))),Assign "a" (Binop Times (Var "x") (Const 0))]
 was printed as
*******************
{ if ( b || -7 + -7 / 0 ) * 0 then a = 1 else b = 1 ; a = 0 ; b = -3 ; if x then if b then a = - ( 1 && 1 * ( y + y ) ) - ( y -10 / b ) else while z do { } else { x = 28 ; z = - ( 0 || 27 * 0 + -3 == x ) } ; x = - ( -22 * 0 ) * 1 - ( - ( - y ) == 25 < 0 ) ; if 14 then if - ( 1 ) then x = y || x else { y = 7 } else x = -19 ; if -30 then b = 1 else b = b ; if - ( ( y <= ( x - -28 ) * ( b < b ) ) * 1 ) then { z = 5 ; while y || 0 do { } } else b = b ; a = - ( 1 ) -0 ; if x then if y then { } else { } else { } ; y = ( - ( 20 ) && 10 ) / 1 ; a = 0 <= x ; x = 29 ; if a then if z then x = ( x <= z ) + -28 / ( z == 1 ) == -19 && 0 else { } else a = y ; y = 1 ; x = z ; b = - ( -19 ) ; x = 1 ; z = b - x / x ; a = x * 0 }

*******************
but expected
*******************
{
  if ( b || -7 + -7 / 0 ) * 0 then
    a = 1
  else
    b = 1 ;
  a = 0 ;
  b = -3 ;
  if x then
    if b then
      a = - ( 1 && 1 * ( y + y ) ) - ( y -10 / b )
    else
      while z do { }
  else {
    x = 28 ;
    z = - ( 0 || 27 * 0 + -3 == x )
  } ;
  x = - ( -22 * 0 ) * 1 - ( - ( - y ) == 25 < 0 ) ;
  if 14 then
    if - ( 1 ) then
      x = y || x
    else {
      y = 7
    }
  else
    x = -19 ;
  if -30 then
    b = 1
  else
    b = b ;
  if - ( ( y <= ( x - -28 ) * ( b < b ) ) * 1 ) then {
    z = 5 ;
    while y || 0 do { }
  } else
    b = b ;
  a = - ( 1 ) -0 ;
  if x then
    if y then { } else { }
  else { } ;
  y = ( - ( 20 ) && 10 ) / 1 ;
  a = 0 <= x ;
  x = 29 ;
  if a then
    if z then
      x = ( x <= z ) + -28 / ( z == 1 ) == -19 && 0
    else { }
  else
    a = y ;
  y = 1 ;
  x = z ;
  b = - ( -19 ) ;
  x = 1 ;
  z = b - x / x ;
  a = x * 0
}

*******************

AST
Seq [If (Var "a") (Assign "b" (Var "z")) (Assign "z" (Var "z")),If (Binop Plus (Var "a") (Var "y")) (If (Var "a") (Assign "b" (Var "b")) (Assign "z" (Var "z"))) (Assign "b" (Var "z")),While (Var "x") (Assign "a" (Const 0)),While (Const 1) (Assign "b" (Const (-2))),If (Binop Minus (Var "b") (Uminus (Var "a"))) (Assign "y" (Var "z")) (Seq []),Assign "x" (Const 0),While (Const (-2)) (Assign "a" (Const (-3))),If (Var "x") (Assign "a" (Const 0)) (While (Uminus (Const 1)) (While (Var "y") (Seq []))),Assign "z" (Var "b"),Assign "b" (Uminus (Const 1)),Assign "z" (Const 1),Assign "z" (Binop Less (Var "z") (Const 1)),Assign "x" (Var "a"),Assign "a" (Binop And (Var "a") (Const 0)),Assign "x" (Const 1),If (Var "b") (Assign "y" (Binop And (Const 0) (Var "a"))) (While (Var "x") (Assign "x" (Const 0)))]
 was printed as
*******************
{ if a then b = z else z = z ; if a + y then if a then b = b else z = z else b = z ; while x do a = 0 ; while 1 do b = -2 ; if b - - a then y = z else { } ; x = 0 ; while -2 do a = -3 ; if x then a = 0 else while - ( 1 ) do while y do { } ; z = b ; b = - ( 1 ) ; z = 1 ; z = z < 1 ; x = a ; a = a && 0 ; x = 1 ; if b then y = 0 && a else while x do x = 0 }

*******************
but expected
*******************
{
  if a then
    b = z
  else
    z = z ;
  if a + y then
    if a then
      b = b
    else
      z = z
  else
    b = z ;
  while x do
    a = 0 ;
  while 1 do
    b = -2 ;
  if b - - a then
    y = z
  else { } ;
  x = 0 ;
  while -2 do
    a = -3 ;
  if x then
    a = 0
  else
    while - ( 1 ) do
      while y do { } ;
  z = b ;
  b = - ( 1 ) ;
  z = 1 ;
  z = z < 1 ;
  x = a ;
  a = a && 0 ;
  x = 1 ;
  if b then
    y = 0 && a
  else
    while x do
      x = 0
}

*******************

AST
While (Const 18) (If (Binop Equal (Binop Less (Var "a") (Var "z")) (Binop Minus (Var "y") (Const (-11)))) (Seq []) (Seq [Assign "b" (Binop Plus (Uminus (Const (-22))) (Uminus (Binop Less (Binop Or (Const 0) (Var "z")) (Binop Equal (Binop LessEq (Const 0) (Const 0)) (Var "b"))))),Assign "y" (Var "z")]))
 was printed as
*******************
while 18 do if a < z == y - -11 then { } else { b = - ( -22 ) + - ( ( 0 || z ) < ( 0 <= 0 == b ) ) ; y = z }

*******************
but expected
*******************
while 18 do
  if a < z == y - -11 then { } else {
    b = - ( -22 ) + - ( ( 0 || z ) < ( 0 <= 0 == b ) ) ;
    y = z
  }

*******************

AST
Seq [Assign "z" (Const 0),Assign "x" (Binop Minus (Uminus (Var "a")) (Var "z")),While (Var "x") (Assign "a" (Uminus (Uminus (Const (-21))))),Assign "b" (Binop Times (Binop LessEq (Binop Less (Var "a") (Uminus (Var "x"))) (Const 1)) (Uminus (Const 0))),If (Const (-5)) (Seq []) (Assign "x" (Binop Times (Uminus (Binop Or (Binop Less (Binop Less (Const 0) (Const 1)) (Var "b")) (Const 1))) (Var "a"))),Assign "x" (Binop Times (Const 1) (Binop And (Var "b") (Var "x"))),Assign "y" (Const 1),Assign "a" (Var "b"),If (Const 1) (Assign "x" (Var "b")) (If (Uminus (Const 0)) (Assign "a" (Binop Minus (Var "b") (Uminus (Var "x")))) (Assign "x" (Const 1))),Assign "y" (Binop LessEq (Var "a") (Uminus (Binop Times (Var "b") (Var "z")))),Assign "a" (Binop Less (Const 1) (Const 0)),Assign "a" (Binop Div (Binop And (Const 1) (Var "x")) (Const 0)),Assign "a" (Uminus (Var "x")),Assign "z" (Const 1)]
 was printed as
*******************
{ z = 0 ; x = - a - z ; while x do a = - ( - ( -21 ) ) ; b = ( a < - x <= 1 ) * - ( 0 ) ; if -5 then { } else x = - ( 0 < 1 < b || 1 ) * a ; x = 1 * ( b && x ) ; y = 1 ; a = b ; if 1 then x = b else if - ( 0 ) then a = b - - x else x = 1 ; y = a <= - ( b * z ) ; a = 1 < 0 ; a = ( 1 && x ) / 0 ; a = - x ; z = 1 }

*******************
but expected
*******************
{
  z = 0 ;
  x = - a - z ;
  while x do
    a = - ( - ( -21 ) ) ;
  b = ( a < - x <= 1 ) * - ( 0 ) ;
  if -5 then { } else
    x = - ( 0 < 1 < b || 1 ) * a ;
  x = 1 * ( b && x ) ;
  y = 1 ;
  a = b ;
  if 1 then
    x = b
  else if - ( 0 ) then
    a = b - - x
  else
    x = 1 ;
  y = a <= - ( b * z ) ;
  a = 1 < 0 ;
  a = ( 1 && x ) / 0 ;
  a = - x ;
  z = 1
}

*******************

AST
If (Const 30) (Assign "y" (Uminus (Var "x"))) (Assign "z" (Const (-3)))
 was printed as
*******************
if 30 then y = - x else z = -3

*******************
but expected
*******************
if 30 then
  y = - x
else
  z = -3

*******************

AST
Seq [If (Uminus (Var "a")) (Assign "b" (Const 7)) (Assign "a" (Const 0)),If (Binop Div (Var "x") (Uminus (Binop And (Const 1) (Var "a")))) (Seq []) (If (Var "y") (Assign "z" (Var "x")) (If (Binop Div (Const (-28)) (Binop Equal (Var "x") (Uminus (Const (-17))))) (Assign "z" (Const 0)) (Seq []))),Assign "x" (Const 0),Assign "a" (Binop Div (Uminus (Var "b")) (Binop LessEq (Binop Minus (Binop And (Const (-26)) (Binop Plus (Const 0) (Const 29))) (Var "a")) (Const 2))),Assign "y" (Const 8),Assign "b" (Uminus (Var "b")),Assign "a" (Binop Div (Var "b") (Uminus (Binop And (Var "x") (Var "b")))),Assign "x" (Binop And (Var "a") (Var "a")),If (Const (-8)) (Assign "b" (Uminus (Const 8))) (Assign "y" (Var "a")),Assign "y" (Binop Times (Const 17) (Binop LessEq (Binop Equal (Var "z") (Uminus (Var "y"))) (Uminus (Uminus (Uminus (Const 1)))))),Assign "x" (Binop And (Var "z") (Var "x")),Assign "z" (Binop Minus (Binop Equal (Const 1) (Binop And (Binop Less (Binop Plus (Var "b") (Var "b")) (Binop And (Var "y") (Const (-24)))) (Var "y"))) (Var "b")),Assign "b" (Const 1),Assign "y" (Const 1),Assign "b" (Var "b"),Assign "x" (Var "b"),Assign "x" (Uminus (Binop Times (Const 22) (Const 0))),If (Const 24) (Assign "z" (Binop Div (Const 0) (Const 0))) (If (Const 0) (Seq []) (Seq [])),Assign "z" (Var "b"),Assign "y" (Binop Equal (Binop Plus (Uminus (Const 1)) (Binop Plus (Var "z") (Binop Equal (Uminus (Var "y")) (Uminus (Const 1))))) (Var "b")),Assign "b" (Uminus (Binop Div (Const 1) (Const 5)))]
 was printed as
*******************
{ if - a then b = 7 else a = 0 ; if x / - ( 1 && a ) then { } else if y then z = x else if -28 / ( x == - ( -17 ) ) then z = 0 else { } ; x = 0 ; a = - b / ( ( -26 && 0 + 29 ) - a <= 2 ) ; y = 8 ; b = - b ; a = b / - ( x && b ) ; x = a && a ; if -8 then b = - ( 8 ) else y = a ; y = 17 * ( z == - y <= - ( - ( - ( 1 ) ) ) ) ; x = z && x ; z = ( 1 == ( b + b < ( y && -24 ) && y ) ) - b ; b = 1 ; y = 1 ; b = b ; x = b ; x = - ( 22 * 0 ) ; if 24 then z = 0 / 0 else if 0 then { } else { } ; z = b ; y = - ( 1 ) + ( z + ( - y == - ( 1 ) ) ) == b ; b = - ( 1 / 5 ) }

*******************
but expected
*******************
{
  if - a then
    b = 7
  else
    a = 0 ;
  if x / - ( 1 && a ) then { } else if y then
    z = x
  else if -28 / ( x == - ( -17 ) ) then
    z = 0
  else { } ;
  x = 0 ;
  a = - b / ( ( -26 && 0 + 29 ) - a <= 2 ) ;
  y = 8 ;
  b = - b ;
  a = b / - ( x && b ) ;
  x = a && a ;
  if -8 then
    b = - ( 8 )
  else
    y = a ;
  y = 17 * ( z == - y <= - ( - ( - ( 1 ) ) ) ) ;
  x = z && x ;
  z = ( 1 == ( b + b < ( y && -24 ) && y ) ) - b ;
  b = 1 ;
  y = 1 ;
  b = b ;
  x = b ;
  x = - ( 22 * 0 ) ;
  if 24 then
    z = 0 / 0
  else if 0 then { } else { } ;
  z = b ;
  y = - ( 1 ) + ( z + ( - y == - ( 1 ) ) ) == b ;
  b = - ( 1 / 5 )
}

*******************

AST
Seq [While (Uminus (Binop Or (Uminus (Var "y")) (Var "b"))) (Assign "z" (Const 0))]
 was printed as
*******************
{ while - ( - y || b ) do z = 0 }

*******************
but expected
*******************
{
  while - ( - y || b ) do
    z = 0
}

*******************

AST
If (Var "y") (Seq [While (Const 1) (Seq []),Assign "x" (Var "y"),Assign "z" (Var "b"),If (Binop Or (Const 1) (Var "b")) (Seq [If (Binop And (Binop Minus (Const 0) (Uminus (Const 1))) (Var "b")) (Seq []) (Seq [])]) (Assign "b" (Const 1)),Assign "a" (Var "b"),Assign "b" (Const 23),While (Const 0) (Seq []),While (Binop Div (Const 1) (Binop Times (Binop Or (Var "z") (Var "a")) (Var "y"))) (Seq []),Assign "a" (Var "a"),If (Var "y") (While (Const 25) (Seq [])) (Seq []),If (Var "b") (Assign "z" (Var "x")) (Seq [])]) (While (Var "b") (Assign "y" (Var "x")))
 was printed as
*******************
if y then { while 1 do { } ; x = y ; z = b ; if 1 || b then { if 0 - - ( 1 ) && b then { } else { } } else b = 1 ; a = b ; b = 23 ; while 0 do { } ; while 1 / ( ( z || a ) * y ) do { } ; a = a ; if y then while 25 do { } else { } ; if b then z = x else { } } else while b do y = x

*******************
but expected
*******************
if y then {
  while 1 do { } ;
  x = y ;
  z = b ;
  if 1 || b then {
    if 0 - - ( 1 ) && b then { } else { }
  } else
    b = 1 ;
  a = b ;
  b = 23 ;
  while 0 do { } ;
  while 1 / ( ( z || a ) * y ) do { } ;
  a = a ;
  if y then
    while 25 do { }
  else { } ;
  if b then
    z = x
  else { }
} else
  while b do
    y = x

*******************

AST
Seq [While (Var "z") (Assign "y" (Uminus (Uminus (Binop Equal (Var "a") (Const 1))))),Assign "b" (Const 1),Assign "a" (Uminus (Binop Minus (Binop Times (Uminus (Binop And (Const 1) (Var "y"))) (Var "y")) (Const (-24)))),Assign "b" (Var "y"),While (Binop LessEq (Var "x") (Binop Times (Binop Times (Binop And (Uminus (Const 1)) (Const 1)) (Var "x")) (Const (-22)))) (While (Uminus (Var "y")) (Assign "z" (Const 0))),If (Var "z") (Assign "z" (Binop Equal (Binop LessEq (Binop Times (Binop Times (Binop Equal (Const (-17)) (Var "x")) (Const (-17))) (Binop Equal (Binop LessEq (Const 1) (Var "z")) (Var "x"))) (Var "a")) (Var "b"))) (If (Var "x") (Assign "b" (Var "z")) (Assign "b" (Var "a"))),If (Const 1) (If (Binop Times (Const 15) (Const 0)) (Assign "y" (Binop Minus (Const 3) (Uminus (Var "z")))) (While (Const 0) (If (Binop Times (Binop Equal (Binop Minus (Binop Equal (Uminus (Const 1)) (Binop Div (Var "b") (Var "a"))) (Const 1)) (Binop Minus (Const 0) (Var "x"))) (Var "y")) (Seq []) (Seq [])))) (Assign "z" (Const 0)),While (Binop Or (Binop Or (Const 3) (Var "x")) (Uminus (Const 0))) (Seq []),If (Const (-8)) (Assign "a" (Const 5)) (Assign "y" (Binop Or (Binop Minus (Const 1) (Var "b")) (Const 1))),If (Binop LessEq (Binop Equal (Var "x") (Const 7)) (Uminus (Const (-18)))) (Assign "y" (Var "z")) (If (Uminus (Var "z")) (Seq [Assign "a" (Binop Equal (Uminus (Const 0)) (Uminus (Var "z")))]) (Assign "z" (Binop Equal (Uminus (Const 1)) (Const 1)))),Assign "z" (Const 0),Assign "z" (Const 1),Assign "x" (Uminus (Var "a")),Assign "z" (Const 0),Assign "x" (Const 1),Assign "y" (Const 1),Assign "z" (Const 25),While (Var "b") (Assign "b" (Uminus (Binop Times (Var "x") (Const (-25))))),If (Binop Or (Uminus (Binop Equal (Uminus (Uminus (Var "z"))) (Const 1))) (Const (-11))) (Assign "b" (Var "y")) (If (Uminus (Const 0)) (Assign "b" (Uminus (Var "b"))) (Seq [])),Assign "z" (Const 0),While (Uminus (Binop Minus (Const (-5)) (Const 1))) (Seq []),If (Var "y") (Assign "y" (Var "a")) (Assign "a" (Const 1)),While (Const 0) (Assign "x" (Binop Equal (Var "z") (Var "a"))),Assign "y" (Binop Or (Const 1) (Binop Times (Const 1) (Var "x"))),Assign "y" (Binop Plus (Uminus (Binop Minus (Binop LessEq (Binop Minus (Var "b") (Const 1)) (Binop LessEq (Var "x") (Const 1))) (Binop Times (Var "x") (Uminus (Var "a"))))) (Var "x")),Assign "z" (Binop Less (Const 22) (Var "x")),While (Const 0) (If (Binop Div (Uminus (Uminus (Const 17))) (Const 0)) (Assign "z" (Uminus (Binop LessEq (Binop And (Binop Less (Binop Minus (Const 0) (Const 0)) (Binop Or (Var "b") (Const 0))) (Const 0)) (Var "a")))) (Seq [])),While (Binop Div (Var "a") (Var "b")) (Seq [])]
 was printed as
*******************
{ while z do y = - ( - ( a == 1 ) ) ; b = 1 ; a = - ( - ( 1 && y ) * y - -24 ) ; b = y ; while x <= ( - ( 1 ) && 1 ) * x * -22 do while - y do z = 0 ; if z then z = ( -17 == x ) * -17 * ( 1 <= z == x ) <= a == b else if x then b = z else b = a ; if 1 then if 15 * 0 then y = 3 - - z else while 0 do if ( ( - ( 1 ) == b / a ) -1 == 0 - x ) * y then { } else { } else z = 0 ; while 3 || x || - ( 0 ) do { } ; if -8 then a = 5 else y = 1 - b || 1 ; if x == 7 <= - ( -18 ) then y = z else if - z then { a = - ( 0 ) == - z } else z = - ( 1 ) == 1 ; z = 0 ; z = 1 ; x = - a ; z = 0 ; x = 1 ; y = 1 ; z = 25 ; while b do b = - ( x * -25 ) ; if - ( - ( - z ) == 1 ) || -11 then b = y else if - ( 0 ) then b = - b else { } ; z = 0 ; while - ( -5 -1 ) do { } ; if y then y = a else a = 1 ; while 0 do x = z == a ; y = 1 || 1 * x ; y = - ( ( b -1 <= ( x <= 1 ) ) - x * - a ) + x ; z = 22 < x ; while 0 do if - ( - ( 17 ) ) / 0 then z = - ( ( 0 -0 < ( b || 0 ) && 0 ) <= a ) else { } ; while a / b do { } }

*******************
but expected
*******************
{
  while z do
    y = - ( - ( a == 1 ) ) ;
  b = 1 ;
  a = - ( - ( 1 && y ) * y - -24 ) ;
  b = y ;
  while x <= ( - ( 1 ) && 1 ) * x * -22 do
    while - y do
      z = 0 ;
  if z then
    z = ( -17 == x ) * -17 * ( 1 <= z == x ) <= a == b
  else if x then
    b = z
  else
    b = a ;
  if 1 then
    if 15 * 0 then
      y = 3 - - z
    else
      while 0 do
        if ( ( - ( 1 ) == b / a ) -1 == 0 - x ) * y then { } else { }
  else
    z = 0 ;
  while 3 || x || - ( 0 ) do { } ;
  if -8 then
    a = 5
  else
    y = 1 - b || 1 ;
  if x == 7 <= - ( -18 ) then
    y = z
  else if - z then {
    a = - ( 0 ) == - z
  } else
    z = - ( 1 ) == 1 ;
  z = 0 ;
  z = 1 ;
  x = - a ;
  z = 0 ;
  x = 1 ;
  y = 1 ;
  z = 25 ;
  while b do
    b = - ( x * -25 ) ;
  if - ( - ( - z ) == 1 ) || -11 then
    b = y
  else if - ( 0 ) then
    b = - b
  else { } ;
  z = 0 ;
  while - ( -5 -1 ) do { } ;
  if y then
    y = a
  else
    a = 1 ;
  while 0 do
    x = z == a ;
  y = 1 || 1 * x ;
  y = - ( ( b -1 <= ( x <= 1 ) ) - x * - a ) + x ;
  z = 22 < x ;
  while 0 do
    if - ( - ( 17 ) ) / 0 then
      z = - ( ( 0 -0 < ( b || 0 ) && 0 ) <= a )
    else { } ;
  while a / b do { }
}

*******************

AST
Seq [While (Const 14) (Assign "x" (Const 28)),Assign "b" (Const 1),Assign "b" (Binop And (Const (-13)) (Uminus (Var "y"))),Assign "z" (Binop Or (Binop Minus (Var "a") (Var "y")) (Const 1)),Assign "y" (Var "a"),If (Binop Div (Var "y") (Const 1)) (Seq []) (Assign "y" (Var "a")),Assign "y" (Const 13)]
 was printed as
*******************
{ while 14 do x = 28 ; b = 1 ; b = -13 && - y ; z = a - y || 1 ; y = a ; if y / 1 then { } else y = a ; y = 13 }

*******************
but expected
*******************
{
  while 14 do
    x = 28 ;
  b = 1 ;
  b = -13 && - y ;
  z = a - y || 1 ;
  y = a ;
  if y / 1 then { } else
    y = a ;
  y = 13
}

*******************

AST
Seq [While (Var "x") (Seq [If (Var "y") (Seq []) (Seq [])]),If (Var "y") (Assign "z" (Var "x")) (Seq []),Assign "a" (Uminus (Binop And (Const 1) (Binop Times (Binop Equal (Var "b") (Const 1)) (Const 14))))]
 was printed as
*******************
{ while x do { if y then { } else { } } ; if y then z = x else { } ; a = - ( 1 && ( b == 1 ) * 14 ) }

*******************
but expected
*******************
{
  while x do {
    if y then { } else { }
  } ;
  if y then
    z = x
  else { } ;
  a = - ( 1 && ( b == 1 ) * 14 )
}

*******************

AST
If (Const 1) (While (Var "x") (Seq [If (Uminus (Uminus (Var "y"))) (Seq []) (Assign "x" (Var "a")),While (Uminus (Const 0)) (While (Binop Times (Binop Less (Const 0) (Uminus (Const 1))) (Uminus (Const 0))) (Seq [])),If (Binop And (Binop Plus (Binop Div (Var "y") (Var "z")) (Const 4)) (Var "a")) (Seq []) (Seq [])])) (If (Const 0) (If (Var "y") (Seq [While (Uminus (Var "z")) (Seq [])]) (Seq [Assign "y" (Binop Or (Const 0) (Var "b"))])) (If (Binop Equal (Var "z") (Const 0)) (Assign "z" (Const 0)) (If (Const 13) (Assign "b" (Var "b")) (Assign "z" (Const 0)))))
 was printed as
*******************
if 1 then while x do { if - ( - y ) then { } else x = a ; while - ( 0 ) do while ( 0 < - ( 1 ) ) * - ( 0 ) do { } ; if y / z + 4 && a then { } else { } } else if 0 then if y then { while - z do { } } else { y = 0 || b } else if z == 0 then z = 0 else if 13 then b = b else z = 0

*******************
but expected
*******************
if 1 then
  while x do {
    if - ( - y ) then { } else
      x = a ;
    while - ( 0 ) do
      while ( 0 < - ( 1 ) ) * - ( 0 ) do { } ;
    if y / z + 4 && a then { } else { }
  }
else if 0 then
  if y then {
    while - z do { }
  } else {
    y = 0 || b
  }
else if z == 0 then
  z = 0
else if 13 then
  b = b
else
  z = 0

*******************

AST
Seq [If (Var "z") (Assign "a" (Binop Less (Binop LessEq (Binop Less (Var "a") (Var "y")) (Const 1)) (Var "x"))) (While (Const 1) (Assign "b" (Var "a"))),If (Uminus (Var "a")) (Seq []) (Assign "z" (Var "y")),If (Var "y") (Assign "y" (Const 0)) (Seq []),While (Var "a") (Assign "y" (Binop Plus (Var "a") (Var "z"))),Assign "y" (Const (-28)),Assign "y" (Var "z"),Assign "a" (Binop Minus (Uminus (Binop Times (Binop Plus (Var "a") (Var "z")) (Var "z"))) (Var "b")),Assign "a" (Const 0),Assign "a" (Binop Plus (Binop Div (Var "b") (Const 1)) (Var "y")),If (Binop Or (Binop Or (Const 1) (Uminus (Const 1))) (Binop Or (Binop Plus (Binop Equal (Uminus (Var "x")) (Binop Div (Var "z") (Const 17))) (Const (-11))) (Const 1))) (Assign "z" (Binop Times (Var "x") (Const 1))) (Assign "b" (Binop And (Const 1) (Const 0))),Assign "z" (Binop Times (Var "x") (Var "x")),Assign "z" (Const 1),Assign "a" (Var "b"),If (Const 1) (Seq [Assign "b" (Binop LessEq (Binop Equal (Const 4) (Const 0)) (Var "a")),Assign "y" (Binop And (Var "a") (Const 0))]) (Seq [Assign "b" (Binop And (Const (-14)) (Var "y")),Assign "x" (Binop Minus (Const (-1)) (Uminus (Binop Less (Uminus (Binop Or (Const 5) (Const 1))) (Binop And (Const (-17)) (Binop Div (Const 0) (Const 0))))))]),Assign "y" (Const 1),Assign "y" (Const (-30)),Assign "b" (Const (-26)),Assign "b" (Var "b"),Assign "z" (Var "y")]
 was printed as
*******************
{ if z then a = a < y <= 1 < x else while 1 do b = a ; if - a then { } else z = y ; if y then y = 0 else { } ; while a do y = a + z ; y = -28 ; y = z ; a = - ( ( a + z ) * z ) - b ; a = 0 ; a = b / 1 + y ; if 1 || - ( 1 ) || ( ( - x == z / 17 ) + -11 || 1 ) then z = x * 1 else b = 1 && 0 ; z = x * x ; z = 1 ; a = b ; if 1 then { b = 4 == 0 <= a ; y = a && 0 } else { b = -14 && y ; x = -1 - - ( - ( 5 || 1 ) < ( -17 && 0 / 0 ) ) } ; y = 1 ; y = -30 ; b = -26 ; b = b ; z = y }

*******************
but expected
*******************
{
  if z then
    a = a < y <= 1 < x
  else
    while 1 do
      b = a ;
  if - a then { } else
    z = y ;
  if y then
    y = 0
  else { } ;
  while a do
    y = a + z ;
  y = -28 ;
  y = z ;
  a = - ( ( a + z ) * z ) - b ;
  a = 0 ;
  a = b / 1 + y ;
  if 1 || - ( 1 ) || ( ( - x == z / 17 ) + -11 || 1 ) then
    z = x * 1
  else
    b = 1 && 0 ;
  z = x * x ;
  z = 1 ;
  a = b ;
  if 1 then {
    b = 4 == 0 <= a ;
    y = a && 0
  } else {
    b = -14 && y ;
    x = -1 - - ( - ( 5 || 1 ) < ( -17 && 0 / 0 ) )
  } ;
  y = 1 ;
  y = -30 ;
  b = -26 ;
  b = b ;
  z = y
}

*******************

AST
Seq [Assign "x" (Const 12),Assign "x" (Const 1),Assign "x" (Const 1)]
 was printed as
*******************
{ x = 12 ; x = 1 ; x = 1 }

*******************
but expected
*******************
{
  x = 12 ;
  x = 1 ;
  x = 1
}

*******************

AST
While (Var "x") (Assign "y" (Binop Plus (Const 0) (Const 29)))
 was printed as
*******************
while x do y = 0 + 29

*******************
but expected
*******************
while x do
  y = 0 + 29

*******************

AST
If (Const 1) (If (Const 1) (Assign "a" (Binop LessEq (Const 0) (Var "x"))) (Seq [If (Binop LessEq (Const 0) (Binop LessEq (Binop Minus (Var "x") (Const 1)) (Binop Equal (Binop Or (Const (-21)) (Var "z")) (Const 1)))) (Assign "y" (Const (-20))) (While (Const 3) (Seq []))])) (Seq [Assign "z" (Binop Equal (Uminus (Binop Less (Var "b") (Const 1))) (Binop Times (Uminus (Binop Times (Const (-11)) (Const (-17)))) (Var "y"))),If (Uminus (Uminus (Var "a"))) (Seq []) (Seq [])])
 was printed as
*******************
if 1 then if 1 then a = 0 <= x else { if 0 <= ( x -1 <= ( ( -21 || z ) == 1 ) ) then y = -20 else while 3 do { } } else { z = - ( b < 1 ) == - ( -11 * -17 ) * y ; if - ( - a ) then { } else { } }

*******************
but expected
*******************
if 1 then
  if 1 then
    a = 0 <= x
  else {
    if 0 <= ( x -1 <= ( ( -21 || z ) == 1 ) ) then
      y = -20
    else
      while 3 do { }
  }
else {
  z = - ( b < 1 ) == - ( -11 * -17 ) * y ;
  if - ( - a ) then { } else { }
}

*******************

AST
Seq [Assign "y" (Const 0),Assign "a" (Const 14),Assign "a" (Var "y")]
 was printed as
*******************
{ y = 0 ; a = 14 ; a = y }

*******************
but expected
*******************
{
  y = 0 ;
  a = 14 ;
  a = y
}

*******************

AST
If (Binop Times (Var "x") (Const 1)) (Assign "a" (Const (-21))) (Seq [])
 was printed as
*******************
if x * 1 then a = -21 else { }

*******************
but expected
*******************
if x * 1 then
  a = -21
else { }

*******************

AST
Seq [Assign "x" (Const 22),Assign "y" (Var "b"),Assign "b" (Binop Div (Var "x") (Var "y")),Assign "x" (Binop Or (Binop Plus (Const 16) (Var "z")) (Const 1)),Assign "a" (Const 0),Assign "b" (Var "y"),Assign "b" (Uminus (Binop Less (Const 0) (Uminus (Binop Times (Const 30) (Const 1))))),Assign "b" (Const 3),If (Const 1) (If (Const 0) (Assign "y" (Uminus (Uminus (Var "y")))) (Assign "a" (Binop Times (Var "b") (Var "y")))) (Assign "a" (Uminus (Const 18))),Assign "z" (Var "y"),Assign "b" (Var "b"),While (Binop Less (Var "z") (Var "z")) (Seq [Assign "z" (Const 1),Assign "b" (Uminus (Const 24)),Assign "x" (Var "a")]),Assign "x" (Binop Plus (Const 0) (Binop Plus (Binop Minus (Uminus (Var "b")) (Const 0)) (Binop Less (Var "a") (Const 0)))),Assign "y" (Const (-4)),Assign "b" (Uminus (Uminus (Const (-19)))),Assign "a" (Var "z"),If (Const 1) (Assign "y" (Const 0)) (Seq []),If (Uminus (Uminus (Uminus (Uminus (Binop Plus (Const 1) (Const 0)))))) (Seq [While (Binop Times (Binop Plus (Const (-3)) (Const 0)) (Var "a")) (Seq [])]) (Assign "a" (Binop Plus (Const 1) (Binop LessEq (Uminus (Binop Minus (Const 0) (Const 0))) (Var "a")))),Assign "b" (Binop Less (Const 0) (Var "a"))]
 was printed as
*******************
{ x = 22 ; y = b ; b = x / y ; x = 16 + z || 1 ; a = 0 ; b = y ; b = - ( 0 < - ( 30 * 1 ) ) ; b = 3 ; if 1 then if 0 then y = - ( - y ) else a = b * y else a = - ( 18 ) ; z = y ; b = b ; while z < z do { z = 1 ; b = - ( 24 ) ; x = a } ; x = 0 + ( - b -0 + ( a < 0 ) ) ; y = -4 ; b = - ( - ( -19 ) ) ; a = z ; if 1 then y = 0 else { } ; if - ( - ( - ( - ( 1 + 0 ) ) ) ) then { while ( -3 + 0 ) * a do { } } else a = 1 + ( - ( 0 -0 ) <= a ) ; b = 0 < a }

*******************
but expected
*******************
{
  x = 22 ;
  y = b ;
  b = x / y ;
  x = 16 + z || 1 ;
  a = 0 ;
  b = y ;
  b = - ( 0 < - ( 30 * 1 ) ) ;
  b = 3 ;
  if 1 then
    if 0 then
      y = - ( - y )
    else
      a = b * y
  else
    a = - ( 18 ) ;
  z = y ;
  b = b ;
  while z < z do {
    z = 1 ;
    b = - ( 24 ) ;
    x = a
  } ;
  x = 0 + ( - b -0 + ( a < 0 ) ) ;
  y = -4 ;
  b = - ( - ( -19 ) ) ;
  a = z ;
  if 1 then
    y = 0
  else { } ;
  if - ( - ( - ( - ( 1 + 0 ) ) ) ) then {
    while ( -3 + 0 ) * a do { }
  } else
    a = 1 + ( - ( 0 -0 ) <= a ) ;
  b = 0 < a
}

*******************

AST
If (Binop Plus (Var "x") (Binop Less (Binop Minus (Binop Div (Const 1) (Var "x")) (Var "y")) (Const 0))) (Assign "b" (Binop And (Uminus (Binop Or (Var "z") (Var "z"))) (Const 0))) (While (Var "y") (Seq [If (Binop Plus (Const 4) (Const 0)) (If (Binop Less (Const 0) (Const 0)) (Seq []) (Seq [])) (If (Var "b") (Seq []) (Seq [])),Assign "z" (Binop LessEq (Uminus (Uminus (Const 0))) (Binop Times (Binop Or (Var "b") (Var "b")) (Uminus (Var "y"))))]))
 was printed as
*******************
if x + ( 1 / x - y < 0 ) then b = - ( z || z ) && 0 else while y do { if 4 + 0 then if 0 < 0 then { } else { } else if b then { } else { } ; z = - ( - ( 0 ) ) <= ( b || b ) * - y }

*******************
but expected
*******************
if x + ( 1 / x - y < 0 ) then
  b = - ( z || z ) && 0
else
  while y do {
    if 4 + 0 then
      if 0 < 0 then { } else { }
    else if b then { } else { } ;
    z = - ( - ( 0 ) ) <= ( b || b ) * - y
  }

*******************

AST
Seq [If (Var "b") (Assign "y" (Uminus (Uminus (Binop Less (Const 0) (Binop Minus (Const 6) (Var "z")))))) (Seq [Assign "a" (Var "z"),Assign "y" (Uminus (Const 0))]),While (Var "b") (Assign "z" (Binop And (Binop Div (Const 1) (Uminus (Var "b"))) (Uminus (Binop Minus (Const 0) (Var "y"))))),Assign "x" (Var "z"),Assign "z" (Binop LessEq (Const 0) (Binop Div (Binop Plus (Var "a") (Binop Div (Const 0) (Const 0))) (Binop Equal (Var "b") (Binop Div (Var "a") (Binop Times (Var "b") (Var "b")))))),If (Uminus (Binop Less (Var "z") (Binop LessEq (Binop Times (Const 2) (Var "x")) (Binop Or (Var "y") (Var "a"))))) (Assign "z" (Var "b")) (Assign "b" (Uminus (Binop Less (Const 0) (Uminus (Var "b"))))),Assign "y" (Binop Equal (Binop Times (Binop LessEq (Var "a") (Binop And (Binop Div (Var "x") (Var "y")) (Var "a"))) (Binop LessEq (Var "y") (Var "y"))) (Uminus (Const (-25)))),Assign "a" (Binop Equal (Var "x") (Const 0)),Assign "x" (Const (-1)),While (Binop Minus (Const 0) (Var "b")) (Seq []),Assign "x" (Uminus (Binop And (Var "z") (Const 23))),While (Const 0) (Seq []),Assign "b" (Var "z"),If (Binop Minus (Binop Equal (Uminus (Var "y")) (Binop Plus (Binop Plus (Var "a") (Uminus (Const 1))) (Binop Div (Var "z") (Binop Plus (Var "a") (Const 1))))) (Binop Or (Var "y") (Binop Minus (Const 0) (Const 9)))) (If (Binop Minus (Var "y") (Var "y")) (Seq []) (Seq [])) (If (Binop And (Binop Times (Var "a") (Const 0)) (Var "y")) (Seq []) (Seq [])),Assign "y" (Var "x"),Assign "y" (Const 20),If (Binop And (Binop Times (Const 8) (Binop Less (Var "a") (Var "z"))) (Binop Plus (Const 0) (Const 1))) (Assign "b" (Var "x")) (Assign "a" (Const 3)),Assign "x" (Const 1),Assign "a" (Binop Or (Const 0) (Uminus (Binop Or (Uminus (Binop Or (Const 1) (Const 1))) (Const 1)))),Assign "a" (Binop Or (Var "x") (Const 25)),Assign "b" (Var "z"),Assign "x" (Const (-4)),If (Var "x") (Assign "b" (Const 22)) (If (Binop Plus (Binop Equal (Const 0) (Uminus (Const 1))) (Const 1)) (Seq []) (Seq [])),Assign "x" (Binop Times (Var "b") (Var "z")),If (Const (-22)) (Seq []) (Seq []),Assign "x" (Binop LessEq (Uminus (Var "z")) (Uminus (Const 0))),Assign "z" (Binop Or (Uminus (Binop Less (Uminus (Binop Times (Const 11) (Const 0))) (Binop Or (Binop And (Var "x") (Var "x")) (Const 0)))) (Const (-17))),If (Var "a") (Seq [Assign "y" (Binop Or (Const 1) (Var "a"))]) (Assign "z" (Binop Plus (Uminus (Binop LessEq (Var "b") (Var "y"))) (Const 1))),While (Var "a") (Seq []),Assign "x" (Const (-9)),Assign "x" (Binop LessEq (Var "b") (Var "x")),Assign "a" (Var "y"),If (Binop LessEq (Binop Less (Var "z") (Const 18)) (Const 29)) (Assign "x" (Const 8)) (Seq [While (Var "b") (Seq [])]),If (Binop Or (Binop LessEq (Binop Less (Binop Times (Const 0) (Const 0)) (Binop Equal (Const 1) (Binop LessEq (Var "y") (Var "y")))) (Const 0)) (Var "y")) (Seq []) (Assign "b" (Var "b")),Assign "z" (Var "b"),If (Binop Times (Const 1) (Var "a")) (Seq []) (Assign "a" (Const 1)),If (Uminus (Binop Equal (Binop Equal (Var "a") (Var "y")) (Binop Equal (Const 1) (Binop Plus (Binop And (Var "a") (Const 1)) (Binop Or (Var "b") (Var "z")))))) (Seq [Assign "z" (Binop Div (Const 0) (Uminus (Binop Equal (Var "b") (Const 1))))]) (Seq []),Assign "a" (Var "y"),Assign "b" (Const 1),Assign "y" (Const 0)]
 was printed as
*******************
{ if b then y = - ( - ( 0 < 6 - z ) ) else { a = z ; y = - ( 0 ) } ; while b do z = 1 / - b && - ( 0 - y ) ; x = z ; z = 0 <= ( a + 0 / 0 ) / ( b == a / ( b * b ) ) ; if - ( z < ( 2 * x <= ( y || a ) ) ) then z = b else b = - ( 0 < - b ) ; y = ( a <= ( x / y && a ) ) * ( y <= y ) == - ( -25 ) ; a = x == 0 ; x = -1 ; while 0 - b do { } ; x = - ( z && 23 ) ; while 0 do { } ; b = z ; if ( - y == a + - ( 1 ) + z / ( a + 1 ) ) - ( y || 0 -9 ) then if y - y then { } else { } else if a * 0 && y then { } else { } ; y = x ; y = 20 ; if 8 * ( a < z ) && 0 + 1 then b = x else a = 3 ; x = 1 ; a = 0 || - ( - ( 1 || 1 ) || 1 ) ; a = x || 25 ; b = z ; x = -4 ; if x then b = 22 else if ( 0 == - ( 1 ) ) + 1 then { } else { } ; x = b * z ; if -22 then { } else { } ; x = - z <= - ( 0 ) ; z = - ( - ( 11 * 0 ) < ( x && x || 0 ) ) || -17 ; if a then { y = 1 || a } else z = - ( b <= y ) + 1 ; while a do { } ; x = -9 ; x = b <= x ; a = y ; if z < 18 <= 29 then x = 8 else { while b do { } } ; if 0 * 0 < ( 1 == ( y <= y ) ) <= 0 || y then { } else b = b ; z = b ; if 1 * a then { } else a = 1 ; if - ( a == y == ( 1 == ( a && 1 ) + ( b || z ) ) ) then { z = 0 / - ( b == 1 ) } else { } ; a = y ; b = 1 ; y = 0 }

*******************
but expected
*******************
{
  if b then
    y = - ( - ( 0 < 6 - z ) )
  else {
    a = z ;
    y = - ( 0 )
  } ;
  while b do
    z = 1 / - b && - ( 0 - y ) ;
  x = z ;
  z = 0 <= ( a + 0 / 0 ) / ( b == a / ( b * b ) ) ;
  if - ( z < ( 2 * x <= ( y || a ) ) ) then
    z = b
  else
    b = - ( 0 < - b ) ;
  y = ( a <= ( x / y && a ) ) * ( y <= y ) == - ( -25 ) ;
  a = x == 0 ;
  x = -1 ;
  while 0 - b do { } ;
  x = - ( z && 23 ) ;
  while 0 do { } ;
  b = z ;
  if ( - y == a + - ( 1 ) + z / ( a + 1 ) ) - ( y || 0 -9 ) then
    if y - y then { } else { }
  else if a * 0 && y then { } else { } ;
  y = x ;
  y = 20 ;
  if 8 * ( a < z ) && 0 + 1 then
    b = x
  else
    a = 3 ;
  x = 1 ;
  a = 0 || - ( - ( 1 || 1 ) || 1 ) ;
  a = x || 25 ;
  b = z ;
  x = -4 ;
  if x then
    b = 22
  else if ( 0 == - ( 1 ) ) + 1 then { } else { } ;
  x = b * z ;
  if -22 then { } else { } ;
  x = - z <= - ( 0 ) ;
  z = - ( - ( 11 * 0 ) < ( x && x || 0 ) ) || -17 ;
  if a then {
    y = 1 || a
  } else
    z = - ( b <= y ) + 1 ;
  while a do { } ;
  x = -9 ;
  x = b <= x ;
  a = y ;
  if z < 18 <= 29 then
    x = 8
  else {
    while b do { }
  } ;
  if 0 * 0 < ( 1 == ( y <= y ) ) <= 0 || y then { } else
    b = b ;
  z = b ;
  if 1 * a then { } else
    a = 1 ;
  if - ( a == y == ( 1 == ( a && 1 ) + ( b || z ) ) ) then {
    z = 0 / - ( b == 1 )
  } else { } ;
  a = y ;
  b = 1 ;
  y = 0
}

*******************

AST
If (Var "a") (Assign "y" (Const 21)) (If (Binop And (Var "x") (Binop Minus (Const 5) (Const 0))) (Assign "y" (Uminus (Binop Or (Var "a") (Const 0)))) (Seq [Assign "z" (Uminus (Const 0))]))
 was printed as
*******************
if a then y = 21 else if x && 5 -0 then y = - ( a || 0 ) else { z = - ( 0 ) }

*******************
but expected
*******************
if a then
  y = 21
else if x && 5 -0 then
  y = - ( a || 0 )
else {
  z = - ( 0 )
}

*******************

AST
If (Const 0) (Seq [Assign "x" (Binop Or (Var "y") (Uminus (Const 1))),Assign "z" (Binop LessEq (Var "y") (Var "z")),While (Var "b") (While (Binop And (Uminus (Const 1)) (Var "a")) (Seq [])),If (Binop And (Var "b") (Var "b")) (Assign "a" (Binop Equal (Binop Equal (Var "x") (Var "a")) (Var "a"))) (While (Uminus (Var "b")) (Seq []))]) (Assign "y" (Const 0))
 was printed as
*******************
if 0 then { x = y || - ( 1 ) ; z = y <= z ; while b do while - ( 1 ) && a do { } ; if b && b then a = x == a == a else while - b do { } } else y = 0

*******************
but expected
*******************
if 0 then {
  x = y || - ( 1 ) ;
  z = y <= z ;
  while b do
    while - ( 1 ) && a do { } ;
  if b && b then
    a = x == a == a
  else
    while - b do { }
} else
  y = 0

*******************

AST
If (Var "z") (Seq [If (Const 1) (Seq []) (Seq []),Assign "z" (Binop Less (Var "z") (Binop Minus (Const (-23)) (Uminus (Binop Equal (Uminus (Const 0)) (Uminus (Const (-1)))))))]) (Seq [Assign "b" (Uminus (Uminus (Uminus (Binop Times (Const (-19)) (Var "a"))))),If (Uminus (Binop Less (Binop Times (Var "x") (Binop And (Const 0) (Const (-4)))) (Var "b"))) (Seq []) (If (Binop LessEq (Uminus (Binop LessEq (Binop Plus (Var "x") (Binop Plus (Var "y") (Var "b"))) (Binop LessEq (Var "b") (Binop Plus (Var "b") (Const 1))))) (Binop Times (Var "b") (Binop Plus (Var "z") (Uminus (Const 0))))) (Seq []) (Seq [])),While (Const 1) (Assign "a" (Binop Div (Binop LessEq (Const (-9)) (Const 1)) (Const 1))),Assign "y" (Const 1)])
 was printed as
*******************
if z then { if 1 then { } else { } ; z = z < -23 - - ( - ( 0 ) == - ( -1 ) ) } else { b = - ( - ( - ( -19 * a ) ) ) ; if - ( x * ( 0 && -4 ) < b ) then { } else if - ( x + ( y + b ) <= ( b <= b + 1 ) ) <= b * ( z + - ( 0 ) ) then { } else { } ; while 1 do a = ( -9 <= 1 ) / 1 ; y = 1 }

*******************
but expected
*******************
if z then {
  if 1 then { } else { } ;
  z = z < -23 - - ( - ( 0 ) == - ( -1 ) )
} else {
  b = - ( - ( - ( -19 * a ) ) ) ;
  if - ( x * ( 0 && -4 ) < b ) then { } else if - ( x + ( y + b ) <= ( b <= b + 1 ) ) <= b * ( z + - ( 0 ) ) then { } else { } ;
  while 1 do
    a = ( -9 <= 1 ) / 1 ;
  y = 1
}

*******************

AST
If (Var "b") (Assign "z" (Binop LessEq (Uminus (Var "y")) (Var "b"))) (Assign "z" (Const (-15)))
 was printed as
*******************
if b then z = - y <= b else z = -15

*******************
but expected
*******************
if b then
  z = - y <= b
else
  z = -15

*******************

AST
Seq [Assign "z" (Const 1),Assign "b" (Const 0),Assign "b" (Const 0),Assign "x" (Uminus (Var "z")),Assign "b" (Binop Equal (Const 1) (Const (-18))),Assign "b" (Binop Div (Const 1) (Const 0)),Assign "y" (Binop Or (Var "x") (Binop Minus (Var "x") (Const 1))),Assign "x" (Const 1),Assign "x" (Var "y"),Assign "z" (Const 1),Assign "b" (Const 1),If (Const 21) (Seq []) (Seq []),Assign "a" (Const 1),Assign "a" (Const (-23)),Assign "x" (Var "z"),Assign "b" (Var "x"),Assign "z" (Var "b"),Assign "a" (Var "b"),Assign "y" (Var "b"),Assign "y" (Const 0)]
 was printed as
*******************
{ z = 1 ; b = 0 ; b = 0 ; x = - z ; b = 1 == -18 ; b = 1 / 0 ; y = x || x -1 ; x = 1 ; x = y ; z = 1 ; b = 1 ; if 21 then { } else { } ; a = 1 ; a = -23 ; x = z ; b = x ; z = b ; a = b ; y = b ; y = 0 }

*******************
but expected
*******************
{
  z = 1 ;
  b = 0 ;
  b = 0 ;
  x = - z ;
  b = 1 == -18 ;
  b = 1 / 0 ;
  y = x || x -1 ;
  x = 1 ;
  x = y ;
  z = 1 ;
  b = 1 ;
  if 21 then { } else { } ;
  a = 1 ;
  a = -23 ;
  x = z ;
  b = x ;
  z = b ;
  a = b ;
  y = b ;
  y = 0
}

*******************

AST
Seq [If (Uminus (Const 0)) (Seq [Assign "a" (Binop Equal (Uminus (Binop Div (Const 0) (Const 1))) (Var "z")),Assign "a" (Var "y")]) (Seq [Assign "z" (Binop And (Var "x") (Binop Minus (Const 1) (Const 1)))]),Assign "z" (Var "y"),If (Var "a") (Assign "z" (Binop Times (Var "y") (Binop Equal (Const 1) (Var "z")))) (While (Var "x") (Assign "b" (Binop Minus (Var "x") (Const 1)))),Assign "a" (Var "b"),Assign "y" (Uminus (Binop Minus (Const 0) (Const 0))),If (Var "y") (Seq []) (Assign "x" (Const 1)),Assign "z" (Uminus (Var "x")),If (Const (-18)) (Assign "b" (Var "x")) (Assign "b" (Const 1)),Assign "z" (Const 17),Assign "x" (Binop Or (Var "z") (Var "z")),Assign "y" (Var "a"),Assign "z" (Const 0),Assign "b" (Const 1),If (Const 0) (Seq [Assign "y" (Var "a")]) (Assign "b" (Uminus (Var "x"))),While (Const 0) (Assign "x" (Binop LessEq (Var "b") (Binop Times (Binop Or (Binop And (Var "y") (Binop Div (Const (-22)) (Const 19))) (Var "a")) (Const 27)))),Assign "z" (Const 1),Assign "y" (Binop Or (Binop Div (Const 16) (Binop And (Const 11) (Const 1))) (Var "y")),Assign "x" (Uminus (Const 1)),Assign "y" (Const 0)]
 was printed as
*******************
{ if - ( 0 ) then { a = - ( 0 / 1 ) == z ; a = y } else { z = x && 1 -1 } ; z = y ; if a then z = y * ( 1 == z ) else while x do b = x -1 ; a = b ; y = - ( 0 -0 ) ; if y then { } else x = 1 ; z = - x ; if -18 then b = x else b = 1 ; z = 17 ; x = z || z ; y = a ; z = 0 ; b = 1 ; if 0 then { y = a } else b = - x ; while 0 do x = b <= ( y && -22 / 19 || a ) * 27 ; z = 1 ; y = 16 / ( 11 && 1 ) || y ; x = - ( 1 ) ; y = 0 }

*******************
but expected
*******************
{
  if - ( 0 ) then {
    a = - ( 0 / 1 ) == z ;
    a = y
  } else {
    z = x && 1 -1
  } ;
  z = y ;
  if a then
    z = y * ( 1 == z )
  else
    while x do
      b = x -1 ;
  a = b ;
  y = - ( 0 -0 ) ;
  if y then { } else
    x = 1 ;
  z = - x ;
  if -18 then
    b = x
  else
    b = 1 ;
  z = 17 ;
  x = z || z ;
  y = a ;
  z = 0 ;
  b = 1 ;
  if 0 then {
    y = a
  } else
    b = - x ;
  while 0 do
    x = b <= ( y && -22 / 19 || a ) * 27 ;
  z = 1 ;
  y = 16 / ( 11 && 1 ) || y ;
  x = - ( 1 ) ;
  y = 0
}

*******************

AST
While (Binop LessEq (Var "b") (Binop Times (Binop Minus (Const 0) (Binop And (Binop Equal (Const 0) (Const 0)) (Binop Equal (Var "x") (Var "x")))) (Uminus (Uminus (Var "z"))))) (While (Var "b") (Seq [Assign "x" (Uminus (Binop Times (Uminus (Var "z")) (Var "y"))),If (Var "a") (While (Binop Or (Binop Div (Var "a") (Const 0)) (Binop LessEq (Var "b") (Uminus (Var "x")))) (Seq [])) (Assign "x" (Const 1))]))
 was printed as
*******************
while b <= ( 0 - ( 0 == 0 && x == x ) ) * - ( - z ) do while b do { x = - ( - z * y ) ; if a then while a / 0 || b <= - x do { } else x = 1 }

*******************
but expected
*******************
while b <= ( 0 - ( 0 == 0 && x == x ) ) * - ( - z ) do
  while b do {
    x = - ( - z * y ) ;
    if a then
      while a / 0 || b <= - x do { }
    else
      x = 1
  }

*******************

AST
Seq [While (Binop Or (Binop Minus (Const (-15)) (Var "b")) (Var "x")) (Assign "a" (Binop Div (Var "y") (Binop Equal (Uminus (Var "a")) (Var "a")))),Assign "a" (Uminus (Const (-10))),Assign "z" (Binop Less (Binop Times (Var "a") (Const 0)) (Var "a")),Assign "b" (Const 0),If (Uminus (Const (-11))) (If (Const 1) (Seq []) (Seq [])) (Seq []),Assign "a" (Uminus (Binop Minus (Uminus (Const 1)) (Const 22))),While (Var "x") (Seq [Assign "z" (Binop Or (Const 18) (Binop LessEq (Var "z") (Uminus (Const 0))))]),Assign "x" (Uminus (Uminus (Const 10))),If (Var "x") (If (Const 6) (Assign "x" (Const (-16))) (If (Binop Equal (Binop And (Var "a") (Var "z")) (Var "y")) (Assign "z" (Binop Div (Binop LessEq (Uminus (Var "b")) (Uminus (Uminus (Var "b")))) (Var "a"))) (Assign "x" (Var "y")))) (Assign "z" (Binop Or (Binop LessEq (Const 0) (Const (-16))) (Uminus (Uminus (Const (-24)))))),Assign "x" (Var "x"),Assign "z" (Uminus (Binop Plus (Var "y") (Const 1))),Assign "a" (Var "x"),Assign "y" (Const (-14)),Assign "x" (Var "a"),Assign "y" (Binop Or (Var "z") (Binop Equal (Binop Equal (Const 1) (Const (-6))) (Const 0)))]
 was printed as
*******************
{ while -15 - b || x do a = y / ( - a == a ) ; a = - ( -10 ) ; z = a * 0 < a ; b = 0 ; if - ( -11 ) then if 1 then { } else { } else { } ; a = - ( - ( 1 ) -22 ) ; while x do { z = 18 || z <= - ( 0 ) } ; x = - ( - ( 10 ) ) ; if x then if 6 then x = -16 else if ( a && z ) == y then z = ( - b <= - ( - b ) ) / a else x = y else z = 0 <= -16 || - ( - ( -24 ) ) ; x = x ; z = - ( y + 1 ) ; a = x ; y = -14 ; x = a ; y = z || 1 == -6 == 0 }

*******************
but expected
*******************
{
  while -15 - b || x do
    a = y / ( - a == a ) ;
  a = - ( -10 ) ;
  z = a * 0 < a ;
  b = 0 ;
  if - ( -11 ) then
    if 1 then { } else { }
  else { } ;
  a = - ( - ( 1 ) -22 ) ;
  while x do {
    z = 18 || z <= - ( 0 )
  } ;
  x = - ( - ( 10 ) ) ;
  if x then
    if 6 then
      x = -16
    else if ( a && z ) == y then
      z = ( - b <= - ( - b ) ) / a
    else
      x = y
  else
    z = 0 <= -16 || - ( - ( -24 ) ) ;
  x = x ;
  z = - ( y + 1 ) ;
  a = x ;
  y = -14 ;
  x = a ;
  y = z || 1 == -6 == 0
}

*******************

AST
Seq [Assign "x" (Binop Or (Var "b") (Var "y")),Assign "z" (Binop Times (Binop And (Uminus (Const 1)) (Var "x")) (Var "b")),Assign "b" (Var "x"),If (Var "z") (Seq [Assign "b" (Const 1)]) (If (Const 0) (Assign "z" (Const 1)) (Assign "y" (Binop LessEq (Uminus (Uminus (Binop Div (Var "x") (Var "b")))) (Var "x"))))]
 was printed as
*******************
{ x = b || y ; z = ( - ( 1 ) && x ) * b ; b = x ; if z then { b = 1 } else if 0 then z = 1 else y = - ( - ( x / b ) ) <= x }

*******************
but expected
*******************
{
  x = b || y ;
  z = ( - ( 1 ) && x ) * b ;
  b = x ;
  if z then {
    b = 1
  } else if 0 then
    z = 1
  else
    y = - ( - ( x / b ) ) <= x
}

*******************

AST
If (Binop Div (Binop Plus (Var "z") (Uminus (Binop Div (Const 0) (Binop Equal (Const 1) (Const 1))))) (Const 1)) (Assign "x" (Const 20)) (Assign "x" (Binop Times (Binop And (Var "x") (Binop LessEq (Var "y") (Binop Minus (Const (-4)) (Const 1)))) (Const 1)))
 was printed as
*******************
if ( z + - ( 0 / ( 1 == 1 ) ) ) / 1 then x = 20 else x = ( x && y <= -4 -1 ) * 1

*******************
but expected
*******************
if ( z + - ( 0 / ( 1 == 1 ) ) ) / 1 then
  x = 20
else
  x = ( x && y <= -4 -1 ) * 1

*******************

AST
Seq [While (Const 25) (Seq [If (Const 1) (Seq []) (Seq [])]),Assign "a" (Const 1),Assign "b" (Var "z")]
 was printed as
*******************
{ while 25 do { if 1 then { } else { } } ; a = 1 ; b = z }

*******************
but expected
*******************
{
  while 25 do {
    if 1 then { } else { }
  } ;
  a = 1 ;
  b = z
}

*******************

AST
If (Binop Plus (Binop Minus (Const 0) (Uminus (Const 2))) (Binop Equal (Var "a") (Const 1))) (If (Var "b") (Assign "b" (Binop Less (Const 0) (Const 1))) (Assign "x" (Uminus (Var "a")))) (Assign "y" (Binop And (Binop Less (Uminus (Binop Times (Var "a") (Uminus (Var "x")))) (Binop Minus (Binop Div (Var "x") (Const 1)) (Const 1))) (Const (-14))))
 was printed as
*******************
if 0 - - ( 2 ) + ( a == 1 ) then if b then b = 0 < 1 else x = - a else y = - ( a * - x ) < x / 1 -1 && -14

*******************
but expected
*******************
if 0 - - ( 2 ) + ( a == 1 ) then
  if b then
    b = 0 < 1
  else
    x = - a
else
  y = - ( a * - x ) < x / 1 -1 && -14

*******************

AST
Seq [Assign "x" (Var "a"),Assign "z" (Binop Div (Binop Times (Binop Equal (Const 1) (Binop And (Const 1) (Var "b"))) (Const (-3))) (Binop Div (Binop And (Binop And (Binop Or (Const 1) (Var "y")) (Const 7)) (Const (-24))) (Const 0))),If (Var "z") (If (Var "b") (Seq []) (Seq [])) (Seq []),Assign "x" (Uminus (Const 0)),Assign "b" (Binop Or (Uminus (Const 1)) (Binop Less (Const (-9)) (Var "z"))),Assign "x" (Binop Plus (Uminus (Uminus (Const 0))) (Var "a")),Assign "b" (Const (-3)),Assign "b" (Var "x")]
 was printed as
*******************
{ x = a ; z = ( 1 == ( 1 && b ) ) * -3 / ( ( ( 1 || y ) && 7 && -24 ) / 0 ) ; if z then if b then { } else { } else { } ; x = - ( 0 ) ; b = - ( 1 ) || -9 < z ; x = - ( - ( 0 ) ) + a ; b = -3 ; b = x }

*******************
but expected
*******************
{
  x = a ;
  z = ( 1 == ( 1 && b ) ) * -3 / ( ( ( 1 || y ) && 7 && -24 ) / 0 ) ;
  if z then
    if b then { } else { }
  else { } ;
  x = - ( 0 ) ;
  b = - ( 1 ) || -9 < z ;
  x = - ( - ( 0 ) ) + a ;
  b = -3 ;
  b = x
}

*******************

AST
Seq [Assign "y" (Const (-19)),If (Var "b") (If (Binop Less (Binop Equal (Var "y") (Const 0)) (Binop Times (Const 0) (Binop Div (Const 3) (Binop And (Var "y") (Const 16))))) (Assign "a" (Var "b")) (If (Var "x") (Seq []) (Seq []))) (Assign "y" (Var "y")),While (Const (-2)) (If (Uminus (Binop Times (Var "z") (Const (-21)))) (If (Var "z") (Seq []) (Seq [])) (If (Binop Div (Const 1) (Var "y")) (Seq []) (Seq []))),Assign "a" (Uminus (Binop Minus (Const (-24)) (Var "x"))),Assign "y" (Binop Div (Const 1) (Uminus (Var "y"))),Assign "z" (Binop Div (Binop Plus (Const 1) (Binop And (Var "b") (Var "b"))) (Const 1)),Assign "y" (Const 1),Assign "a" (Var "b"),While (Uminus (Const (-15))) (Seq [Assign "a" (Const 0)]),While (Var "b") (Seq [Assign "b" (Binop And (Const (-18)) (Uminus (Const 0))),While (Const 1) (Assign "z" (Var "a"))]),While (Const (-4)) (Seq []),Assign "a" (Binop Equal (Binop Equal (Const 1) (Var "b")) (Var "x")),Assign "x" (Binop And (Var "b") (Uminus (Const 0))),Assign "y" (Uminus (Binop Minus (Const 0) (Uminus (Var "y")))),If (Const 0) (Seq [Assign "y" (Binop Div (Const (-20)) (Const (-1))),Assign "z" (Binop Minus (Binop Plus (Binop Equal (Const 12) (Uminus (Const (-13)))) (Binop And (Binop Less (Const 1) (Var "b")) (Binop Times (Var "z") (Uminus (Var "y"))))) (Binop Div (Binop LessEq (Binop Minus (Var "x") (Var "a")) (Const 1)) (Var "z"))),Assign "y" (Binop Times (Uminus (Var "z")) (Var "b"))]) (If (Var "b") (Assign "y" (Var "a")) (If (Binop And (Uminus (Binop Equal (Const 18) (Const 1))) (Const (-18))) (Seq []) (Assign "a" (Binop And (Binop Times (Var "b") (Const (-7))) (Const 1)))))]
 was printed as
*******************
{ y = -19 ; if b then if y == 0 < 0 * ( 3 / ( y && 16 ) ) then a = b else if x then { } else { } else y = y ; while -2 do if - ( z * -21 ) then if z then { } else { } else if 1 / y then { } else { } ; a = - ( -24 - x ) ; y = 1 / - y ; z = ( 1 + ( b && b ) ) / 1 ; y = 1 ; a = b ; while - ( -15 ) do { a = 0 } ; while b do { b = -18 && - ( 0 ) ; while 1 do z = a } ; while -4 do { } ; a = 1 == b == x ; x = b && - ( 0 ) ; y = - ( 0 - - y ) ; if 0 then { y = -20 / -1 ; z = ( 12 == - ( -13 ) ) + ( 1 < b && z * - y ) - ( x - a <= 1 ) / z ; y = - z * b } else if b then y = a else if - ( 18 == 1 ) && -18 then { } else a = b * -7 && 1 }

*******************
but expected
*******************
{
  y = -19 ;
  if b then
    if y == 0 < 0 * ( 3 / ( y && 16 ) ) then
      a = b
    else if x then { } else { }
  else
    y = y ;
  while -2 do
    if - ( z * -21 ) then
      if z then { } else { }
    else if 1 / y then { } else { } ;
  a = - ( -24 - x ) ;
  y = 1 / - y ;
  z = ( 1 + ( b && b ) ) / 1 ;
  y = 1 ;
  a = b ;
  while - ( -15 ) do {
    a = 0
  } ;
  while b do {
    b = -18 && - ( 0 ) ;
    while 1 do
      z = a
  } ;
  while -4 do { } ;
  a = 1 == b == x ;
  x = b && - ( 0 ) ;
  y = - ( 0 - - y ) ;
  if 0 then {
    y = -20 / -1 ;
    z = ( 12 == - ( -13 ) ) + ( 1 < b && z * - y ) - ( x - a <= 1 ) / z ;
    y = - z * b
  } else if b then
    y = a
  else if - ( 18 == 1 ) && -18 then { } else
    a = b * -7 && 1
}

*******************

AST
Seq [Assign "x" (Var "z"),Assign "z" (Var "x"),While (Uminus (Const 5)) (Seq [Assign "z" (Const 30),Assign "z" (Binop Div (Binop Minus (Var "y") (Var "a")) (Binop Less (Var "a") (Var "y"))),Assign "x" (Const 14)]),Assign "y" (Const (-10)),While (Uminus (Binop Div (Const (-27)) (Const 0))) (While (Uminus (Const (-16))) (Seq [])),If (Binop Div (Var "b") (Uminus (Binop Less (Binop Times (Const 0) (Const (-29))) (Var "b")))) (Seq [If (Var "x") (Seq []) (Seq [])]) (While (Uminus (Binop Plus (Const 0) (Const 1))) (Assign "b" (Var "z"))),Assign "x" (Binop Equal (Var "z") (Var "y")),Assign "x" (Const 1),Assign "b" (Const 10),Assign "z" (Binop Or (Var "z") (Uminus (Uminus (Binop Equal (Binop Or (Const 1) (Const 1)) (Const 0))))),Assign "x" (Binop Equal (Var "a") (Uminus (Var "z"))),Assign "x" (Binop And (Const 0) (Var "z")),If (Const 0) (If (Const (-19)) (Seq []) (Seq [])) (Assign "a" (Binop Or (Binop Less (Var "z") (Const 0)) (Var "y")))]
 was printed as
*******************
{ x = z ; z = x ; while - ( 5 ) do { z = 30 ; z = ( y - a ) / ( a < y ) ; x = 14 } ; y = -10 ; while - ( -27 / 0 ) do while - ( -16 ) do { } ; if b / - ( 0 * -29 < b ) then { if x then { } else { } } else while - ( 0 + 1 ) do b = z ; x = z == y ; x = 1 ; b = 10 ; z = z || - ( - ( ( 1 || 1 ) == 0 ) ) ; x = a == - z ; x = 0 && z ; if 0 then if -19 then { } else { } else a = z < 0 || y }

*******************
but expected
*******************
{
  x = z ;
  z = x ;
  while - ( 5 ) do {
    z = 30 ;
    z = ( y - a ) / ( a < y ) ;
    x = 14
  } ;
  y = -10 ;
  while - ( -27 / 0 ) do
    while - ( -16 ) do { } ;
  if b / - ( 0 * -29 < b ) then {
    if x then { } else { }
  } else
    while - ( 0 + 1 ) do
      b = z ;
  x = z == y ;
  x = 1 ;
  b = 10 ;
  z = z || - ( - ( ( 1 || 1 ) == 0 ) ) ;
  x = a == - z ;
  x = 0 && z ;
  if 0 then
    if -19 then { } else { }
  else
    a = z < 0 || y
}

*******************

AST
Seq [Assign "a" (Var "b"),While (Var "y") (Assign "y" (Const 12)),If (Var "y") (Assign "z" (Const 0)) (If (Binop Times (Const 16) (Binop Less (Binop Plus (Binop Times (Uminus (Const 7)) (Var "a")) (Uminus (Const 0))) (Binop Minus (Const 0) (Const (-7))))) (If (Var "x") (Seq []) (Seq [])) (If (Uminus (Uminus (Binop Div (Binop Div (Const 1) (Binop Times (Const 1) (Var "b"))) (Uminus (Var "b"))))) (Seq []) (Seq []))),Assign "z" (Const 1),Assign "x" (Const 1),Assign "y" (Const 6),If (Const (-23)) (Assign "y" (Const 0)) (If (Binop Or (Var "y") (Var "b")) (Assign "z" (Var "y")) (Assign "z" (Const 1))),Assign "a" (Const (-8)),Assign "x" (Binop Times (Var "z") (Var "y")),If (Var "x") (Seq []) (Assign "z" (Binop Minus (Const 1) (Binop Times (Binop Or (Var "y") (Const 0)) (Const 18)))),Assign "a" (Uminus (Uminus (Binop Plus (Binop Or (Var "z") (Const 1)) (Var "x")))),Assign "z" (Uminus (Binop Plus (Const 0) (Var "z"))),If (Binop Equal (Binop Div (Var "a") (Var "b")) (Binop Times (Binop Or (Uminus (Binop LessEq (Var "y") (Var "b"))) (Binop Less (Binop Div (Const 0) (Const 0)) (Var "z"))) (Const 0))) (Seq []) (Assign "z" (Const 0)),Assign "b" (Var "b"),If (Var "a") (If (Var "b") (Assign "z" (Binop Plus (Const (-19)) (Const 0))) (Assign "y" (Const 0))) (Seq []),Assign "z" (Binop Plus (Var "x") (Binop LessEq (Binop Plus (Const (-28)) (Const 1)) (Var "a"))),Assign "x" (Var "z"),Assign "b" (Var "y"),Assign "a" (Binop And (Binop Equal (Uminus (Uminus (Binop Times (Const 1) (Const (-5))))) (Uminus (Var "x"))) (Var "x")),If (Var "y") (While (Const 0) (If (Binop Less (Const 0) (Const 1)) (Seq []) (Seq []))) (Seq []),While (Var "y") (If (Binop Plus (Var "z") (Binop Minus (Const 0) (Const 0))) (Seq []) (Assign "z" (Binop Less (Const 0) (Uminus (Var "b"))))),If (Const (-7)) (If (Uminus (Var "y")) (Assign "z" (Const 0)) (While (Uminus (Const 27)) (Seq []))) (Seq []),If (Const 22) (Assign "y" (Var "a")) (Assign "a" (Var "b")),Assign "x" (Const 0)]
 was printed as
*******************
{ a = b ; while y do y = 12 ; if y then z = 0 else if 16 * ( - ( 7 ) * a + - ( 0 ) < 0 - -7 ) then if x then { } else { } else if - ( - ( 1 / ( 1 * b ) / - b ) ) then { } else { } ; z = 1 ; x = 1 ; y = 6 ; if -23 then y = 0 else if y || b then z = y else z = 1 ; a = -8 ; x = z * y ; if x then { } else z = 1 - ( y || 0 ) * 18 ; a = - ( - ( ( z || 1 ) + x ) ) ; z = - ( 0 + z ) ; if a / b == ( - ( y <= b ) || 0 / 0 < z ) * 0 then { } else z = 0 ; b = b ; if a then if b then z = -19 + 0 else y = 0 else { } ; z = x + ( -28 + 1 <= a ) ; x = z ; b = y ; a = - ( - ( 1 * -5 ) ) == - x && x ; if y then while 0 do if 0 < 1 then { } else { } else { } ; while y do if z + ( 0 -0 ) then { } else z = 0 < - b ; if -7 then if - y then z = 0 else while - ( 27 ) do { } else { } ; if 22 then y = a else a = b ; x = 0 }

*******************
but expected
*******************
{
  a = b ;
  while y do
    y = 12 ;
  if y then
    z = 0
  else if 16 * ( - ( 7 ) * a + - ( 0 ) < 0 - -7 ) then
    if x then { } else { }
  else if - ( - ( 1 / ( 1 * b ) / - b ) ) then { } else { } ;
  z = 1 ;
  x = 1 ;
  y = 6 ;
  if -23 then
    y = 0
  else if y || b then
    z = y
  else
    z = 1 ;
  a = -8 ;
  x = z * y ;
  if x then { } else
    z = 1 - ( y || 0 ) * 18 ;
  a = - ( - ( ( z || 1 ) + x ) ) ;
  z = - ( 0 + z ) ;
  if a / b == ( - ( y <= b ) || 0 / 0 < z ) * 0 then { } else
    z = 0 ;
  b = b ;
  if a then
    if b then
      z = -19 + 0
    else
      y = 0
  else { } ;
  z = x + ( -28 + 1 <= a ) ;
  x = z ;
  b = y ;
  a = - ( - ( 1 * -5 ) ) == - x && x ;
  if y then
    while 0 do
      if 0 < 1 then { } else { }
  else { } ;
  while y do
    if z + ( 0 -0 ) then { } else
      z = 0 < - b ;
  if -7 then
    if - y then
      z = 0
    else
      while - ( 27 ) do { }
  else { } ;
  if 22 then
    y = a
  else
    a = b ;
  x = 0
}

*******************

AST
If (Const 0) (While (Binop Times (Binop And (Var "z") (Uminus (Binop Plus (Const 1) (Const 4)))) (Binop Minus (Binop Plus (Uminus (Var "b")) (Const 1)) (Var "b"))) (Assign "a" (Const 1))) (Seq [If (Binop And (Const 23) (Const 1)) (Assign "z" (Binop Or (Var "y") (Var "z"))) (Assign "y" (Binop Minus (Binop Times (Uminus (Const 0)) (Const (-19))) (Var "b"))),If (Binop Less (Binop Times (Var "a") (Var "a")) (Const 0)) (If (Const 10) (Assign "x" (Binop LessEq (Uminus (Const 0)) (Var "y"))) (Seq [])) (Seq [If (Binop Minus (Const (-29)) (Const 0)) (Seq []) (Seq [])]),Assign "z" (Binop Minus (Var "b") (Binop Div (Binop Div (Binop Or (Binop Minus (Var "a") (Const 0)) (Var "b")) (Binop Or (Const (-10)) (Uminus (Var "x")))) (Var "x"))),Assign "b" (Binop Plus (Var "x") (Const 0)),Assign "y" (Const 4),Assign "b" (Binop Div (Var "z") (Binop Div (Var "z") (Uminus (Var "b")))),Assign "y" (Var "x"),Assign "a" (Var "y")])
 was printed as
*******************
if 0 then while ( z && - ( 1 + 4 ) ) * ( - b + 1 - b ) do a = 1 else { if 23 && 1 then z = y || z else y = - ( 0 ) * -19 - b ; if a * a < 0 then if 10 then x = - ( 0 ) <= y else { } else { if -29 -0 then { } else { } } ; z = b - ( a -0 || b ) / ( -10 || - x ) / x ; b = x + 0 ; y = 4 ; b = z / ( z / - b ) ; y = x ; a = y }

*******************
but expected
*******************
if 0 then
  while ( z && - ( 1 + 4 ) ) * ( - b + 1 - b ) do
    a = 1
else {
  if 23 && 1 then
    z = y || z
  else
    y = - ( 0 ) * -19 - b ;
  if a * a < 0 then
    if 10 then
      x = - ( 0 ) <= y
    else { }
  else {
    if -29 -0 then { } else { }
  } ;
  z = b - ( a -0 || b ) / ( -10 || - x ) / x ;
  b = x + 0 ;
  y = 4 ;
  b = z / ( z / - b ) ;
  y = x ;
  a = y
}

*******************

AST
Seq [Assign "y" (Var "y"),Assign "z" (Var "b"),If (Const 1) (While (Uminus (Uminus (Uminus (Const 1)))) (Seq [])) (If (Uminus (Uminus (Binop Div (Var "z") (Binop Div (Binop Times (Const 7) (Const 0)) (Binop And (Const 0) (Var "a")))))) (Seq []) (Seq [])),Assign "z" (Var "a"),Assign "y" (Const 0),While (Binop Minus (Var "b") (Var "z")) (If (Const 0) (Assign "b" (Var "y")) (Assign "a" (Binop Less (Const 0) (Binop Times (Var "y") (Uminus (Var "b")))))),Assign "x" (Var "b"),Assign "b" (Var "z"),Assign "b" (Const 1),Assign "a" (Uminus (Const 1)),If (Var "a") (If (Const (-4)) (Seq []) (While (Binop LessEq (Const 0) (Const 0)) (Seq []))) (Assign "y" (Const (-18))),Assign "y" (Var "b"),Assign "z" (Const 0),Assign "x" (Var "b"),Assign "x" (Const 0),Assign "y" (Binop LessEq (Binop Equal (Const 0) (Var "z")) (Var "z")),Assign "b" (Binop Div (Binop Or (Uminus (Var "b")) (Var "x")) (Const 0)),If (Uminus (Uminus (Binop And (Uminus (Uminus (Const 28))) (Const 0)))) (Assign "b" (Binop Minus (Binop And (Const 0) (Binop LessEq (Binop Times (Const 0) (Binop Equal (Var "x") (Var "b"))) (Binop Minus (Const 1) (Uminus (Const 0))))) (Uminus (Var "z")))) (Seq []),While (Var "z") (Seq []),While (Binop Less (Const 1) (Uminus (Uminus (Binop Minus (Const 0) (Var "z"))))) (Assign "b" (Var "z")),Assign "x" (Binop Or (Const 1) (Binop Plus (Binop Plus (Binop Minus (Binop Less (Const 0) (Var "x")) (Var "x")) (Const 0)) (Uminus (Binop Or (Binop Less (Const 1) (Const 0)) (Var "y"))))),Assign "b" (Uminus (Var "z")),While (Const 0) (Assign "b" (Var "y"))]
 was printed as
*******************
{ y = y ; z = b ; if 1 then while - ( - ( - ( 1 ) ) ) do { } else if - ( - ( z / ( 7 * 0 / ( 0 && a ) ) ) ) then { } else { } ; z = a ; y = 0 ; while b - z do if 0 then b = y else a = 0 < y * - b ; x = b ; b = z ; b = 1 ; a = - ( 1 ) ; if a then if -4 then { } else while 0 <= 0 do { } else y = -18 ; y = b ; z = 0 ; x = b ; x = 0 ; y = 0 == z <= z ; b = ( - b || x ) / 0 ; if - ( - ( - ( - ( 28 ) ) && 0 ) ) then b = ( 0 && 0 * ( x == b ) <= 1 - - ( 0 ) ) - - z else { } ; while z do { } ; while 1 < - ( - ( 0 - z ) ) do b = z ; x = 1 || ( 0 < x ) - x + 0 + - ( 1 < 0 || y ) ; b = - z ; while 0 do b = y }

*******************
but expected
*******************
{
  y = y ;
  z = b ;
  if 1 then
    while - ( - ( - ( 1 ) ) ) do { }
  else if - ( - ( z / ( 7 * 0 / ( 0 && a ) ) ) ) then { } else { } ;
  z = a ;
  y = 0 ;
  while b - z do
    if 0 then
      b = y
    else
      a = 0 < y * - b ;
  x = b ;
  b = z ;
  b = 1 ;
  a = - ( 1 ) ;
  if a then
    if -4 then { } else
      while 0 <= 0 do { }
  else
    y = -18 ;
  y = b ;
  z = 0 ;
  x = b ;
  x = 0 ;
  y = 0 == z <= z ;
  b = ( - b || x ) / 0 ;
  if - ( - ( - ( - ( 28 ) ) && 0 ) ) then
    b = ( 0 && 0 * ( x == b ) <= 1 - - ( 0 ) ) - - z
  else { } ;
  while z do { } ;
  while 1 < - ( - ( 0 - z ) ) do
    b = z ;
  x = 1 || ( 0 < x ) - x + 0 + - ( 1 < 0 || y ) ;
  b = - z ;
  while 0 do
    b = y
}

*******************

AST
While (Var "z") (Assign "x" (Const 1))
 was printed as
*******************
while z do x = 1

*******************
but expected
*******************
while z do
  x = 1

*******************

AST
Seq [If (Var "b") (Assign "x" (Var "y")) (Assign "a" (Binop Equal (Uminus (Const (-8))) (Var "y"))),If (Const 3) (Assign "a" (Var "a")) (Seq [Assign "z" (Var "x")]),Assign "a" (Const (-2)),Assign "y" (Binop Plus (Const (-10)) (Var "z")),Assign "b" (Var "x")]
 was printed as
*******************
{ if b then x = y else a = - ( -8 ) == y ; if 3 then a = a else { z = x } ; a = -2 ; y = -10 + z ; b = x }

*******************
but expected
*******************
{
  if b then
    x = y
  else
    a = - ( -8 ) == y ;
  if 3 then
    a = a
  else {
    z = x
  } ;
  a = -2 ;
  y = -10 + z ;
  b = x
}

*******************

AST
Seq [Assign "b" (Var "a")]
 was printed as
*******************
{ b = a }

*******************
but expected
*******************
{
  b = a
}

*******************

AST
If (Uminus (Binop Times (Var "b") (Binop Or (Uminus (Uminus (Var "z"))) (Var "y")))) (Assign "x" (Var "b")) (Assign "z" (Var "z"))
 was printed as
*******************
if - ( b * ( - ( - z ) || y ) ) then x = b else z = z

*******************
but expected
*******************
if - ( b * ( - ( - z ) || y ) ) then
  x = b
else
  z = z

*******************

AST
Seq [Assign "b" (Binop Minus (Uminus (Const 0)) (Var "z")),Assign "b" (Binop LessEq (Var "y") (Const 1)),While (Binop Times (Binop Or (Binop Or (Var "a") (Uminus (Var "b"))) (Binop LessEq (Const 1) (Binop Times (Const 1) (Var "x")))) (Binop Minus (Var "y") (Var "z"))) (Seq []),If (Const (-25)) (Seq []) (Seq []),Assign "b" (Uminus (Binop Equal (Binop Or (Var "y") (Binop Times (Var "a") (Var "a"))) (Var "z"))),Assign "z" (Uminus (Var "a")),Assign "a" (Var "z"),Assign "y" (Binop Or (Binop Minus (Const 12) (Uminus (Const 1))) (Binop Less (Binop Times (Var "b") (Var "x")) (Const 1))),If (Binop Or (Const 1) (Var "b")) (If (Const 1) (Seq []) (Seq [])) (While (Const 1) (Seq []))]
 was printed as
*******************
{ b = - ( 0 ) - z ; b = y <= 1 ; while ( a || - b || 1 <= 1 * x ) * ( y - z ) do { } ; if -25 then { } else { } ; b = - ( ( y || a * a ) == z ) ; z = - a ; a = z ; y = 12 - - ( 1 ) || b * x < 1 ; if 1 || b then if 1 then { } else { } else while 1 do { } }

*******************
but expected
*******************
{
  b = - ( 0 ) - z ;
  b = y <= 1 ;
  while ( a || - b || 1 <= 1 * x ) * ( y - z ) do { } ;
  if -25 then { } else { } ;
  b = - ( ( y || a * a ) == z ) ;
  z = - a ;
  a = z ;
  y = 12 - - ( 1 ) || b * x < 1 ;
  if 1 || b then
    if 1 then { } else { }
  else
    while 1 do { }
}

*******************

AST
Seq [While (Const 0) (Seq [Assign "b" (Var "z"),Assign "z" (Var "x"),While (Binop Less (Const 27) (Const 19)) (Seq [])])]
 was printed as
*******************
{ while 0 do { b = z ; z = x ; while 27 < 19 do { } } }

*******************
but expected
*******************
{
  while 0 do {
    b = z ;
    z = x ;
    while 27 < 19 do { }
  }
}

*******************

AST
Seq [Assign "z" (Const 1),While (Uminus (Binop Plus (Var "z") (Var "a"))) (While (Binop Times (Uminus (Binop Plus (Var "z") (Const 1))) (Var "a")) (Seq [])),While (Const 3) (Seq [Assign "a" (Uminus (Var "a"))]),If (Binop Or (Const 0) (Const 1)) (If (Binop Less (Const 0) (Binop Less (Var "y") (Var "z"))) (Seq []) (Seq [])) (Seq []),While (Uminus (Binop Equal (Var "x") (Uminus (Var "z")))) (Assign "x" (Binop LessEq (Uminus (Var "x")) (Var "a"))),Assign "z" (Const 0),If (Binop Or (Const (-10)) (Uminus (Var "z"))) (If (Var "a") (Assign "a" (Binop Or (Const 1) (Const 0))) (Assign "y" (Const 1))) (If (Binop Times (Binop Div (Var "z") (Const 0)) (Const 1)) (Assign "a" (Var "b")) (Assign "z" (Const 1))),If (Uminus (Var "b")) (If (Const 0) (If (Uminus (Var "x")) (Seq []) (Seq [])) (While (Var "a") (Seq []))) (Assign "x" (Binop LessEq (Const (-25)) (Const 1))),Assign "a" (Binop Less (Const (-10)) (Uminus (Var "z"))),If (Binop LessEq (Const 0) (Var "x")) (Seq []) (Seq []),Assign "a" (Const 1),Assign "y" (Uminus (Binop Times (Binop Less (Var "z") (Var "x")) (Uminus (Uminus (Var "y"))))),Assign "z" (Uminus (Uminus (Var "a"))),While (Binop And (Var "x") (Binop Div (Uminus (Var "x")) (Binop LessEq (Binop Equal (Binop Times (Const 0) (Const 0)) (Uminus (Const 1))) (Binop Plus (Binop Plus (Const 19) (Var "y")) (Binop Times (Var "b") (Var "a")))))) (Assign "b" (Var "z")),Assign "y" (Uminus (Binop Equal (Var "b") (Var "z"))),If (Var "b") (If (Var "b") (Assign "x" (Const 8)) (If (Uminus (Const 1)) (Seq []) (Seq []))) (If (Binop Plus (Const (-7)) (Const (-6))) (Assign "y" (Const 0)) (Assign "b" (Uminus (Var "y")))),Assign "y" (Const (-22)),Assign "y" (Binop Div (Var "b") (Binop Minus (Var "x") (Binop Less (Const 1) (Var "z")))),Assign "z" (Const 0),While (Const (-18)) (Assign "y" (Var "y")),Assign "z" (Var "a"),If (Var "x") (Seq []) (Assign "a" (Uminus (Binop Div (Var "y") (Var "z")))),Assign "x" (Uminus (Var "z")),Assign "a" (Const 1),If (Uminus (Const 0)) (While (Const 1) (If (Var "x") (Assign "z" (Var "a")) (Assign "x" (Binop And (Uminus (Var "b")) (Uminus (Const 8)))))) (Assign "a" (Binop LessEq (Var "x") (Binop Times (Var "z") (Var "z"))))]
 was printed as
*******************
{ z = 1 ; while - ( z + a ) do while - ( z + 1 ) * a do { } ; while 3 do { a = - a } ; if 0 || 1 then if 0 < ( y < z ) then { } else { } else { } ; while - ( x == - z ) do x = - x <= a ; z = 0 ; if -10 || - z then if a then a = 1 || 0 else y = 1 else if z / 0 * 1 then a = b else z = 1 ; if - b then if 0 then if - x then { } else { } else while a do { } else x = -25 <= 1 ; a = -10 < - z ; if 0 <= x then { } else { } ; a = 1 ; y = - ( ( z < x ) * - ( - y ) ) ; z = - ( - a ) ; while x && - x / ( 0 * 0 == - ( 1 ) <= 19 + y + b * a ) do b = z ; y = - ( b == z ) ; if b then if b then x = 8 else if - ( 1 ) then { } else { } else if -7 + -6 then y = 0 else b = - y ; y = -22 ; y = b / ( x - ( 1 < z ) ) ; z = 0 ; while -18 do y = y ; z = a ; if x then { } else a = - ( y / z ) ; x = - z ; a = 1 ; if - ( 0 ) then while 1 do if x then z = a else x = - b && - ( 8 ) else a = x <= z * z }

*******************
but expected
*******************
{
  z = 1 ;
  while - ( z + a ) do
    while - ( z + 1 ) * a do { } ;
  while 3 do {
    a = - a
  } ;
  if 0 || 1 then
    if 0 < ( y < z ) then { } else { }
  else { } ;
  while - ( x == - z ) do
    x = - x <= a ;
  z = 0 ;
  if -10 || - z then
    if a then
      a = 1 || 0
    else
      y = 1
  else if z / 0 * 1 then
    a = b
  else
    z = 1 ;
  if - b then
    if 0 then
      if - x then { } else { }
    else
      while a do { }
  else
    x = -25 <= 1 ;
  a = -10 < - z ;
  if 0 <= x then { } else { } ;
  a = 1 ;
  y = - ( ( z < x ) * - ( - y ) ) ;
  z = - ( - a ) ;
  while x && - x / ( 0 * 0 == - ( 1 ) <= 19 + y + b * a ) do
    b = z ;
  y = - ( b == z ) ;
  if b then
    if b then
      x = 8
    else if - ( 1 ) then { } else { }
  else if -7 + -6 then
    y = 0
  else
    b = - y ;
  y = -22 ;
  y = b / ( x - ( 1 < z ) ) ;
  z = 0 ;
  while -18 do
    y = y ;
  z = a ;
  if x then { } else
    a = - ( y / z ) ;
  x = - z ;
  a = 1 ;
  if - ( 0 ) then
    while 1 do
      if x then
        z = a
      else
        x = - b && - ( 8 )
  else
    a = x <= z * z
}

*******************

AST
Seq [If (Var "y") (Assign "b" (Binop Less (Var "a") (Binop Equal (Const 1) (Var "b")))) (Seq []),While (Uminus (Const 1)) (Seq [If (Uminus (Binop Minus (Var "b") (Var "x"))) (If (Var "x") (Seq []) (Seq [])) (If (Var "z") (Seq []) (Seq [])),Assign "a" (Binop Equal (Var "z") (Const 0))]),If (Binop Plus (Uminus (Var "x")) (Var "x")) (While (Var "x") (Seq [])) (If (Const (-29)) (Assign "b" (Const (-22))) (Assign "z" (Uminus (Binop Times (Const 1) (Const 1))))),If (Binop Minus (Var "x") (Const 0)) (Seq [Assign "x" (Uminus (Const (-25)))]) (While (Var "y") (Assign "b" (Const (-11)))),Assign "x" (Binop Plus (Var "b") (Var "a")),If (Uminus (Const 21)) (Assign "y" (Uminus (Binop Plus (Var "a") (Uminus (Binop LessEq (Var "y") (Const 1)))))) (If (Binop Less (Const 3) (Var "a")) (Assign "a" (Binop LessEq (Var "y") (Uminus (Const 1)))) (Seq [])),If (Var "x") (While (Var "b") (Assign "y" (Const 13))) (Seq []),Assign "b" (Const 0),Assign "b" (Const 0),Assign "x" (Const 0)]
 was printed as
*******************
{ if y then b = a < ( 1 == b ) else { } ; while - ( 1 ) do { if - ( b - x ) then if x then { } else { } else if z then { } else { } ; a = z == 0 } ; if - x + x then while x do { } else if -29 then b = -22 else z = - ( 1 * 1 ) ; if x -0 then { x = - ( -25 ) } else while y do b = -11 ; x = b + a ; if - ( 21 ) then y = - ( a + - ( y <= 1 ) ) else if 3 < a then a = y <= - ( 1 ) else { } ; if x then while b do y = 13 else { } ; b = 0 ; b = 0 ; x = 0 }

*******************
but expected
*******************
{
  if y then
    b = a < ( 1 == b )
  else { } ;
  while - ( 1 ) do {
    if - ( b - x ) then
      if x then { } else { }
    else if z then { } else { } ;
    a = z == 0
  } ;
  if - x + x then
    while x do { }
  else if -29 then
    b = -22
  else
    z = - ( 1 * 1 ) ;
  if x -0 then {
    x = - ( -25 )
  } else
    while y do
      b = -11 ;
  x = b + a ;
  if - ( 21 ) then
    y = - ( a + - ( y <= 1 ) )
  else if 3 < a then
    a = y <= - ( 1 )
  else { } ;
  if x then
    while b do
      y = 13
  else { } ;
  b = 0 ;
  b = 0 ;
  x = 0
}

*******************

AST
If (Uminus (Const 1)) (Assign "b" (Const 1)) (If (Binop Times (Uminus (Var "y")) (Const 1)) (Assign "z" (Var "b")) (Seq []))
 was printed as
*******************
if - ( 1 ) then b = 1 else if - y * 1 then z = b else { }

*******************
but expected
*******************
if - ( 1 ) then
  b = 1
else if - y * 1 then
  z = b
else { }

*******************

AST
Seq [Assign "a" (Uminus (Var "z")),If (Const 0) (While (Var "z") (Assign "a" (Uminus (Binop Or (Const (-22)) (Binop Div (Var "z") (Binop LessEq (Var "y") (Binop And (Var "z") (Const (-30))))))))) (Seq [Assign "x" (Binop Div (Const 26) (Const (-30))),Assign "x" (Var "b")]),Assign "b" (Const 5),Assign "y" (Var "a"),Assign "x" (Const 0),While (Binop Equal (Const (-1)) (Const (-23))) (Seq []),Assign "b" (Var "b"),Assign "x" (Binop LessEq (Const 0) (Binop LessEq (Var "x") (Var "a"))),If (Const 0) (If (Binop Less (Const 1) (Const (-17))) (Seq []) (Seq [])) (Seq [Assign "z" (Var "z")]),Assign "y" (Binop Div (Const 0) (Const 1)),Assign "b" (Var "y"),While (Binop Equal (Var "x") (Var "y")) (Assign "z" (Binop Plus (Const 0) (Binop Less (Var "y") (Var "z")))),If (Var "z") (Assign "a" (Const 1)) (Assign "a" (Binop Less (Var "y") (Const 0))),If (Uminus (Const 1)) (Assign "z" (Const 1)) (Assign "x" (Binop Equal (Var "b") (Binop Div (Var "x") (Binop Less (Uminus (Const 0)) (Uminus (Const 0))))))]
 was printed as
*******************
{ a = - z ; if 0 then while z do a = - ( -22 || z / ( y <= ( z && -30 ) ) ) else { x = 26 / -30 ; x = b } ; b = 5 ; y = a ; x = 0 ; while -1 == -23 do { } ; b = b ; x = 0 <= ( x <= a ) ; if 0 then if 1 < -17 then { } else { } else { z = z } ; y = 0 / 1 ; b = y ; while x == y do z = 0 + ( y < z ) ; if z then a = 1 else a = y < 0 ; if - ( 1 ) then z = 1 else x = b == x / ( - ( 0 ) < - ( 0 ) ) }

*******************
but expected
*******************
{
  a = - z ;
  if 0 then
    while z do
      a = - ( -22 || z / ( y <= ( z && -30 ) ) )
  else {
    x = 26 / -30 ;
    x = b
  } ;
  b = 5 ;
  y = a ;
  x = 0 ;
  while -1 == -23 do { } ;
  b = b ;
  x = 0 <= ( x <= a ) ;
  if 0 then
    if 1 < -17 then { } else { }
  else {
    z = z
  } ;
  y = 0 / 1 ;
  b = y ;
  while x == y do
    z = 0 + ( y < z ) ;
  if z then
    a = 1
  else
    a = y < 0 ;
  if - ( 1 ) then
    z = 1
  else
    x = b == x / ( - ( 0 ) < - ( 0 ) )
}

*******************

AST
If (Var "b") (Seq [Assign "x" (Binop Div (Binop Div (Uminus (Const 1)) (Var "z")) (Uminus (Const (-1)))),Assign "y" (Const 1),Assign "y" (Const (-17)),Assign "z" (Var "z"),Assign "a" (Uminus (Uminus (Var "a")))]) (Assign "b" (Binop Equal (Binop Or (Uminus (Var "a")) (Binop Equal (Const 0) (Binop Or (Var "x") (Binop Times (Var "a") (Const 1))))) (Var "a")))
 was printed as
*******************
if b then { x = - ( 1 ) / z / - ( -1 ) ; y = 1 ; y = -17 ; z = z ; a = - ( - a ) } else b = ( - a || 0 == ( x || a * 1 ) ) == a

*******************
but expected
*******************
if b then {
  x = - ( 1 ) / z / - ( -1 ) ;
  y = 1 ;
  y = -17 ;
  z = z ;
  a = - ( - a )
} else
  b = ( - a || 0 == ( x || a * 1 ) ) == a

*******************

AST
Seq [Assign "z" (Var "x"),Assign "b" (Var "a"),Assign "y" (Const 1),While (Var "a") (Assign "y" (Var "x")),Assign "a" (Binop Equal (Uminus (Binop Plus (Binop LessEq (Binop LessEq (Const 4) (Var "z")) (Var "b")) (Const 3))) (Uminus (Var "y"))),Assign "z" (Binop Minus (Var "x") (Binop Less (Binop Times (Const (-7)) (Uminus (Var "x"))) (Uminus (Binop Or (Uminus (Const 1)) (Const 1))))),Assign "x" (Const 1),Assign "y" (Uminus (Const 0)),Assign "y" (Const 0),Assign "x" (Const 0),While (Const 9) (If (Const 9) (Seq []) (Seq [])),Assign "y" (Var "b"),If (Binop Plus (Const 18) (Uminus (Uminus (Const 0)))) (Seq []) (Seq []),If (Const 1) (Assign "b" (Const 4)) (Seq [Assign "b" (Binop Plus (Var "y") (Const 0))]),If (Binop Equal (Const 1) (Const 0)) (Assign "x" (Var "z")) (While (Binop And (Var "z") (Const 25)) (Seq [])),If (Const (-21)) (If (Uminus (Binop Plus (Binop Minus (Const 1) (Var "b")) (Binop Plus (Binop Equal (Binop Less (Var "y") (Const 1)) (Uminus (Const 0))) (Var "b")))) (Seq []) (Seq [])) (While (Binop LessEq (Var "y") (Uminus (Binop Or (Var "x") (Const 1)))) (Seq [])),If (Const 1) (Assign "a" (Uminus (Const (-12)))) (Assign "b" (Var "a")),While (Var "b") (If (Const 0) (Assign "y" (Const 1)) (Seq [])),Assign "y" (Binop Less (Var "b") (Binop Times (Var "y") (Var "a"))),Assign "x" (Var "z"),If (Const 1) (If (Var "z") (If (Uminus (Binop Less (Var "y") (Uminus (Const 0)))) (Assign "y" (Uminus (Binop Less (Var "a") (Const 1)))) (Seq [])) (While (Var "y") (If (Binop Equal (Uminus (Binop Less (Var "b") (Var "a"))) (Var "x")) (Seq []) (Seq [])))) (If (Binop Plus (Const 1) (Binop Or (Binop And (Uminus (Const 0)) (Binop LessEq (Binop LessEq (Var "y") (Const (-2))) (Const 0))) (Uminus (Const (-4))))) (While (Uminus (Const 1)) (Assign "y" (Var "z"))) (Assign "y" (Const 0))),Assign "z" (Uminus (Const 1)),While (Const 1) (Assign "x" (Const 11)),Assign "x" (Binop Div (Const 1) (Var "y")),If (Const 0) (While (Const 1) (While (Var "y") (Seq []))) (Seq [Assign "z" (Var "a")]),Assign "a" (Const (-7))]
 was printed as
*******************
{ z = x ; b = a ; y = 1 ; while a do y = x ; a = - ( ( 4 <= z <= b ) + 3 ) == - y ; z = x - ( -7 * - x < - ( - ( 1 ) || 1 ) ) ; x = 1 ; y = - ( 0 ) ; y = 0 ; x = 0 ; while 9 do if 9 then { } else { } ; y = b ; if 18 + - ( - ( 0 ) ) then { } else { } ; if 1 then b = 4 else { b = y + 0 } ; if 1 == 0 then x = z else while z && 25 do { } ; if -21 then if - ( 1 - b + ( ( y < 1 == - ( 0 ) ) + b ) ) then { } else { } else while y <= - ( x || 1 ) do { } ; if 1 then a = - ( -12 ) else b = a ; while b do if 0 then y = 1 else { } ; y = b < y * a ; x = z ; if 1 then if z then if - ( y < - ( 0 ) ) then y = - ( a < 1 ) else { } else while y do if - ( b < a ) == x then { } else { } else if 1 + ( - ( 0 ) && y <= -2 <= 0 || - ( -4 ) ) then while - ( 1 ) do y = z else y = 0 ; z = - ( 1 ) ; while 1 do x = 11 ; x = 1 / y ; if 0 then while 1 do while y do { } else { z = a } ; a = -7 }

*******************
but expected
*******************
{
  z = x ;
  b = a ;
  y = 1 ;
  while a do
    y = x ;
  a = - ( ( 4 <= z <= b ) + 3 ) == - y ;
  z = x - ( -7 * - x < - ( - ( 1 ) || 1 ) ) ;
  x = 1 ;
  y = - ( 0 ) ;
  y = 0 ;
  x = 0 ;
  while 9 do
    if 9 then { } else { } ;
  y = b ;
  if 18 + - ( - ( 0 ) ) then { } else { } ;
  if 1 then
    b = 4
  else {
    b = y + 0
  } ;
  if 1 == 0 then
    x = z
  else
    while z && 25 do { } ;
  if -21 then
    if - ( 1 - b + ( ( y < 1 == - ( 0 ) ) + b ) ) then { } else { }
  else
    while y <= - ( x || 1 ) do { } ;
  if 1 then
    a = - ( -12 )
  else
    b = a ;
  while b do
    if 0 then
      y = 1
    else { } ;
  y = b < y * a ;
  x = z ;
  if 1 then
    if z then
      if - ( y < - ( 0 ) ) then
        y = - ( a < 1 )
      else { }
    else
      while y do
        if - ( b < a ) == x then { } else { }
  else if 1 + ( - ( 0 ) && y <= -2 <= 0 || - ( -4 ) ) then
    while - ( 1 ) do
      y = z
  else
    y = 0 ;
  z = - ( 1 ) ;
  while 1 do
    x = 11 ;
  x = 1 / y ;
  if 0 then
    while 1 do
      while y do { }
  else {
    z = a
  } ;
  a = -7
}

*******************

AST
If (Const (-8)) (Seq [Assign "y" (Var "b"),Assign "z" (Uminus (Binop Less (Binop Equal (Binop Div (Const 0) (Const 0)) (Const 29)) (Uminus (Const 1)))),Assign "a" (Var "a"),Assign "a" (Binop Minus (Var "a") (Const 0)),If (Binop Minus (Const 1) (Var "a")) (Assign "y" (Binop Equal (Const 1) (Binop Div (Var "x") (Uminus (Binop LessEq (Binop And (Const 0) (Var "x")) (Var "b")))))) (Assign "b" (Binop LessEq (Uminus (Const 0)) (Binop Minus (Uminus (Var "z")) (Const (-27))))),Assign "x" (Const 0),Assign "b" (Binop Or (Var "a") (Var "x")),Assign "z" (Uminus (Var "z"))]) (If (Uminus (Const 0)) (Seq []) (If (Binop Equal (Var "b") (Uminus (Binop Minus (Var "b") (Uminus (Const 0))))) (Assign "x" (Const 0)) (If (Const 0) (Assign "b" (Const 1)) (Seq []))))
 was printed as
*******************
if -8 then { y = b ; z = - ( 0 / 0 == 29 < - ( 1 ) ) ; a = a ; a = a -0 ; if 1 - a then y = 1 == x / - ( ( 0 && x ) <= b ) else b = - ( 0 ) <= - z - -27 ; x = 0 ; b = a || x ; z = - z } else if - ( 0 ) then { } else if b == - ( b - - ( 0 ) ) then x = 0 else if 0 then b = 1 else { }

*******************
but expected
*******************
if -8 then {
  y = b ;
  z = - ( 0 / 0 == 29 < - ( 1 ) ) ;
  a = a ;
  a = a -0 ;
  if 1 - a then
    y = 1 == x / - ( ( 0 && x ) <= b )
  else
    b = - ( 0 ) <= - z - -27 ;
  x = 0 ;
  b = a || x ;
  z = - z
} else if - ( 0 ) then { } else if b == - ( b - - ( 0 ) ) then
  x = 0
else if 0 then
  b = 1
else { }

*******************

AST
While (Var "a") (Assign "b" (Binop Equal (Uminus (Const (-4))) (Var "z")))
 was printed as
*******************
while a do b = - ( -4 ) == z

*******************
but expected
*******************
while a do
  b = - ( -4 ) == z

*******************

AST
While (Var "z") (Seq [Assign "z" (Const 0),Assign "y" (Uminus (Uminus (Const 1))),Assign "y" (Binop Div (Const 1) (Var "x")),Assign "a" (Const 1),Assign "b" (Const (-13)),If (Uminus (Uminus (Const 11))) (Seq []) (Assign "y" (Const (-13)))])
 was printed as
*******************
while z do { z = 0 ; y = - ( - ( 1 ) ) ; y = 1 / x ; a = 1 ; b = -13 ; if - ( - ( 11 ) ) then { } else y = -13 }

*******************
but expected
*******************
while z do {
  z = 0 ;
  y = - ( - ( 1 ) ) ;
  y = 1 / x ;
  a = 1 ;
  b = -13 ;
  if - ( - ( 11 ) ) then { } else
    y = -13
}

*******************

AST
If (Const 1) (Assign "a" (Var "z")) (Seq [While (Uminus (Var "z")) (Assign "y" (Binop Less (Uminus (Var "x")) (Const (-29)))),While (Uminus (Uminus (Var "z"))) (Assign "a" (Binop Less (Var "z") (Var "a"))),Assign "a" (Binop Equal (Const (-24)) (Const 1)),While (Const 1) (Assign "z" (Binop LessEq (Var "b") (Binop Div (Uminus (Var "x")) (Const (-13))))),While (Var "b") (If (Var "b") (Seq []) (Seq []))])
 was printed as
*******************
if 1 then a = z else { while - z do y = - x < -29 ; while - ( - z ) do a = z < a ; a = -24 == 1 ; while 1 do z = b <= - x / -13 ; while b do if b then { } else { } }

*******************
but expected
*******************
if 1 then
  a = z
else {
  while - z do
    y = - x < -29 ;
  while - ( - z ) do
    a = z < a ;
  a = -24 == 1 ;
  while 1 do
    z = b <= - x / -13 ;
  while b do
    if b then { } else { }
}

*******************

AST
Seq [While (Binop Plus (Var "b") (Var "x")) (Seq [Assign "b" (Const 1),Assign "b" (Var "b"),If (Var "b") (Seq []) (Seq [])]),If (Uminus (Binop Equal (Uminus (Var "z")) (Var "a"))) (Assign "b" (Const 0)) (Assign "b" (Const 0)),While (Var "a") (Assign "a" (Uminus (Uminus (Var "a")))),If (Var "b") (If (Const 6) (If (Binop Less (Const 0) (Var "z")) (Seq []) (Assign "b" (Var "y"))) (Assign "y" (Const 0))) (Seq [Assign "b" (Const 1),Assign "a" (Binop Less (Var "a") (Var "b")),Assign "z" (Binop And (Var "y") (Const 7))]),Assign "a" (Const 0),Assign "z" (Uminus (Var "z")),If (Const 0) (Assign "z" (Var "z")) (Assign "a" (Var "y")),If (Const (-19)) (If (Const 0) (If (Binop Minus (Var "b") (Var "y")) (Assign "y" (Var "y")) (Assign "x" (Const 0))) (If (Binop LessEq (Const 0) (Const 1)) (While (Binop Times (Var "y") (Var "y")) (Seq [])) (Assign "b" (Const (-26))))) (If (Binop And (Const 1) (Binop Minus (Binop Plus (Const (-24)) (Var "x")) (Const 0))) (Seq []) (Assign "a" (Const (-4)))),While (Var "b") (Seq []),While (Var "y") (Assign "x" (Const 0)),Assign "z" (Binop Or (Var "a") (Const 1)),If (Var "b") (Assign "y" (Uminus (Binop Less (Var "x") (Binop LessEq (Const 0) (Var "a"))))) (Seq []),Assign "x" (Binop Div (Const 0) (Const 0)),Assign "y" (Binop Less (Const 1) (Const 1)),Assign "z" (Binop Plus (Const 13) (Binop Less (Const (-29)) (Var "a"))),While (Uminus (Binop Less (Uminus (Const 0)) (Uminus (Var "b")))) (While (Var "a") (While (Const 0) (Seq []))),Assign "x" (Const 0)]
 was printed as
*******************
{ while b + x do { b = 1 ; b = b ; if b then { } else { } } ; if - ( - z == a ) then b = 0 else b = 0 ; while a do a = - ( - a ) ; if b then if 6 then if 0 < z then { } else b = y else y = 0 else { b = 1 ; a = a < b ; z = y && 7 } ; a = 0 ; z = - z ; if 0 then z = z else a = y ; if -19 then if 0 then if b - y then y = y else x = 0 else if 0 <= 1 then while y * y do { } else b = -26 else if 1 && -24 + x -0 then { } else a = -4 ; while b do { } ; while y do x = 0 ; z = a || 1 ; if b then y = - ( x < ( 0 <= a ) ) else { } ; x = 0 / 0 ; y = 1 < 1 ; z = 13 + ( -29 < a ) ; while - ( - ( 0 ) < - b ) do while a do while 0 do { } ; x = 0 }

*******************
but expected
*******************
{
  while b + x do {
    b = 1 ;
    b = b ;
    if b then { } else { }
  } ;
  if - ( - z == a ) then
    b = 0
  else
    b = 0 ;
  while a do
    a = - ( - a ) ;
  if b then
    if 6 then
      if 0 < z then { } else
        b = y
    else
      y = 0
  else {
    b = 1 ;
    a = a < b ;
    z = y && 7
  } ;
  a = 0 ;
  z = - z ;
  if 0 then
    z = z
  else
    a = y ;
  if -19 then
    if 0 then
      if b - y then
        y = y
      else
        x = 0
    else if 0 <= 1 then
      while y * y do { }
    else
      b = -26
  else if 1 && -24 + x -0 then { } else
    a = -4 ;
  while b do { } ;
  while y do
    x = 0 ;
  z = a || 1 ;
  if b then
    y = - ( x < ( 0 <= a ) )
  else { } ;
  x = 0 / 0 ;
  y = 1 < 1 ;
  z = 13 + ( -29 < a ) ;
  while - ( - ( 0 ) < - b ) do
    while a do
      while 0 do { } ;
  x = 0
}

*******************

AST
While (Const 0) (Assign "a" (Var "x"))
 was printed as
*******************
while 0 do a = x

*******************
but expected
*******************
while 0 do
  a = x

*******************

AST
If (Binop And (Const 0) (Var "x")) (Seq [Assign "z" (Var "y"),If (Var "z") (Assign "a" (Const 0)) (Seq []),Assign "a" (Const (-24)),If (Var "b") (Seq []) (Seq []),Assign "b" (Uminus (Const 0)),If (Var "y") (Assign "a" (Binop Times (Binop Less (Const 24) (Const 0)) (Binop And (Binop Times (Var "b") (Binop Times (Uminus (Var "b")) (Uminus (Var "z")))) (Const 1)))) (If (Const 1) (Seq []) (Seq [])),Assign "b" (Binop Equal (Const (-20)) (Var "z")),Assign "b" (Uminus (Const 0))]) (Assign "x" (Var "z"))
 was printed as
*******************
if 0 && x then { z = y ; if z then a = 0 else { } ; a = -24 ; if b then { } else { } ; b = - ( 0 ) ; if y then a = ( 24 < 0 ) * ( b * ( - b * - z ) && 1 ) else if 1 then { } else { } ; b = -20 == z ; b = - ( 0 ) } else x = z

*******************
but expected
*******************
if 0 && x then {
  z = y ;
  if z then
    a = 0
  else { } ;
  a = -24 ;
  if b then { } else { } ;
  b = - ( 0 ) ;
  if y then
    a = ( 24 < 0 ) * ( b * ( - b * - z ) && 1 )
  else if 1 then { } else { } ;
  b = -20 == z ;
  b = - ( 0 )
} else
  x = z

*******************

AST
If (Uminus (Const (-20))) (Assign "z" (Var "x")) (Seq [Assign "b" (Var "b"),Assign "a" (Const 1),Assign "b" (Binop Equal (Const 1) (Const 0)),Assign "a" (Binop And (Const 1) (Binop And (Binop LessEq (Const 1) (Uminus (Var "x"))) (Uminus (Var "x")))),Assign "a" (Const 1),If (Var "b") (If (Var "z") (Seq []) (Assign "x" (Const 4))) (Seq []),Assign "b" (Const 1)])
 was printed as
*******************
if - ( -20 ) then z = x else { b = b ; a = 1 ; b = 1 == 0 ; a = 1 && ( 1 <= - x && - x ) ; a = 1 ; if b then if z then { } else x = 4 else { } ; b = 1 }

*******************
but expected
*******************
if - ( -20 ) then
  z = x
else {
  b = b ;
  a = 1 ;
  b = 1 == 0 ;
  a = 1 && ( 1 <= - x && - x ) ;
  a = 1 ;
  if b then
    if z then { } else
      x = 4
  else { } ;
  b = 1
}

*******************

AST
Seq [While (Var "x") (Assign "b" (Const 9)),If (Const 0) (Assign "y" (Binop Minus (Binop Times (Binop Minus (Binop And (Var "z") (Binop Times (Var "a") (Const 1))) (Binop Plus (Const 1) (Const 1))) (Var "z")) (Var "x"))) (Seq []),If (Var "x") (Seq [If (Var "b") (Seq []) (Seq [])]) (Assign "a" (Const 0)),If (Binop And (Binop Plus (Binop Minus (Var "b") (Binop And (Const 0) (Const (-28)))) (Uminus (Binop Div (Uminus (Const 1)) (Binop Minus (Const 0) (Var "x"))))) (Uminus (Binop Or (Var "y") (Binop Times (Binop Equal (Const (-9)) (Const (-4))) (Var "x"))))) (Seq []) (Assign "x" (Binop LessEq (Binop LessEq (Uminus (Binop LessEq (Var "a") (Var "b"))) (Uminus (Var "z"))) (Const 0))),If (Binop Div (Uminus (Var "b")) (Binop Div (Binop Or (Binop Times (Var "x") (Var "a")) (Binop Div (Var "a") (Var "x"))) (Var "a"))) (Assign "a" (Var "z")) (If (Binop Less (Const 0) (Binop LessEq (Const 0) (Var "x"))) (Seq []) (Seq [])),Assign "a" (Const (-6)),If (Uminus (Const 1)) (Seq [While (Var "z") (If (Const (-5)) (Seq []) (Seq [])),Assign "b" (Binop Plus (Binop LessEq (Var "a") (Const 0)) (Var "b"))]) (If (Binop LessEq (Const (-14)) (Binop Minus (Const 11) (Var "x"))) (Assign "a" (Const 0)) (If (Binop Div (Uminus (Const 0)) (Var "b")) (Assign "a" (Binop Equal (Var "b") (Var "a"))) (Seq []))),Assign "y" (Var "a"),If (Const 14) (Seq [Assign "a" (Var "a")]) (Assign "b" (Var "y")),Assign "x" (Var "a"),Assign "z" (Uminus (Uminus (Var "a"))),If (Binop Plus (Const (-4)) (Var "a")) (Assign "z" (Binop Less (Var "a") (Uminus (Var "b")))) (If (Const 1) (While (Binop And (Binop Minus (Binop Div (Var "b") (Binop Equal (Uminus (Var "a")) (Binop Or (Const 0) (Var "z")))) (Const 1)) (Uminus (Var "x"))) (Seq [])) (Seq [])),If (Binop Or (Binop Less (Binop Equal (Binop Div (Const 1) (Var "a")) (Binop Times (Binop Plus (Var "b") (Var "z")) (Uminus (Var "y")))) (Binop And (Var "b") (Binop Equal (Var "y") (Uminus (Var "z"))))) (Binop Div (Uminus (Binop Less (Var "y") (Var "z"))) (Binop Minus (Var "y") (Binop Div (Var "b") (Var "x"))))) (Seq [Assign "y" (Var "z")]) (Seq []),Assign "y" (Const 0),Assign "x" (Var "a"),Assign "y" (Var "z"),If (Uminus (Const 0)) (If (Const 0) (If (Binop Times (Const 0) (Uminus (Binop And (Binop LessEq (Var "z") (Const 1)) (Const (-11))))) (Seq []) (Seq [])) (Assign "x" (Binop Less (Const 12) (Uminus (Var "z"))))) (Assign "z" (Binop Less (Var "y") (Binop LessEq (Var "x") (Var "x")))),Assign "x" (Binop Plus (Binop Plus (Var "b") (Const 1)) (Const 0)),Assign "b" (Var "y"),Assign "y" (Var "b"),Assign "a" (Binop Or (Binop Minus (Binop Plus (Uminus (Uminus (Var "x"))) (Binop Minus (Const 0) (Var "b"))) (Var "z")) (Var "b")),While (Const 0) (Assign "x" (Binop Minus (Const (-22)) (Const 0)))]
 was printed as
*******************
{ while x do b = 9 ; if 0 then y = ( ( z && a * 1 ) - ( 1 + 1 ) ) * z - x else { } ; if x then { if b then { } else { } } else a = 0 ; if b - ( 0 && -28 ) + - ( - ( 1 ) / ( 0 - x ) ) && - ( y || ( -9 == -4 ) * x ) then { } else x = - ( a <= b ) <= - z <= 0 ; if - b / ( ( x * a || a / x ) / a ) then a = z else if 0 < ( 0 <= x ) then { } else { } ; a = -6 ; if - ( 1 ) then { while z do if -5 then { } else { } ; b = ( a <= 0 ) + b } else if -14 <= 11 - x then a = 0 else if - ( 0 ) / b then a = b == a else { } ; y = a ; if 14 then { a = a } else b = y ; x = a ; z = - ( - a ) ; if -4 + a then z = a < - b else if 1 then while b / ( - a == ( 0 || z ) ) -1 && - x do { } else { } ; if 1 / a == ( b + z ) * - y < ( b && y == - z ) || - ( y < z ) / ( y - b / x ) then { y = z } else { } ; y = 0 ; x = a ; y = z ; if - ( 0 ) then if 0 then if 0 * - ( z <= 1 && -11 ) then { } else { } else x = 12 < - z else z = y < ( x <= x ) ; x = b + 1 + 0 ; b = y ; y = b ; a = - ( - x ) + ( 0 - b ) - z || b ; while 0 do x = -22 -0 }

*******************
but expected
*******************
{
  while x do
    b = 9 ;
  if 0 then
    y = ( ( z && a * 1 ) - ( 1 + 1 ) ) * z - x
  else { } ;
  if x then {
    if b then { } else { }
  } else
    a = 0 ;
  if b - ( 0 && -28 ) + - ( - ( 1 ) / ( 0 - x ) ) && - ( y || ( -9 == -4 ) * x ) then { } else
    x = - ( a <= b ) <= - z <= 0 ;
  if - b / ( ( x * a || a / x ) / a ) then
    a = z
  else if 0 < ( 0 <= x ) then { } else { } ;
  a = -6 ;
  if - ( 1 ) then {
    while z do
      if -5 then { } else { } ;
    b = ( a <= 0 ) + b
  } else if -14 <= 11 - x then
    a = 0
  else if - ( 0 ) / b then
    a = b == a
  else { } ;
  y = a ;
  if 14 then {
    a = a
  } else
    b = y ;
  x = a ;
  z = - ( - a ) ;
  if -4 + a then
    z = a < - b
  else if 1 then
    while b / ( - a == ( 0 || z ) ) -1 && - x do { }
  else { } ;
  if 1 / a == ( b + z ) * - y < ( b && y == - z ) || - ( y < z ) / ( y - b / x ) then {
    y = z
  } else { } ;
  y = 0 ;
  x = a ;
  y = z ;
  if - ( 0 ) then
    if 0 then
      if 0 * - ( z <= 1 && -11 ) then { } else { }
    else
      x = 12 < - z
  else
    z = y < ( x <= x ) ;
  x = b + 1 + 0 ;
  b = y ;
  y = b ;
  a = - ( - x ) + ( 0 - b ) - z || b ;
  while 0 do
    x = -22 -0
}

*******************

AST
Seq [If (Var "z") (Assign "b" (Binop Less (Var "b") (Binop Less (Var "y") (Const 1)))) (Seq [While (Var "b") (Seq [])]),Assign "z" (Var "b"),Assign "b" (Uminus (Binop Times (Binop Less (Const (-25)) (Binop And (Binop Times (Var "z") (Const (-8))) (Const (-29)))) (Var "x"))),Assign "a" (Uminus (Binop And (Const 0) (Const 1))),Assign "x" (Const 1),Assign "y" (Var "y"),While (Binop Or (Binop Plus (Binop Plus (Uminus (Const 12)) (Var "a")) (Uminus (Var "b"))) (Const (-20))) (If (Const 28) (Assign "b" (Binop Or (Var "a") (Const (-27)))) (If (Const 1) (If (Binop Plus (Var "z") (Binop Times (Var "a") (Const 18))) (Seq []) (Seq [])) (If (Var "b") (Seq []) (Seq [])))),Assign "a" (Binop Div (Binop And (Var "b") (Var "b")) (Const 14)),While (Binop Plus (Var "b") (Const (-1))) (Assign "x" (Const 1)),Assign "b" (Var "y"),Assign "x" (Binop Minus (Var "x") (Var "a")),Assign "a" (Const 0),Assign "x" (Uminus (Binop LessEq (Binop And (Const 7) (Const 0)) (Const (-5)))),If (Const 0) (Assign "x" (Binop Times (Var "x") (Binop LessEq (Binop Plus (Binop Or (Var "a") (Binop Div (Const (-27)) (Const 9))) (Var "b")) (Binop LessEq (Binop Less (Var "y") (Uminus (Const 1))) (Var "a"))))) (Seq [])]
 was printed as
*******************
{ if z then b = b < ( y < 1 ) else { while b do { } } ; z = b ; b = - ( ( -25 < ( z * -8 && -29 ) ) * x ) ; a = - ( 0 && 1 ) ; x = 1 ; y = y ; while - ( 12 ) + a + - b || -20 do if 28 then b = a || -27 else if 1 then if z + a * 18 then { } else { } else if b then { } else { } ; a = ( b && b ) / 14 ; while b + -1 do x = 1 ; b = y ; x = x - a ; a = 0 ; x = - ( ( 7 && 0 ) <= -5 ) ; if 0 then x = x * ( ( a || -27 / 9 ) + b <= ( y < - ( 1 ) <= a ) ) else { } }

*******************
but expected
*******************
{
  if z then
    b = b < ( y < 1 )
  else {
    while b do { }
  } ;
  z = b ;
  b = - ( ( -25 < ( z * -8 && -29 ) ) * x ) ;
  a = - ( 0 && 1 ) ;
  x = 1 ;
  y = y ;
  while - ( 12 ) + a + - b || -20 do
    if 28 then
      b = a || -27
    else if 1 then
      if z + a * 18 then { } else { }
    else if b then { } else { } ;
  a = ( b && b ) / 14 ;
  while b + -1 do
    x = 1 ;
  b = y ;
  x = x - a ;
  a = 0 ;
  x = - ( ( 7 && 0 ) <= -5 ) ;
  if 0 then
    x = x * ( ( a || -27 / 9 ) + b <= ( y < - ( 1 ) <= a ) )
  else { }
}

*******************

AST
If (Binop Or (Var "x") (Var "a")) (Seq [Assign "y" (Var "x"),If (Const (-14)) (Assign "y" (Binop And (Binop Equal (Uminus (Const 1)) (Uminus (Const (-6)))) (Uminus (Binop Div (Binop LessEq (Const 1) (Var "x")) (Binop Plus (Binop Less (Var "x") (Const (-29))) (Var "b")))))) (Seq []),If (Const 0) (Seq []) (Seq []),If (Var "y") (Assign "b" (Const 15)) (Seq []),If (Const 8) (If (Uminus (Var "a")) (Assign "a" (Var "b")) (Assign "z" (Var "y"))) (Assign "y" (Binop Div (Var "b") (Binop Minus (Binop Less (Const 1) (Binop Times (Const (-21)) (Const 21))) (Const 1)))),If (Var "y") (Seq []) (Assign "a" (Const 15)),Assign "a" (Const 0),Assign "y" (Var "a"),If (Const 1) (Seq []) (Assign "x" (Binop Plus (Const (-9)) (Binop Minus (Const (-23)) (Var "a")))),Assign "b" (Uminus (Var "a"))]) (If (Uminus (Binop Plus (Const 0) (Const 16))) (Assign "b" (Const 1)) (While (Binop Minus (Var "b") (Var "y")) (Seq [])))
 was printed as
*******************
if x || a then { y = x ; if -14 then y = - ( 1 ) == - ( -6 ) && - ( ( 1 <= x ) / ( ( x < -29 ) + b ) ) else { } ; if 0 then { } else { } ; if y then b = 15 else { } ; if 8 then if - a then a = b else z = y else y = b / ( ( 1 < -21 * 21 ) -1 ) ; if y then { } else a = 15 ; a = 0 ; y = a ; if 1 then { } else x = -9 + ( -23 - a ) ; b = - a } else if - ( 0 + 16 ) then b = 1 else while b - y do { }

*******************
but expected
*******************
if x || a then {
  y = x ;
  if -14 then
    y = - ( 1 ) == - ( -6 ) && - ( ( 1 <= x ) / ( ( x < -29 ) + b ) )
  else { } ;
  if 0 then { } else { } ;
  if y then
    b = 15
  else { } ;
  if 8 then
    if - a then
      a = b
    else
      z = y
  else
    y = b / ( ( 1 < -21 * 21 ) -1 ) ;
  if y then { } else
    a = 15 ;
  a = 0 ;
  y = a ;
  if 1 then { } else
    x = -9 + ( -23 - a ) ;
  b = - a
} else if - ( 0 + 16 ) then
  b = 1
else
  while b - y do { }

*******************

AST
While (Var "b") (Assign "y" (Const 0))
 was printed as
*******************
while b do y = 0

*******************
but expected
*******************
while b do
  y = 0

*******************

AST
While (Const (-26)) (If (Const (-24)) (If (Var "x") (Seq []) (If (Var "y") (Assign "b" (Const (-21))) (Assign "b" (Uminus (Var "z"))))) (Seq []))
 was printed as
*******************
while -26 do if -24 then if x then { } else if y then b = -21 else b = - z else { }

*******************
but expected
*******************
while -26 do
  if -24 then
    if x then { } else if y then
      b = -21
    else
      b = - z
  else { }

*******************

AST
Seq [While (Var "y") (Assign "x" (Var "x")),Assign "a" (Const 1),If (Var "y") (If (Binop Div (Const 1) (Binop Plus (Uminus (Binop Less (Var "x") (Uminus (Var "z")))) (Uminus (Const 0)))) (Seq []) (Assign "y" (Const (-22)))) (Seq []),Assign "a" (Uminus (Var "b")),Assign "y" (Var "x"),If (Uminus (Const 0)) (Assign "x" (Var "b")) (Assign "z" (Binop LessEq (Var "b") (Const 11))),While (Var "x") (If (Var "x") (Seq [Assign "z" (Var "x")]) (Assign "b" (Var "z"))),Assign "y" (Var "x"),If (Uminus (Uminus (Uminus (Const 0)))) (Seq [While (Binop Equal (Const 0) (Uminus (Binop Minus (Binop Less (Uminus (Const 24)) (Var "x")) (Var "y")))) (Assign "b" (Const 0)),While (Binop Equal (Var "x") (Var "b")) (If (Binop Less (Var "z") (Binop Div (Var "y") (Var "z"))) (Seq []) (Seq [])),Assign "a" (Binop Plus (Var "z") (Const 1))]) (Assign "z" (Const 0)),Assign "b" (Var "z")]
 was printed as
*******************
{ while y do x = x ; a = 1 ; if y then if 1 / ( - ( x < - z ) + - ( 0 ) ) then { } else y = -22 else { } ; a = - b ; y = x ; if - ( 0 ) then x = b else z = b <= 11 ; while x do if x then { z = x } else b = z ; y = x ; if - ( - ( - ( 0 ) ) ) then { while 0 == - ( ( - ( 24 ) < x ) - y ) do b = 0 ; while x == b do if z < y / z then { } else { } ; a = z + 1 } else z = 0 ; b = z }

*******************
but expected
*******************
{
  while y do
    x = x ;
  a = 1 ;
  if y then
    if 1 / ( - ( x < - z ) + - ( 0 ) ) then { } else
      y = -22
  else { } ;
  a = - b ;
  y = x ;
  if - ( 0 ) then
    x = b
  else
    z = b <= 11 ;
  while x do
    if x then {
      z = x
    } else
      b = z ;
  y = x ;
  if - ( - ( - ( 0 ) ) ) then {
    while 0 == - ( ( - ( 24 ) < x ) - y ) do
      b = 0 ;
    while x == b do
      if z < y / z then { } else { } ;
    a = z + 1
  } else
    z = 0 ;
  b = z
}

*******************

AST
Seq [Assign "z" (Const 1),Assign "y" (Binop Div (Binop Div (Var "y") (Binop Less (Binop Times (Binop Plus (Var "z") (Const 0)) (Var "y")) (Binop LessEq (Binop Less (Const 0) (Const 0)) (Uminus (Const 1))))) (Uminus (Var "b"))),Assign "a" (Const 1),Assign "z" (Binop Minus (Binop Less (Binop Less (Var "x") (Const 14)) (Var "x")) (Uminus (Const 0))),Assign "x" (Var "x"),If (Binop Minus (Binop LessEq (Binop Minus (Const 0) (Var "a")) (Var "y")) (Const 8)) (Seq []) (While (Binop Less (Const 0) (Const 0)) (Assign "y" (Const 1))),If (Var "z") (While (Var "z") (Seq [])) (Assign "x" (Var "a")),If (Const 1) (Seq []) (Assign "x" (Binop Minus (Var "z") (Var "x"))),Assign "y" (Binop Times (Binop Div (Const 0) (Binop Minus (Binop Minus (Var "x") (Var "b")) (Var "x"))) (Var "z")),Assign "x" (Var "z"),If (Binop Times (Var "b") (Binop And (Var "b") (Const 0))) (Assign "x" (Const 0)) (Seq [While (Binop Plus (Uminus (Binop Plus (Const 0) (Const 0))) (Uminus (Binop And (Const 0) (Var "a")))) (Seq []),Assign "a" (Uminus (Var "b")),If (Var "z") (Assign "z" (Binop Or (Var "z") (Uminus (Var "x")))) (Seq [])]),Assign "z" (Uminus (Binop And (Uminus (Binop Plus (Uminus (Var "y")) (Const 1))) (Binop Plus (Binop Minus (Binop Minus (Const 0) (Var "z")) (Uminus (Var "y"))) (Binop Plus (Uminus (Const 1)) (Uminus (Var "x")))))),If (Uminus (Var "a")) (Seq [Assign "y" (Var "y")]) (While (Var "a") (Assign "b" (Const 1))),If (Binop Times (Binop Plus (Binop Minus (Var "b") (Binop Minus (Uminus (Var "x")) (Const 1))) (Const 6)) (Binop Times (Var "x") (Const 8))) (Assign "z" (Binop LessEq (Const (-11)) (Binop Equal (Var "z") (Const 0)))) (While (Const 0) (If (Const (-17)) (Seq []) (Seq []))),Assign "x" (Const 0),Assign "a" (Var "b"),If (Var "z") (Assign "z" (Binop Minus (Const (-17)) (Var "x"))) (Assign "z" (Binop Less (Var "z") (Binop Times (Const 0) (Var "a")))),Assign "a" (Binop Equal (Const 0) (Const (-27))),Assign "x" (Var "y"),If (Var "y") (Assign "a" (Binop Equal (Var "z") (Binop Minus (Const 1) (Const 17)))) (Seq [Assign "b" (Binop Equal (Var "z") (Binop Or (Const 1) (Var "y")))]),While (Uminus (Var "z")) (Assign "y" (Const 0)),Assign "y" (Const 1),Assign "y" (Binop Plus (Binop Minus (Var "a") (Uminus (Var "a"))) (Var "a")),Assign "b" (Binop Less (Binop Plus (Var "b") (Binop Equal (Binop Plus (Var "y") (Binop Div (Var "a") (Const 20))) (Uminus (Const 0)))) (Var "b")),While (Binop And (Binop Plus (Binop Or (Const 0) (Var "x")) (Const 1)) (Const 18)) (If (Uminus (Binop LessEq (Var "z") (Binop Plus (Binop Minus (Binop And (Const 18) (Var "x")) (Var "y")) (Const 23)))) (Assign "z" (Var "y")) (If (Binop Plus (Binop Plus (Binop Equal (Binop LessEq (Const 1) (Var "z")) (Const 1)) (Var "y")) (Binop Equal (Binop Less (Const 0) (Uminus (Var "a"))) (Uminus (Const 0)))) (Seq []) (Seq []))),While (Var "z") (Seq [If (Var "b") (Seq []) (Seq [])]),While (Var "z") (If (Binop Or (Var "b") (Var "b")) (Assign "a" (Const 0)) (Seq []))]
 was printed as
*******************
{ z = 1 ; y = y / ( ( z + 0 ) * y < ( 0 < 0 <= - ( 1 ) ) ) / - b ; a = 1 ; z = ( x < 14 < x ) - - ( 0 ) ; x = x ; if ( 0 - a <= y ) -8 then { } else while 0 < 0 do y = 1 ; if z then while z do { } else x = a ; if 1 then { } else x = z - x ; y = 0 / ( x - b - x ) * z ; x = z ; if b * ( b && 0 ) then x = 0 else { while - ( 0 + 0 ) + - ( 0 && a ) do { } ; a = - b ; if z then z = z || - x else { } } ; z = - ( - ( - y + 1 ) && 0 - z - - y + ( - ( 1 ) + - x ) ) ; if - a then { y = y } else while a do b = 1 ; if ( b - ( - x -1 ) + 6 ) * ( x * 8 ) then z = -11 <= ( z == 0 ) else while 0 do if -17 then { } else { } ; x = 0 ; a = b ; if z then z = -17 - x else z = z < 0 * a ; a = 0 == -27 ; x = y ; if y then a = z == 1 -17 else { b = z == ( 1 || y ) } ; while - z do y = 0 ; y = 1 ; y = a - - a + a ; b = b + ( y + a / 20 == - ( 0 ) ) < b ; while ( 0 || x ) + 1 && 18 do if - ( z <= ( 18 && x ) - y + 23 ) then z = y else if ( 1 <= z == 1 ) + y + ( 0 < - a == - ( 0 ) ) then { } else { } ; while z do { if b then { } else { } } ; while z do if b || b then a = 0 else { } }

*******************
but expected
*******************
{
  z = 1 ;
  y = y / ( ( z + 0 ) * y < ( 0 < 0 <= - ( 1 ) ) ) / - b ;
  a = 1 ;
  z = ( x < 14 < x ) - - ( 0 ) ;
  x = x ;
  if ( 0 - a <= y ) -8 then { } else
    while 0 < 0 do
      y = 1 ;
  if z then
    while z do { }
  else
    x = a ;
  if 1 then { } else
    x = z - x ;
  y = 0 / ( x - b - x ) * z ;
  x = z ;
  if b * ( b && 0 ) then
    x = 0
  else {
    while - ( 0 + 0 ) + - ( 0 && a ) do { } ;
    a = - b ;
    if z then
      z = z || - x
    else { }
  } ;
  z = - ( - ( - y + 1 ) && 0 - z - - y + ( - ( 1 ) + - x ) ) ;
  if - a then {
    y = y
  } else
    while a do
      b = 1 ;
  if ( b - ( - x -1 ) + 6 ) * ( x * 8 ) then
    z = -11 <= ( z == 0 )
  else
    while 0 do
      if -17 then { } else { } ;
  x = 0 ;
  a = b ;
  if z then
    z = -17 - x
  else
    z = z < 0 * a ;
  a = 0 == -27 ;
  x = y ;
  if y then
    a = z == 1 -17
  else {
    b = z == ( 1 || y )
  } ;
  while - z do
    y = 0 ;
  y = 1 ;
  y = a - - a + a ;
  b = b + ( y + a / 20 == - ( 0 ) ) < b ;
  while ( 0 || x ) + 1 && 18 do
    if - ( z <= ( 18 && x ) - y + 23 ) then
      z = y
    else if ( 1 <= z == 1 ) + y + ( 0 < - a == - ( 0 ) ) then { } else { } ;
  while z do {
    if b then { } else { }
  } ;
  while z do
    if b || b then
      a = 0
    else { }
}

*******************

AST
Seq [Assign "b" (Const 0),Assign "x" (Binop Minus (Binop Minus (Uminus (Var "a")) (Binop Times (Uminus (Binop Minus (Var "z") (Var "x"))) (Const 1))) (Var "b")),Assign "a" (Uminus (Const 1)),Assign "x" (Binop Equal (Binop Equal (Binop Times (Const 0) (Binop Or (Var "z") (Var "y"))) (Const 0)) (Binop Less (Uminus (Uminus (Const 0))) (Const 0))),Assign "b" (Var "a"),If (Binop LessEq (Binop Plus (Const 16) (Binop And (Binop And (Binop LessEq (Var "x") (Var "b")) (Binop Or (Var "y") (Var "x"))) (Var "b"))) (Binop Div (Binop Or (Const 0) (Binop Plus (Const 1) (Binop Equal (Const 1) (Var "b")))) (Uminus (Binop Minus (Const 1) (Binop Times (Const 3) (Var "y")))))) (Seq []) (Seq [If (Const (-4)) (If (Const 0) (Seq []) (Seq [])) (Assign "a" (Binop Equal (Var "b") (Var "b")))]),If (Binop Plus (Const 0) (Var "z")) (Assign "a" (Var "a")) (Assign "b" (Var "z")),Assign "b" (Const 0),Assign "z" (Binop LessEq (Var "z") (Uminus (Var "b"))),Assign "x" (Const (-21))]
 was printed as
*******************
{ b = 0 ; x = - a - - ( z - x ) * 1 - b ; a = - ( 1 ) ; x = 0 * ( z || y ) == 0 == ( - ( - ( 0 ) ) < 0 ) ; b = a ; if 16 + ( x <= b && ( y || x ) && b ) <= ( 0 || 1 + ( 1 == b ) ) / - ( 1 -3 * y ) then { } else { if -4 then if 0 then { } else { } else a = b == b } ; if 0 + z then a = a else b = z ; b = 0 ; z = z <= - b ; x = -21 }

*******************
but expected
*******************
{
  b = 0 ;
  x = - a - - ( z - x ) * 1 - b ;
  a = - ( 1 ) ;
  x = 0 * ( z || y ) == 0 == ( - ( - ( 0 ) ) < 0 ) ;
  b = a ;
  if 16 + ( x <= b && ( y || x ) && b ) <= ( 0 || 1 + ( 1 == b ) ) / - ( 1 -3 * y ) then { } else {
    if -4 then
      if 0 then { } else { }
    else
      a = b == b
  } ;
  if 0 + z then
    a = a
  else
    b = z ;
  b = 0 ;
  z = z <= - b ;
  x = -21
}

*******************

AST
Seq [Assign "x" (Const 1),Assign "a" (Binop Times (Const 10) (Binop Equal (Uminus (Const 1)) (Binop Minus (Var "a") (Const 1)))),While (Binop Div (Binop Plus (Const (-7)) (Var "y")) (Const 22)) (Assign "x" (Const 1)),Assign "b" (Const (-22)),Assign "z" (Var "b"),Assign "x" (Const 1),If (Var "y") (While (Var "x") (Assign "b" (Var "x"))) (Assign "b" (Const 6))]
 was printed as
*******************
{ x = 1 ; a = 10 * ( - ( 1 ) == a -1 ) ; while ( -7 + y ) / 22 do x = 1 ; b = -22 ; z = b ; x = 1 ; if y then while x do b = x else b = 6 }

*******************
but expected
*******************
{
  x = 1 ;
  a = 10 * ( - ( 1 ) == a -1 ) ;
  while ( -7 + y ) / 22 do
    x = 1 ;
  b = -22 ;
  z = b ;
  x = 1 ;
  if y then
    while x do
      b = x
  else
    b = 6
}

*******************

AST
If (Binop LessEq (Var "a") (Uminus (Const 0))) (If (Var "a") (Assign "x" (Binop Div (Binop Plus (Var "z") (Binop Equal (Const 1) (Const 14))) (Var "z"))) (If (Const 0) (Seq [If (Var "z") (Seq []) (Seq [])]) (Assign "x" (Binop Less (Binop Equal (Uminus (Binop Or (Var "a") (Var "b"))) (Const 0)) (Binop And (Const 1) (Uminus (Var "z"))))))) (Assign "y" (Const (-9)))
 was printed as
*******************
if a <= - ( 0 ) then if a then x = ( z + ( 1 == 14 ) ) / z else if 0 then { if z then { } else { } } else x = - ( a || b ) == 0 < ( 1 && - z ) else y = -9

*******************
but expected
*******************
if a <= - ( 0 ) then
  if a then
    x = ( z + ( 1 == 14 ) ) / z
  else if 0 then {
    if z then { } else { }
  } else
    x = - ( a || b ) == 0 < ( 1 && - z )
else
  y = -9

*******************

AST
Seq [While (Binop Times (Uminus (Var "y")) (Const (-7))) (If (Var "z") (Seq []) (While (Uminus (Const 1)) (Seq []))),Assign "z" (Var "a"),Assign "z" (Binop Div (Const 30) (Const 1)),Assign "z" (Binop Equal (Binop Plus (Const (-22)) (Const 0)) (Uminus (Uminus (Var "a")))),If (Const 0) (Seq []) (Seq []),While (Uminus (Uminus (Binop Or (Var "y") (Binop Or (Binop Div (Var "a") (Var "b")) (Const 0))))) (Seq []),Assign "x" (Const (-19)),While (Binop And (Binop Times (Binop Plus (Const 1) (Const 1)) (Const 0)) (Uminus (Uminus (Const 0)))) (Assign "b" (Uminus (Var "x"))),Assign "y" (Var "a"),Assign "x" (Binop Times (Binop Times (Var "b") (Var "x")) (Const 3)),If (Const 1) (Seq []) (Assign "b" (Binop Or (Binop And (Binop And (Const 1) (Const 1)) (Binop Times (Binop Times (Const (-11)) (Const 0)) (Binop Div (Binop LessEq (Var "z") (Const 0)) (Var "y")))) (Const 0))),Assign "y" (Const 0),If (Const 0) (If (Var "b") (Assign "b" (Var "y")) (If (Binop Equal (Const 0) (Const 1)) (Seq []) (Seq []))) (Assign "z" (Var "z")),Assign "y" (Binop LessEq (Binop LessEq (Var "b") (Const 0)) (Const (-17))),While (Var "z") (Assign "z" (Binop Or (Var "z") (Const 0))),Assign "z" (Binop And (Var "b") (Binop Times (Binop Equal (Binop LessEq (Var "z") (Uminus (Var "z"))) (Var "x")) (Uminus (Binop Plus (Binop LessEq (Const 0) (Const 0)) (Var "y"))))),Assign "x" (Uminus (Var "y")),If (Binop Div (Const 0) (Binop Less (Binop Div (Binop And (Var "x") (Const 1)) (Uminus (Uminus (Const 26)))) (Const 0))) (Seq []) (Assign "a" (Uminus (Uminus (Binop Times (Var "x") (Const 0))))),If (Binop Minus (Const 26) (Var "z")) (Assign "b" (Binop LessEq (Binop Times (Const 1) (Var "y")) (Var "x"))) (Assign "a" (Var "b")),Assign "y" (Binop Equal (Const 0) (Uminus (Uminus (Var "y")))),Assign "b" (Var "b"),Assign "y" (Binop Or (Binop LessEq (Const 25) (Const 1)) (Uminus (Binop Equal (Const 1) (Const 21)))),Assign "y" (Binop And (Var "b") (Uminus (Const 0))),Assign "a" (Var "x"),While (Const 0) (While (Const (-11)) (Seq [])),Assign "z" (Var "z"),While (Binop Times (Const 0) (Const 1)) (Seq [Assign "z" (Const 1)])]
 was printed as
*******************
{ while - y * -7 do if z then { } else while - ( 1 ) do { } ; z = a ; z = 30 / 1 ; z = -22 + 0 == - ( - a ) ; if 0 then { } else { } ; while - ( - ( y || ( a / b || 0 ) ) ) do { } ; x = -19 ; while ( 1 + 1 ) * 0 && - ( - ( 0 ) ) do b = - x ; y = a ; x = b * x * 3 ; if 1 then { } else b = 1 && 1 && -11 * 0 * ( ( z <= 0 ) / y ) || 0 ; y = 0 ; if 0 then if b then b = y else if 0 == 1 then { } else { } else z = z ; y = b <= 0 <= -17 ; while z do z = z || 0 ; z = b && ( z <= - z == x ) * - ( ( 0 <= 0 ) + y ) ; x = - y ; if 0 / ( ( x && 1 ) / - ( - ( 26 ) ) < 0 ) then { } else a = - ( - ( x * 0 ) ) ; if 26 - z then b = 1 * y <= x else a = b ; y = 0 == - ( - y ) ; b = b ; y = 25 <= 1 || - ( 1 == 21 ) ; y = b && - ( 0 ) ; a = x ; while 0 do while -11 do { } ; z = z ; while 0 * 1 do { z = 1 } }

*******************
but expected
*******************
{
  while - y * -7 do
    if z then { } else
      while - ( 1 ) do { } ;
  z = a ;
  z = 30 / 1 ;
  z = -22 + 0 == - ( - a ) ;
  if 0 then { } else { } ;
  while - ( - ( y || ( a / b || 0 ) ) ) do { } ;
  x = -19 ;
  while ( 1 + 1 ) * 0 && - ( - ( 0 ) ) do
    b = - x ;
  y = a ;
  x = b * x * 3 ;
  if 1 then { } else
    b = 1 && 1 && -11 * 0 * ( ( z <= 0 ) / y ) || 0 ;
  y = 0 ;
  if 0 then
    if b then
      b = y
    else if 0 == 1 then { } else { }
  else
    z = z ;
  y = b <= 0 <= -17 ;
  while z do
    z = z || 0 ;
  z = b && ( z <= - z == x ) * - ( ( 0 <= 0 ) + y ) ;
  x = - y ;
  if 0 / ( ( x && 1 ) / - ( - ( 26 ) ) < 0 ) then { } else
    a = - ( - ( x * 0 ) ) ;
  if 26 - z then
    b = 1 * y <= x
  else
    a = b ;
  y = 0 == - ( - y ) ;
  b = b ;
  y = 25 <= 1 || - ( 1 == 21 ) ;
  y = b && - ( 0 ) ;
  a = x ;
  while 0 do
    while -11 do { } ;
  z = z ;
  while 0 * 1 do {
    z = 1
  }
}

*******************

AST
Seq [Assign "b" (Const 18),If (Var "x") (Seq [Assign "z" (Uminus (Uminus (Var "b"))),Assign "a" (Var "z"),Assign "a" (Const 0)]) (Seq [Assign "y" (Uminus (Var "z"))]),While (Const 0) (Assign "y" (Uminus (Binop Or (Uminus (Const (-14))) (Binop Div (Binop Equal (Const 1) (Var "a")) (Var "x"))))),If (Const 7) (Seq []) (Seq [If (Binop Minus (Const (-9)) (Const 0)) (Seq []) (Assign "y" (Var "x"))]),Assign "y" (Var "z"),Assign "x" (Const 29),Assign "b" (Const (-19))]
 was printed as
*******************
{ b = 18 ; if x then { z = - ( - b ) ; a = z ; a = 0 } else { y = - z } ; while 0 do y = - ( - ( -14 ) || ( 1 == a ) / x ) ; if 7 then { } else { if -9 -0 then { } else y = x } ; y = z ; x = 29 ; b = -19 }

*******************
but expected
*******************
{
  b = 18 ;
  if x then {
    z = - ( - b ) ;
    a = z ;
    a = 0
  } else {
    y = - z
  } ;
  while 0 do
    y = - ( - ( -14 ) || ( 1 == a ) / x ) ;
  if 7 then { } else {
    if -9 -0 then { } else
      y = x
  } ;
  y = z ;
  x = 29 ;
  b = -19
}

*******************

AST
While (Var "b") (Assign "y" (Binop Less (Binop Minus (Binop Equal (Const 1) (Binop LessEq (Binop Div (Const 1) (Const 21)) (Uminus (Var "b")))) (Binop LessEq (Binop Plus (Var "y") (Const 1)) (Uminus (Var "x")))) (Var "x")))
 was printed as
*******************
while b do y = ( 1 == ( 1 / 21 <= - b ) ) - ( y + 1 <= - x ) < x

*******************
but expected
*******************
while b do
  y = ( 1 == ( 1 / 21 <= - b ) ) - ( y + 1 <= - x ) < x

*******************

AST
Seq [Assign "a" (Const 24),Assign "y" (Binop And (Var "b") (Binop Or (Const 1) (Const (-5)))),Assign "z" (Binop Div (Uminus (Uminus (Var "y"))) (Const (-27))),Assign "a" (Var "y"),While (Const 0) (If (Var "a") (Seq []) (Seq [])),Assign "z" (Const 12),If (Binop Plus (Const (-5)) (Const 0)) (Seq [While (Uminus (Var "y")) (Seq [])]) (If (Const 1) (Assign "b" (Const 1)) (While (Var "x") (Seq []))),Assign "a" (Var "z"),Assign "b" (Const 29),Assign "a" (Const 1),Assign "b" (Var "x"),Assign "x" (Const 0),If (Const 19) (Seq [Assign "z" (Const (-29)),Assign "z" (Const 10)]) (Assign "z" (Binop Or (Const 0) (Binop Times (Const 0) (Const 1))))]
 was printed as
*******************
{ a = 24 ; y = b && ( 1 || -5 ) ; z = - ( - y ) / -27 ; a = y ; while 0 do if a then { } else { } ; z = 12 ; if -5 + 0 then { while - y do { } } else if 1 then b = 1 else while x do { } ; a = z ; b = 29 ; a = 1 ; b = x ; x = 0 ; if 19 then { z = -29 ; z = 10 } else z = 0 || 0 * 1 }

*******************
but expected
*******************
{
  a = 24 ;
  y = b && ( 1 || -5 ) ;
  z = - ( - y ) / -27 ;
  a = y ;
  while 0 do
    if a then { } else { } ;
  z = 12 ;
  if -5 + 0 then {
    while - y do { }
  } else if 1 then
    b = 1
  else
    while x do { } ;
  a = z ;
  b = 29 ;
  a = 1 ;
  b = x ;
  x = 0 ;
  if 19 then {
    z = -29 ;
    z = 10
  } else
    z = 0 || 0 * 1
}

*******************

AST
Seq [Assign "y" (Uminus (Var "y")),If (Const 1) (Assign "a" (Uminus (Const (-8)))) (While (Var "z") (Seq [])),If (Uminus (Binop Div (Binop Times (Binop And (Const 0) (Var "a")) (Var "x")) (Binop Equal (Binop Plus (Const 0) (Var "x")) (Binop Div (Var "z") (Var "x"))))) (Seq []) (Assign "x" (Const 1)),If (Binop LessEq (Binop And (Uminus (Var "b")) (Const 1)) (Const (-28))) (Assign "a" (Binop Less (Binop Or (Binop Times (Var "b") (Const 1)) (Var "z")) (Binop LessEq (Var "z") (Var "z")))) (Assign "x" (Var "x")),Assign "y" (Const (-7)),Assign "b" (Var "x"),If (Const 0) (Assign "y" (Binop Equal (Const 1) (Var "z"))) (Seq []),While (Const (-10)) (Assign "a" (Const 0)),Assign "z" (Var "x"),Assign "b" (Binop Minus (Binop And (Var "z") (Var "b")) (Var "z")),Assign "x" (Binop Times (Const 1) (Const 1)),While (Binop Minus (Var "b") (Binop Or (Var "b") (Var "z"))) (Assign "a" (Binop Plus (Const 1) (Var "y"))),Assign "y" (Binop Div (Const 23) (Const (-22))),If (Var "a") (Assign "y" (Var "x")) (Assign "b" (Const 18)),Assign "z" (Var "a"),Assign "x" (Binop Div (Uminus (Var "z")) (Const 16)),Assign "z" (Const 0),While (Binop Less (Const 1) (Binop And (Var "a") (Binop Equal (Binop LessEq (Binop Equal (Const 0) (Var "x")) (Binop Div (Const 1) (Const (-19)))) (Var "a")))) (Assign "b" (Var "z")),Assign "x" (Uminus (Uminus (Var "y"))),Assign "x" (Binop LessEq (Binop Less (Var "y") (Binop Div (Var "x") (Binop Minus (Uminus (Var "z")) (Uminus (Var "x"))))) (Var "x")),Assign "z" (Const 0),If (Const (-27)) (Assign "x" (Const 28)) (Assign "z" (Binop LessEq (Var "y") (Const 0))),Assign "x" (Uminus (Binop Div (Const 1) (Var "a")))]
 was printed as
*******************
{ y = - y ; if 1 then a = - ( -8 ) else while z do { } ; if - ( ( 0 && a ) * x / ( 0 + x == z / x ) ) then { } else x = 1 ; if ( - b && 1 ) <= -28 then a = ( b * 1 || z ) < ( z <= z ) else x = x ; y = -7 ; b = x ; if 0 then y = 1 == z else { } ; while -10 do a = 0 ; z = x ; b = ( z && b ) - z ; x = 1 * 1 ; while b - ( b || z ) do a = 1 + y ; y = 23 / -22 ; if a then y = x else b = 18 ; z = a ; x = - z / 16 ; z = 0 ; while 1 < ( a && 0 == x <= 1 / -19 == a ) do b = z ; x = - ( - y ) ; x = y < x / ( - z - - x ) <= x ; z = 0 ; if -27 then x = 28 else z = y <= 0 ; x = - ( 1 / a ) }

*******************
but expected
*******************
{
  y = - y ;
  if 1 then
    a = - ( -8 )
  else
    while z do { } ;
  if - ( ( 0 && a ) * x / ( 0 + x == z / x ) ) then { } else
    x = 1 ;
  if ( - b && 1 ) <= -28 then
    a = ( b * 1 || z ) < ( z <= z )
  else
    x = x ;
  y = -7 ;
  b = x ;
  if 0 then
    y = 1 == z
  else { } ;
  while -10 do
    a = 0 ;
  z = x ;
  b = ( z && b ) - z ;
  x = 1 * 1 ;
  while b - ( b || z ) do
    a = 1 + y ;
  y = 23 / -22 ;
  if a then
    y = x
  else
    b = 18 ;
  z = a ;
  x = - z / 16 ;
  z = 0 ;
  while 1 < ( a && 0 == x <= 1 / -19 == a ) do
    b = z ;
  x = - ( - y ) ;
  x = y < x / ( - z - - x ) <= x ;
  z = 0 ;
  if -27 then
    x = 28
  else
    z = y <= 0 ;
  x = - ( 1 / a )
}

*******************

AST
If (Const 17) (Assign "y" (Const (-6))) (If (Binop Div (Var "x") (Const 0)) (Assign "y" (Uminus (Const 1))) (If (Const 0) (Seq [Assign "z" (Const 0)]) (Assign "y" (Const 1))))
 was printed as
*******************
if 17 then y = -6 else if x / 0 then y = - ( 1 ) else if 0 then { z = 0 } else y = 1

*******************
but expected
*******************
if 17 then
  y = -6
else if x / 0 then
  y = - ( 1 )
else if 0 then {
  z = 0
} else
  y = 1

*******************

AST
Seq [Assign "x" (Var "b"),If (Const 0) (Assign "z" (Binop Less (Var "b") (Uminus (Var "b")))) (If (Binop LessEq (Const 2) (Const 0)) (If (Binop Less (Binop LessEq (Var "x") (Binop Equal (Var "z") (Const 1))) (Binop Div (Var "z") (Var "y"))) (Seq []) (Assign "x" (Var "b"))) (Assign "y" (Const 0))),While (Uminus (Var "b")) (Assign "x" (Var "x")),Assign "b" (Binop And (Uminus (Binop Plus (Uminus (Uminus (Const 19))) (Uminus (Binop Minus (Const 0) (Var "b"))))) (Binop And (Uminus (Binop LessEq (Const (-4)) (Const 0))) (Binop Plus (Binop Less (Var "b") (Const 1)) (Var "y")))),Assign "a" (Var "a"),While (Binop LessEq (Uminus (Const 1)) (Var "z")) (Assign "b" (Uminus (Binop Div (Binop Less (Uminus (Var "y")) (Var "z")) (Var "a")))),Assign "x" (Binop And (Uminus (Binop Less (Binop Or (Const 1) (Binop Or (Var "z") (Var "a"))) (Binop And (Binop Less (Const 1) (Var "x")) (Binop Div (Const 0) (Var "y"))))) (Binop And (Binop Minus (Const 0) (Var "z")) (Const 0))),Assign "x" (Const 1),Assign "a" (Uminus (Const 1)),Assign "y" (Var "x"),Assign "a" (Binop Plus (Binop Or (Const 0) (Const 0)) (Var "x")),If (Var "a") (Seq [Assign "y" (Binop Div (Uminus (Binop Minus (Uminus (Const 20)) (Uminus (Var "z")))) (Binop LessEq (Binop And (Const 3) (Uminus (Binop Less (Const 23) (Var "y")))) (Const 0)))]) (Assign "b" (Var "z")),Assign "z" (Binop Minus (Const 0) (Const 1)),Assign "a" (Binop Div (Var "b") (Var "a")),Assign "z" (Const 1),If (Binop Minus (Var "b") (Binop And (Binop And (Var "y") (Const 1)) (Var "z"))) (Seq []) (Seq [Assign "b" (Var "a"),If (Const 8) (Seq []) (Seq [])]),Assign "z" (Const (-20)),Assign "b" (Var "x"),Assign "y" (Binop Less (Const 1) (Uminus (Const 1))),Assign "x" (Const 1),Assign "a" (Const 0),If (Binop Times (Const 0) (Uminus (Const (-25)))) (Seq [Assign "x" (Var "b")]) (Seq [Assign "y" (Uminus (Binop Minus (Const 7) (Const 1)))])]
 was printed as
*******************
{ x = b ; if 0 then z = b < - b else if 2 <= 0 then if x <= ( z == 1 ) < z / y then { } else x = b else y = 0 ; while - b do x = x ; b = - ( - ( - ( 19 ) ) + - ( 0 - b ) ) && ( - ( -4 <= 0 ) && ( b < 1 ) + y ) ; a = a ; while - ( 1 ) <= z do b = - ( ( - y < z ) / a ) ; x = - ( ( 1 || ( z || a ) ) < ( 1 < x && 0 / y ) ) && ( 0 - z && 0 ) ; x = 1 ; a = - ( 1 ) ; y = x ; a = ( 0 || 0 ) + x ; if a then { y = - ( - ( 20 ) - - z ) / ( ( 3 && - ( 23 < y ) ) <= 0 ) } else b = z ; z = 0 -1 ; a = b / a ; z = 1 ; if b - ( y && 1 && z ) then { } else { b = a ; if 8 then { } else { } } ; z = -20 ; b = x ; y = 1 < - ( 1 ) ; x = 1 ; a = 0 ; if 0 * - ( -25 ) then { x = b } else { y = - ( 7 -1 ) } }

*******************
but expected
*******************
{
  x = b ;
  if 0 then
    z = b < - b
  else if 2 <= 0 then
    if x <= ( z == 1 ) < z / y then { } else
      x = b
  else
    y = 0 ;
  while - b do
    x = x ;
  b = - ( - ( - ( 19 ) ) + - ( 0 - b ) ) && ( - ( -4 <= 0 ) && ( b < 1 ) + y ) ;
  a = a ;
  while - ( 1 ) <= z do
    b = - ( ( - y < z ) / a ) ;
  x = - ( ( 1 || ( z || a ) ) < ( 1 < x && 0 / y ) ) && ( 0 - z && 0 ) ;
  x = 1 ;
  a = - ( 1 ) ;
  y = x ;
  a = ( 0 || 0 ) + x ;
  if a then {
    y = - ( - ( 20 ) - - z ) / ( ( 3 && - ( 23 < y ) ) <= 0 )
  } else
    b = z ;
  z = 0 -1 ;
  a = b / a ;
  z = 1 ;
  if b - ( y && 1 && z ) then { } else {
    b = a ;
    if 8 then { } else { }
  } ;
  z = -20 ;
  b = x ;
  y = 1 < - ( 1 ) ;
  x = 1 ;
  a = 0 ;
  if 0 * - ( -25 ) then {
    x = b
  } else {
    y = - ( 7 -1 )
  }
}

*******************

AST
Seq [Assign "y" (Const 9),Assign "y" (Uminus (Binop And (Var "a") (Const 0))),Assign "z" (Uminus (Binop Equal (Var "b") (Binop LessEq (Const 1) (Const 1)))),Assign "z" (Const 0),Assign "x" (Binop Times (Uminus (Binop LessEq (Const (-11)) (Binop Less (Var "a") (Uminus (Var "x"))))) (Uminus (Const 0))),If (Const 1) (If (Const 0) (Seq []) (Seq [If (Const 1) (Seq []) (Seq [])])) (Assign "a" (Const 0)),If (Binop Or (Binop Or (Const (-13)) (Binop Equal (Binop Div (Binop Less (Const 7) (Var "y")) (Var "x")) (Const 0))) (Const 1)) (Assign "x" (Binop Or (Binop Equal (Const 1) (Var "x")) (Binop And (Var "z") (Uminus (Const (-16)))))) (If (Binop Equal (Var "z") (Binop Less (Binop Plus (Const 1) (Uminus (Binop Div (Var "a") (Const 0)))) (Uminus (Uminus (Uminus (Var "y")))))) (Assign "z" (Binop And (Binop Minus (Binop Plus (Const 0) (Const 0)) (Var "a")) (Binop Or (Const 24) (Var "y")))) (Assign "y" (Binop Or (Const 17) (Const 0)))),Assign "a" (Var "z"),Assign "y" (Binop Equal (Binop LessEq (Var "a") (Uminus (Binop Plus (Binop Times (Const 0) (Var "z")) (Binop Or (Const 0) (Const 1))))) (Const 1)),If (Var "z") (Assign "b" (Binop Minus (Var "a") (Const 0))) (Assign "b" (Const (-28))),Assign "x" (Var "b"),Assign "z" (Uminus (Var "z")),Assign "a" (Binop Times (Const 0) (Const 1)),Assign "y" (Const 0),If (Var "a") (Assign "z" (Const 29)) (Seq [If (Binop Or (Var "x") (Const (-17))) (Assign "x" (Var "b")) (If (Uminus (Uminus (Const 0))) (Seq []) (Seq [])),Assign "z" (Binop Equal (Binop Or (Const 1) (Var "b")) (Binop LessEq (Const 0) (Const 1)))]),Assign "x" (Const 1)]
 was printed as
*******************
{ y = 9 ; y = - ( a && 0 ) ; z = - ( b == ( 1 <= 1 ) ) ; z = 0 ; x = - ( -11 <= ( a < - x ) ) * - ( 0 ) ; if 1 then if 0 then { } else { if 1 then { } else { } } else a = 0 ; if -13 || ( 7 < y ) / x == 0 || 1 then x = 1 == x || z && - ( -16 ) else if z == ( 1 + - ( a / 0 ) < - ( - ( - y ) ) ) then z = 0 + 0 - a && ( 24 || y ) else y = 17 || 0 ; a = z ; y = a <= - ( 0 * z + ( 0 || 1 ) ) == 1 ; if z then b = a -0 else b = -28 ; x = b ; z = - z ; a = 0 * 1 ; y = 0 ; if a then z = 29 else { if x || -17 then x = b else if - ( - ( 0 ) ) then { } else { } ; z = ( 1 || b ) == ( 0 <= 1 ) } ; x = 1 }

*******************
but expected
*******************
{
  y = 9 ;
  y = - ( a && 0 ) ;
  z = - ( b == ( 1 <= 1 ) ) ;
  z = 0 ;
  x = - ( -11 <= ( a < - x ) ) * - ( 0 ) ;
  if 1 then
    if 0 then { } else {
      if 1 then { } else { }
    }
  else
    a = 0 ;
  if -13 || ( 7 < y ) / x == 0 || 1 then
    x = 1 == x || z && - ( -16 )
  else if z == ( 1 + - ( a / 0 ) < - ( - ( - y ) ) ) then
    z = 0 + 0 - a && ( 24 || y )
  else
    y = 17 || 0 ;
  a = z ;
  y = a <= - ( 0 * z + ( 0 || 1 ) ) == 1 ;
  if z then
    b = a -0
  else
    b = -28 ;
  x = b ;
  z = - z ;
  a = 0 * 1 ;
  y = 0 ;
  if a then
    z = 29
  else {
    if x || -17 then
      x = b
    else if - ( - ( 0 ) ) then { } else { } ;
    z = ( 1 || b ) == ( 0 <= 1 )
  } ;
  x = 1
}

*******************

AST
Seq [While (Var "a") (Assign "x" (Var "a"))]
 was printed as
*******************
{ while a do x = a }

*******************
but expected
*******************
{
  while a do
    x = a
}

*******************

AST
Seq [Assign "z" (Binop Equal (Var "x") (Const (-7))),Assign "a" (Binop Minus (Const (-22)) (Const (-27))),While (Var "z") (Seq []),Assign "z" (Const 1),Assign "x" (Var "a")]
 was printed as
*******************
{ z = x == -7 ; a = -22 - -27 ; while z do { } ; z = 1 ; x = a }

*******************
but expected
*******************
{
  z = x == -7 ;
  a = -22 - -27 ;
  while z do { } ;
  z = 1 ;
  x = a
}

*******************

AST
Seq [Assign "a" (Binop Times (Var "x") (Const 1)),If (Uminus (Const 0)) (If (Binop Equal (Var "x") (Uminus (Const 0))) (If (Var "x") (Seq []) (Seq [])) (Seq [])) (If (Const 1) (Seq []) (Assign "x" (Uminus (Const 1)))),Assign "a" (Const 1),Assign "x" (Var "a"),While (Uminus (Var "a")) (If (Var "z") (Assign "a" (Var "x")) (If (Var "z") (Assign "x" (Var "x")) (Assign "x" (Const 18)))),Assign "a" (Binop And (Var "b") (Binop Plus (Const 1) (Binop Plus (Binop Less (Var "x") (Const 15)) (Var "b")))),If (Const 0) (Assign "x" (Binop Plus (Const 0) (Const 0))) (Seq []),Assign "b" (Binop LessEq (Const (-23)) (Binop Times (Const 0) (Binop Div (Var "x") (Var "x")))),Assign "x" (Uminus (Binop Times (Var "z") (Binop LessEq (Binop Div (Const 4) (Binop Or (Const 1) (Var "z"))) (Binop Equal (Var "z") (Const 1))))),Assign "a" (Var "y"),If (Uminus (Const 1)) (Assign "z" (Var "z")) (If (Binop Div (Binop Minus (Uminus (Const 30)) (Binop LessEq (Const 0) (Binop Minus (Const 5) (Var "y")))) (Var "x")) (While (Uminus (Uminus (Var "x"))) (Seq [])) (If (Uminus (Uminus (Const 1))) (Seq []) (Seq []))),Assign "x" (Const (-26)),While (Var "y") (Assign "z" (Binop Plus (Const 0) (Const 28))),Assign "y" (Uminus (Uminus (Binop Less (Binop Less (Const (-18)) (Binop Times (Var "z") (Const (-24)))) (Const 0))))]
 was printed as
*******************
{ a = x * 1 ; if - ( 0 ) then if x == - ( 0 ) then if x then { } else { } else { } else if 1 then { } else x = - ( 1 ) ; a = 1 ; x = a ; while - a do if z then a = x else if z then x = x else x = 18 ; a = b && 1 + ( ( x < 15 ) + b ) ; if 0 then x = 0 + 0 else { } ; b = -23 <= 0 * ( x / x ) ; x = - ( z * ( 4 / ( 1 || z ) <= ( z == 1 ) ) ) ; a = y ; if - ( 1 ) then z = z else if ( - ( 30 ) - ( 0 <= 5 - y ) ) / x then while - ( - x ) do { } else if - ( - ( 1 ) ) then { } else { } ; x = -26 ; while y do z = 0 + 28 ; y = - ( - ( -18 < z * -24 < 0 ) ) }

*******************
but expected
*******************
{
  a = x * 1 ;
  if - ( 0 ) then
    if x == - ( 0 ) then
      if x then { } else { }
    else { }
  else if 1 then { } else
    x = - ( 1 ) ;
  a = 1 ;
  x = a ;
  while - a do
    if z then
      a = x
    else if z then
      x = x
    else
      x = 18 ;
  a = b && 1 + ( ( x < 15 ) + b ) ;
  if 0 then
    x = 0 + 0
  else { } ;
  b = -23 <= 0 * ( x / x ) ;
  x = - ( z * ( 4 / ( 1 || z ) <= ( z == 1 ) ) ) ;
  a = y ;
  if - ( 1 ) then
    z = z
  else if ( - ( 30 ) - ( 0 <= 5 - y ) ) / x then
    while - ( - x ) do { }
  else if - ( - ( 1 ) ) then { } else { } ;
  x = -26 ;
  while y do
    z = 0 + 28 ;
  y = - ( - ( -18 < z * -24 < 0 ) )
}

*******************

AST
Seq [Assign "y" (Var "a"),While (Var "a") (Seq []),While (Uminus (Var "b")) (Assign "x" (Const 5)),Assign "a" (Var "y"),Assign "a" (Binop Plus (Binop LessEq (Uminus (Var "y")) (Const (-13))) (Uminus (Binop Or (Var "b") (Binop Or (Var "a") (Binop Less (Var "y") (Const (-16))))))),Assign "y" (Var "x")]
 was printed as
*******************
{ y = a ; while a do { } ; while - b do x = 5 ; a = y ; a = ( - y <= -13 ) + - ( b || ( a || y < -16 ) ) ; y = x }

*******************
but expected
*******************
{
  y = a ;
  while a do { } ;
  while - b do
    x = 5 ;
  a = y ;
  a = ( - y <= -13 ) + - ( b || ( a || y < -16 ) ) ;
  y = x
}

*******************

AST
Seq [Assign "a" (Uminus (Binop Or (Var "a") (Binop And (Var "b") (Binop Plus (Binop Less (Const 15) (Const 0)) (Binop Minus (Var "z") (Const 2)))))),If (Const 21) (Assign "y" (Uminus (Const 0))) (Assign "b" (Var "x")),Assign "y" (Const 0),Assign "y" (Binop Div (Var "y") (Var "z")),Assign "y" (Var "a"),If (Const 8) (Seq []) (Assign "z" (Var "y")),Assign "x" (Binop And (Const 1) (Binop Plus (Var "z") (Const 0))),Assign "z" (Binop Plus (Uminus (Var "a")) (Uminus (Var "x"))),Assign "a" (Const (-5)),Assign "a" (Var "a"),Assign "y" (Uminus (Binop Or (Var "a") (Var "y"))),Assign "y" (Uminus (Var "a")),Assign "a" (Const 0),Assign "x" (Const 0),Assign "x" (Const 0),If (Binop And (Var "b") (Const 1)) (Assign "b" (Var "x")) (Assign "y" (Uminus (Uminus (Const 12)))),Assign "x" (Const 1),If (Var "b") (Seq []) (Seq []),Assign "x" (Const 1),Assign "z" (Binop LessEq (Var "x") (Binop Plus (Var "x") (Const (-22)))),Assign "z" (Var "x"),Assign "z" (Var "z"),If (Binop Times (Const 1) (Const 1)) (While (Binop Or (Const 19) (Const (-22))) (Seq [])) (Assign "a" (Var "b")),Assign "y" (Const 0),While (Uminus (Binop Times (Const (-28)) (Binop LessEq (Const (-7)) (Uminus (Var "a"))))) (If (Var "a") (Seq []) (If (Const 0) (Seq []) (Seq []))),Assign "z" (Uminus (Binop Plus (Var "z") (Const 0))),Assign "a" (Const 18),Assign "z" (Var "z"),If (Var "y") (Assign "x" (Uminus (Const 0))) (If (Var "a") (Assign "z" (Var "z")) (Seq [Assign "a" (Var "a")])),While (Const 1) (Seq []),Assign "a" (Const 1)]
 was printed as
*******************
{ a = - ( a || b && ( 15 < 0 ) + ( z -2 ) ) ; if 21 then y = - ( 0 ) else b = x ; y = 0 ; y = y / z ; y = a ; if 8 then { } else z = y ; x = 1 && z + 0 ; z = - a + - x ; a = -5 ; a = a ; y = - ( a || y ) ; y = - a ; a = 0 ; x = 0 ; x = 0 ; if b && 1 then b = x else y = - ( - ( 12 ) ) ; x = 1 ; if b then { } else { } ; x = 1 ; z = x <= x + -22 ; z = x ; z = z ; if 1 * 1 then while 19 || -22 do { } else a = b ; y = 0 ; while - ( -28 * ( -7 <= - a ) ) do if a then { } else if 0 then { } else { } ; z = - ( z + 0 ) ; a = 18 ; z = z ; if y then x = - ( 0 ) else if a then z = z else { a = a } ; while 1 do { } ; a = 1 }

*******************
but expected
*******************
{
  a = - ( a || b && ( 15 < 0 ) + ( z -2 ) ) ;
  if 21 then
    y = - ( 0 )
  else
    b = x ;
  y = 0 ;
  y = y / z ;
  y = a ;
  if 8 then { } else
    z = y ;
  x = 1 && z + 0 ;
  z = - a + - x ;
  a = -5 ;
  a = a ;
  y = - ( a || y ) ;
  y = - a ;
  a = 0 ;
  x = 0 ;
  x = 0 ;
  if b && 1 then
    b = x
  else
    y = - ( - ( 12 ) ) ;
  x = 1 ;
  if b then { } else { } ;
  x = 1 ;
  z = x <= x + -22 ;
  z = x ;
  z = z ;
  if 1 * 1 then
    while 19 || -22 do { }
  else
    a = b ;
  y = 0 ;
  while - ( -28 * ( -7 <= - a ) ) do
    if a then { } else if 0 then { } else { } ;
  z = - ( z + 0 ) ;
  a = 18 ;
  z = z ;
  if y then
    x = - ( 0 )
  else if a then
    z = z
  else {
    a = a
  } ;
  while 1 do { } ;
  a = 1
}

*******************

AST
While (Uminus (Var "z")) (Assign "z" (Var "b"))
 was printed as
*******************
while - z do z = b

*******************
but expected
*******************
while - z do
  z = b

*******************

AST
If (Var "z") (Assign "b" (Const 1)) (Assign "b" (Binop Plus (Binop Equal (Const (-11)) (Const 0)) (Const 0)))
 was printed as
*******************
if z then b = 1 else b = ( -11 == 0 ) + 0

*******************
but expected
*******************
if z then
  b = 1
else
  b = ( -11 == 0 ) + 0

*******************

AST
If (Var "x") (Assign "y" (Const (-8))) (If (Var "a") (Seq []) (Assign "b" (Binop Minus (Const 0) (Binop Times (Uminus (Const (-4))) (Binop Less (Uminus (Const 0)) (Const 1))))))
 was printed as
*******************
if x then y = -8 else if a then { } else b = 0 - - ( -4 ) * ( - ( 0 ) < 1 )

*******************
but expected
*******************
if x then
  y = -8
else if a then { } else
  b = 0 - - ( -4 ) * ( - ( 0 ) < 1 )

*******************

AST
While (Binop Minus (Var "y") (Binop Equal (Binop Less (Const 1) (Var "y")) (Binop And (Binop Or (Const (-18)) (Const 0)) (Const (-4))))) (Seq [If (Const 10) (Assign "y" (Var "z")) (Assign "a" (Var "z")),Assign "b" (Const 26),If (Var "z") (Assign "a" (Var "a")) (Assign "y" (Uminus (Uminus (Uminus (Var "a"))))),Assign "z" (Binop Times (Binop Plus (Binop Minus (Var "z") (Const 1)) (Const 1)) (Binop Times (Const 1) (Var "x"))),Assign "y" (Var "b")])
 was printed as
*******************
while y - ( 1 < y == ( ( -18 || 0 ) && -4 ) ) do { if 10 then y = z else a = z ; b = 26 ; if z then a = a else y = - ( - ( - a ) ) ; z = ( z -1 + 1 ) * ( 1 * x ) ; y = b }

*******************
but expected
*******************
while y - ( 1 < y == ( ( -18 || 0 ) && -4 ) ) do {
  if 10 then
    y = z
  else
    a = z ;
  b = 26 ;
  if z then
    a = a
  else
    y = - ( - ( - a ) ) ;
  z = ( z -1 + 1 ) * ( 1 * x ) ;
  y = b
}

*******************

AST
Seq [Assign "a" (Var "x")]
 was printed as
*******************
{ a = x }

*******************
but expected
*******************
{
  a = x
}

*******************

AST
If (Const 1) (Seq [If (Var "a") (If (Var "a") (If (Var "z") (Seq []) (Seq [])) (Assign "b" (Binop And (Var "z") (Binop Times (Var "b") (Const 0))))) (Assign "b" (Binop Times (Var "a") (Var "b"))),If (Binop Equal (Const 1) (Const 25)) (Assign "x" (Var "z")) (Seq []),Assign "a" (Binop Minus (Var "x") (Var "z"))]) (Seq [If (Var "a") (Assign "z" (Var "a")) (If (Uminus (Binop And (Binop Minus (Const 0) (Var "z")) (Binop Less (Binop LessEq (Var "a") (Var "b")) (Var "b")))) (Assign "y" (Binop And (Var "a") (Binop Minus (Binop Or (Const (-2)) (Binop And (Uminus (Const 1)) (Var "b"))) (Var "x")))) (Assign "x" (Uminus (Var "a")))),Assign "z" (Uminus (Var "b"))])
 was printed as
*******************
if 1 then { if a then if a then if z then { } else { } else b = z && b * 0 else b = a * b ; if 1 == 25 then x = z else { } ; a = x - z } else { if a then z = a else if - ( 0 - z && a <= b < b ) then y = a && ( -2 || - ( 1 ) && b ) - x else x = - a ; z = - b }

*******************
but expected
*******************
if 1 then {
  if a then
    if a then
      if z then { } else { }
    else
      b = z && b * 0
  else
    b = a * b ;
  if 1 == 25 then
    x = z
  else { } ;
  a = x - z
} else {
  if a then
    z = a
  else if - ( 0 - z && a <= b < b ) then
    y = a && ( -2 || - ( 1 ) && b ) - x
  else
    x = - a ;
  z = - b
}

*******************

AST
If (Binop Times (Binop Div (Var "a") (Var "x")) (Var "a")) (Seq [While (Var "b") (Seq []),While (Const 0) (Assign "x" (Var "y")),If (Const 24) (Assign "a" (Const 0)) (Seq [If (Var "a") (Seq []) (Seq [])]),If (Binop Minus (Binop LessEq (Var "y") (Binop Equal (Binop Or (Binop Div (Const (-5)) (Var "a")) (Const 1)) (Var "b"))) (Binop Or (Var "y") (Const 0))) (Seq []) (Seq [])]) (Seq [While (Binop Div (Var "z") (Uminus (Var "y"))) (While (Const 0) (Seq [])),Assign "a" (Binop LessEq (Var "y") (Const (-11))),Assign "y" (Const 1)])
 was printed as
*******************
if a / x * a then { while b do { } ; while 0 do x = y ; if 24 then a = 0 else { if a then { } else { } } ; if ( y <= ( ( -5 / a || 1 ) == b ) ) - ( y || 0 ) then { } else { } } else { while z / - y do while 0 do { } ; a = y <= -11 ; y = 1 }

*******************
but expected
*******************
if a / x * a then {
  while b do { } ;
  while 0 do
    x = y ;
  if 24 then
    a = 0
  else {
    if a then { } else { }
  } ;
  if ( y <= ( ( -5 / a || 1 ) == b ) ) - ( y || 0 ) then { } else { }
} else {
  while z / - y do
    while 0 do { } ;
  a = y <= -11 ;
  y = 1
}

*******************

AST
Seq [If (Const (-13)) (Assign "z" (Binop Less (Const 20) (Var "b"))) (If (Binop Plus (Var "x") (Const 0)) (Seq [Assign "y" (Var "b")]) (If (Binop LessEq (Binop Plus (Var "y") (Var "y")) (Binop Times (Var "y") (Const (-26)))) (Seq []) (Assign "b" (Var "x")))),Assign "b" (Var "z"),While (Binop Equal (Uminus (Var "a")) (Const 0)) (Seq [Assign "a" (Const (-28))]),While (Const 1) (Seq [Assign "y" (Var "z")]),If (Const 1) (Assign "z" (Var "x")) (Assign "a" (Var "a")),Assign "z" (Const 1),While (Var "z") (While (Binop And (Var "x") (Var "x")) (Assign "y" (Var "z"))),Assign "z" (Const 1),Assign "b" (Var "b"),If (Var "x") (Assign "a" (Var "b")) (Assign "x" (Binop And (Var "x") (Binop And (Binop LessEq (Var "z") (Const 1)) (Uminus (Const 0))))),Assign "z" (Var "a")]
 was printed as
*******************
{ if -13 then z = 20 < b else if x + 0 then { y = b } else if y + y <= y * -26 then { } else b = x ; b = z ; while - a == 0 do { a = -28 } ; while 1 do { y = z } ; if 1 then z = x else a = a ; z = 1 ; while z do while x && x do y = z ; z = 1 ; b = b ; if x then a = b else x = x && ( z <= 1 && - ( 0 ) ) ; z = a }

*******************
but expected
*******************
{
  if -13 then
    z = 20 < b
  else if x + 0 then {
    y = b
  } else if y + y <= y * -26 then { } else
    b = x ;
  b = z ;
  while - a == 0 do {
    a = -28
  } ;
  while 1 do {
    y = z
  } ;
  if 1 then
    z = x
  else
    a = a ;
  z = 1 ;
  while z do
    while x && x do
      y = z ;
  z = 1 ;
  b = b ;
  if x then
    a = b
  else
    x = x && ( z <= 1 && - ( 0 ) ) ;
  z = a
}

*******************

AST
While (Var "y") (While (Const 15) (Seq [Assign "y" (Const 0),Assign "x" (Const 13)]))
 was printed as
*******************
while y do while 15 do { y = 0 ; x = 13 }

*******************
but expected
*******************
while y do
  while 15 do {
    y = 0 ;
    x = 13
  }

*******************

AST
If (Var "b") (Assign "y" (Const 0)) (Assign "x" (Var "a"))
 was printed as
*******************
if b then y = 0 else x = a

*******************
but expected
*******************
if b then
  y = 0
else
  x = a

*******************

AST
If (Const 1) (If (Var "x") (Assign "a" (Uminus (Const 1))) (Assign "x" (Binop And (Const (-1)) (Const (-7))))) (Assign "y" (Const 0))
 was printed as
*******************
if 1 then if x then a = - ( 1 ) else x = -1 && -7 else y = 0

*******************
but expected
*******************
if 1 then
  if x then
    a = - ( 1 )
  else
    x = -1 && -7
else
  y = 0

*******************

AST
While (Var "a") (If (Binop LessEq (Uminus (Uminus (Const 0))) (Var "a")) (While (Uminus (Var "z")) (Assign "z" (Var "a"))) (Seq []))
 was printed as
*******************
while a do if - ( - ( 0 ) ) <= a then while - z do z = a else { }

*******************
but expected
*******************
while a do
  if - ( - ( 0 ) ) <= a then
    while - z do
      z = a
  else { }

*******************

AST
Seq [Assign "z" (Const 0),Assign "a" (Var "x"),Assign "y" (Binop Plus (Binop Times (Const 4) (Var "z")) (Uminus (Uminus (Var "y")))),If (Binop And (Var "a") (Const 0)) (While (Const 0) (Seq [])) (Seq []),Assign "a" (Var "z"),Assign "b" (Const 1),Assign "a" (Const (-27)),If (Const (-15)) (Assign "a" (Var "b")) (Seq [Assign "a" (Binop And (Binop Less (Uminus (Const 1)) (Const (-15))) (Binop Or (Uminus (Const (-10))) (Const (-1))))]),Assign "a" (Var "b"),Assign "a" (Var "b"),Assign "a" (Binop Less (Const (-6)) (Binop Div (Binop LessEq (Binop Minus (Binop Plus (Const 0) (Const 0)) (Binop LessEq (Const 20) (Var "a"))) (Binop Times (Binop And (Var "z") (Const (-12))) (Uminus (Var "y")))) (Uminus (Uminus (Const 1))))),Assign "z" (Var "a"),Assign "y" (Var "a"),Assign "a" (Var "x"),Assign "b" (Binop Less (Var "x") (Const 0)),Assign "z" (Const 0),If (Binop And (Var "y") (Const 15)) (If (Var "y") (Seq []) (Seq [])) (If (Uminus (Var "y")) (Seq []) (Seq [])),If (Binop Plus (Binop Less (Binop Minus (Const (-28)) (Var "b")) (Const 1)) (Uminus (Var "a"))) (If (Binop And (Binop And (Uminus (Uminus (Uminus (Const 25)))) (Var "y")) (Var "z")) (Seq []) (Seq [])) (Assign "b" (Var "x")),Assign "x" (Binop Less (Var "y") (Binop Or (Var "x") (Const 1))),Assign "y" (Var "x"),Assign "x" (Const 0),Assign "b" (Binop Minus (Const (-11)) (Const 0)),Assign "y" (Binop Minus (Binop And (Var "z") (Binop LessEq (Var "a") (Const 1))) (Const (-29))),If (Binop Div (Var "b") (Var "b")) (Assign "a" (Var "y")) (Assign "y" (Var "a")),If (Const (-30)) (If (Var "a") (Seq []) (Seq [])) (While (Const 0) (Seq [])),Assign "b" (Const 0),Assign "x" (Const 0)]
 was printed as
*******************
{ z = 0 ; a = x ; y = 4 * z + - ( - y ) ; if a && 0 then while 0 do { } else { } ; a = z ; b = 1 ; a = -27 ; if -15 then a = b else { a = - ( 1 ) < -15 && ( - ( -10 ) || -1 ) } ; a = b ; a = b ; a = -6 < ( 0 + 0 - ( 20 <= a ) <= ( z && -12 ) * - y ) / - ( - ( 1 ) ) ; z = a ; y = a ; a = x ; b = x < 0 ; z = 0 ; if y && 15 then if y then { } else { } else if - y then { } else { } ; if ( -28 - b < 1 ) + - a then if - ( - ( - ( 25 ) ) ) && y && z then { } else { } else b = x ; x = y < ( x || 1 ) ; y = x ; x = 0 ; b = -11 -0 ; y = ( z && a <= 1 ) - -29 ; if b / b then a = y else y = a ; if -30 then if a then { } else { } else while 0 do { } ; b = 0 ; x = 0 }

*******************
but expected
*******************
{
  z = 0 ;
  a = x ;
  y = 4 * z + - ( - y ) ;
  if a && 0 then
    while 0 do { }
  else { } ;
  a = z ;
  b = 1 ;
  a = -27 ;
  if -15 then
    a = b
  else {
    a = - ( 1 ) < -15 && ( - ( -10 ) || -1 )
  } ;
  a = b ;
  a = b ;
  a = -6 < ( 0 + 0 - ( 20 <= a ) <= ( z && -12 ) * - y ) / - ( - ( 1 ) ) ;
  z = a ;
  y = a ;
  a = x ;
  b = x < 0 ;
  z = 0 ;
  if y && 15 then
    if y then { } else { }
  else if - y then { } else { } ;
  if ( -28 - b < 1 ) + - a then
    if - ( - ( - ( 25 ) ) ) && y && z then { } else { }
  else
    b = x ;
  x = y < ( x || 1 ) ;
  y = x ;
  x = 0 ;
  b = -11 -0 ;
  y = ( z && a <= 1 ) - -29 ;
  if b / b then
    a = y
  else
    y = a ;
  if -30 then
    if a then { } else { }
  else
    while 0 do { } ;
  b = 0 ;
  x = 0
}

*******************

AST
If (Const 0) (If (Binop Div (Binop Plus (Var "x") (Var "b")) (Binop And (Binop Plus (Binop Times (Var "a") (Binop Equal (Var "b") (Const 1))) (Uminus (Const 0))) (Const 0))) (If (Var "y") (Seq []) (Seq [])) (Seq [While (Var "x") (Seq [])])) (Assign "x" (Uminus (Var "a")))
 was printed as
*******************
if 0 then if ( x + b ) / ( a * ( b == 1 ) + - ( 0 ) && 0 ) then if y then { } else { } else { while x do { } } else x = - a

*******************
but expected
*******************
if 0 then
  if ( x + b ) / ( a * ( b == 1 ) + - ( 0 ) && 0 ) then
    if y then { } else { }
  else {
    while x do { }
  }
else
  x = - a

*******************

AST
Seq [Assign "z" (Const 30),Assign "b" (Binop Or (Binop Or (Binop Or (Const 1) (Var "a")) (Var "z")) (Binop LessEq (Uminus (Const 23)) (Const 0))),If (Const 0) (Assign "x" (Const 1)) (While (Uminus (Binop LessEq (Binop Div (Var "b") (Const 1)) (Binop Equal (Binop Or (Binop Less (Var "y") (Const 21)) (Binop Plus (Const 0) (Const 0))) (Binop Or (Const 0) (Const 27))))) (If (Var "z") (Seq []) (Seq []))),If (Const (-27)) (Assign "b" (Binop Times (Binop Less (Binop And (Var "b") (Var "y")) (Binop Equal (Const 0) (Var "z"))) (Uminus (Const 0)))) (Assign "x" (Binop Plus (Var "a") (Uminus (Var "y")))),If (Binop Minus (Binop Or (Var "a") (Var "z")) (Const (-30))) (Assign "y" (Var "b")) (Seq []),If (Binop Times (Binop LessEq (Uminus (Var "x")) (Var "y")) (Uminus (Binop Div (Var "b") (Uminus (Const 1))))) (Assign "a" (Uminus (Uminus (Uminus (Binop Equal (Const 1) (Var "a")))))) (While (Binop Minus (Const 1) (Var "a")) (Seq [])),Assign "a" (Const 1),Assign "x" (Const (-1)),Assign "z" (Binop LessEq (Var "x") (Const (-14))),While (Const 1) (Seq []),Assign "y" (Var "a"),While (Const 1) (Assign "y" (Var "z")),Assign "z" (Var "z"),If (Binop Equal (Uminus (Uminus (Var "z"))) (Binop Less (Var "b") (Uminus (Binop Less (Var "b") (Const 26))))) (Assign "x" (Var "z")) (While (Var "z") (Assign "a" (Uminus (Const 1)))),If (Binop Or (Uminus (Binop Minus (Var "x") (Binop Plus (Var "a") (Var "b")))) (Var "z")) (Assign "x" (Binop And (Var "b") (Const 1))) (Assign "b" (Binop Plus (Binop Div (Var "a") (Const (-18))) (Const 1))),Assign "x" (Const 0),Assign "b" (Const (-13)),While (Binop Less (Const 0) (Var "a")) (Seq []),Assign "z" (Binop Times (Const 0) (Const 1)),If (Binop Times (Var "y") (Const (-7))) (Seq []) (Seq []),If (Const 0) (Assign "a" (Var "b")) (Seq []),Assign "z" (Binop Div (Uminus (Uminus (Binop LessEq (Const 0) (Const 0)))) (Const 1)),If (Var "b") (Seq [If (Uminus (Uminus (Var "y"))) (Seq []) (Assign "z" (Var "x"))]) (If (Const 1) (Assign "a" (Const 1)) (While (Uminus (Var "b")) (While (Binop Less (Uminus (Var "a")) (Var "z")) (Seq []))))]
 was printed as
*******************
{ z = 30 ; b = 1 || a || z || - ( 23 ) <= 0 ; if 0 then x = 1 else while - ( b / 1 <= ( ( y < 21 || 0 + 0 ) == ( 0 || 27 ) ) ) do if z then { } else { } ; if -27 then b = ( ( b && y ) < ( 0 == z ) ) * - ( 0 ) else x = a + - y ; if ( a || z ) - -30 then y = b else { } ; if ( - x <= y ) * - ( b / - ( 1 ) ) then a = - ( - ( - ( 1 == a ) ) ) else while 1 - a do { } ; a = 1 ; x = -1 ; z = x <= -14 ; while 1 do { } ; y = a ; while 1 do y = z ; z = z ; if - ( - z ) == ( b < - ( b < 26 ) ) then x = z else while z do a = - ( 1 ) ; if - ( x - ( a + b ) ) || z then x = b && 1 else b = a / -18 + 1 ; x = 0 ; b = -13 ; while 0 < a do { } ; z = 0 * 1 ; if y * -7 then { } else { } ; if 0 then a = b else { } ; z = - ( - ( 0 <= 0 ) ) / 1 ; if b then { if - ( - y ) then { } else z = x } else if 1 then a = 1 else while - b do while - a < z do { } }

*******************
but expected
*******************
{
  z = 30 ;
  b = 1 || a || z || - ( 23 ) <= 0 ;
  if 0 then
    x = 1
  else
    while - ( b / 1 <= ( ( y < 21 || 0 + 0 ) == ( 0 || 27 ) ) ) do
      if z then { } else { } ;
  if -27 then
    b = ( ( b && y ) < ( 0 == z ) ) * - ( 0 )
  else
    x = a + - y ;
  if ( a || z ) - -30 then
    y = b
  else { } ;
  if ( - x <= y ) * - ( b / - ( 1 ) ) then
    a = - ( - ( - ( 1 == a ) ) )
  else
    while 1 - a do { } ;
  a = 1 ;
  x = -1 ;
  z = x <= -14 ;
  while 1 do { } ;
  y = a ;
  while 1 do
    y = z ;
  z = z ;
  if - ( - z ) == ( b < - ( b < 26 ) ) then
    x = z
  else
    while z do
      a = - ( 1 ) ;
  if - ( x - ( a + b ) ) || z then
    x = b && 1
  else
    b = a / -18 + 1 ;
  x = 0 ;
  b = -13 ;
  while 0 < a do { } ;
  z = 0 * 1 ;
  if y * -7 then { } else { } ;
  if 0 then
    a = b
  else { } ;
  z = - ( - ( 0 <= 0 ) ) / 1 ;
  if b then {
    if - ( - y ) then { } else
      z = x
  } else if 1 then
    a = 1
  else
    while - b do
      while - a < z do { }
}

*******************

AST
Seq [Assign "y" (Uminus (Binop LessEq (Var "a") (Binop Plus (Binop LessEq (Var "z") (Uminus (Var "y"))) (Const 1)))),Assign "x" (Var "y"),If (Const 1) (Assign "x" (Var "x")) (If (Binop And (Var "x") (Var "z")) (If (Var "a") (Seq []) (Seq [])) (Seq [])),Assign "z" (Var "y"),If (Var "y") (Seq []) (While (Var "z") (Assign "z" (Binop Or (Binop Minus (Binop Minus (Var "y") (Const 15)) (Uminus (Binop Less (Var "x") (Const 0)))) (Const 0)))),While (Binop Equal (Const 1) (Const 16)) (Seq []),Assign "b" (Var "a"),If (Binop Less (Var "b") (Var "a")) (Seq []) (Assign "a" (Var "x")),While (Binop Times (Const 15) (Var "z")) (If (Binop Equal (Var "x") (Const 0)) (Seq []) (Seq [])),If (Binop Times (Var "x") (Var "b")) (Seq []) (Assign "z" (Binop Plus (Var "b") (Var "b"))),Assign "z" (Const 8),Assign "a" (Const 0),Assign "b" (Var "x"),Assign "z" (Binop LessEq (Binop LessEq (Uminus (Var "x")) (Binop Or (Uminus (Const (-7))) (Binop And (Binop LessEq (Var "z") (Const (-22))) (Var "y")))) (Binop Div (Binop LessEq (Binop Less (Binop Div (Const 1) (Var "z")) (Const 0)) (Binop Or (Const 2) (Const (-3)))) (Var "b"))),Assign "y" (Uminus (Var "z")),If (Uminus (Const 0)) (If (Const (-21)) (Seq []) (Seq [])) (Assign "a" (Var "y")),Assign "a" (Binop Plus (Binop Less (Uminus (Binop Minus (Const 1) (Var "a"))) (Uminus (Uminus (Var "x")))) (Var "y")),If (Binop Less (Var "z") (Var "a")) (Seq []) (Seq []),Assign "a" (Var "a"),Assign "b" (Var "x"),If (Var "a") (Assign "b" (Const (-8))) (If (Binop Minus (Var "x") (Var "z")) (Assign "z" (Const 22)) (Seq [])),If (Var "x") (Seq []) (If (Uminus (Uminus (Binop Equal (Const (-29)) (Const 0)))) (If (Const 1) (Assign "x" (Var "y")) (If (Const 0) (Seq []) (Seq []))) (Assign "b" (Const (-28)))),Assign "b" (Var "z"),Assign "b" (Binop LessEq (Var "b") (Binop Equal (Var "z") (Uminus (Var "a")))),Assign "a" (Uminus (Const 20)),Assign "y" (Var "y"),If (Binop Or (Binop Plus (Var "x") (Const (-15))) (Binop Equal (Const 0) (Var "z"))) (If (Var "a") (Seq []) (If (Binop Minus (Var "b") (Const 0)) (Seq []) (Seq []))) (Seq []),Assign "x" (Const 0),Assign "y" (Const 1),Assign "b" (Var "x"),Assign "b" (Uminus (Var "x")),Assign "a" (Binop And (Const 0) (Binop And (Uminus (Var "b")) (Const 1))),Assign "b" (Const 0),If (Var "b") (Assign "z" (Uminus (Const 0))) (Assign "z" (Var "z")),If (Var "z") (If (Binop Equal (Var "x") (Uminus (Const 0))) (Seq []) (Assign "z" (Var "y"))) (Assign "b" (Binop Div (Binop Minus (Const 30) (Uminus (Const 16))) (Binop And (Var "y") (Binop Div (Binop Or (Const 1) (Const 0)) (Const 1))))),Assign "x" (Uminus (Const 1)),Assign "a" (Const 1),Assign "z" (Var "b"),Assign "x" (Const 0),Assign "b" (Binop And (Uminus (Uminus (Var "x"))) (Var "x")),While (Binop And (Binop Equal (Var "z") (Const 0)) (Const (-17))) (If (Const 4) (Assign "b" (Binop And (Uminus (Binop LessEq (Uminus (Var "y")) (Uminus (Const 0)))) (Const 10))) (Seq [Assign "z" (Const 0)]))]
 was printed as
*******************
{ y = - ( a <= ( z <= - y ) + 1 ) ; x = y ; if 1 then x = x else if x && z then if a then { } else { } else { } ; z = y ; if y then { } else while z do z = y -15 - - ( x < 0 ) || 0 ; while 1 == 16 do { } ; b = a ; if b < a then { } else a = x ; while 15 * z do if x == 0 then { } else { } ; if x * b then { } else z = b + b ; z = 8 ; a = 0 ; b = x ; z = - x <= ( - ( -7 ) || z <= -22 && y ) <= ( 1 / z < 0 <= ( 2 || -3 ) ) / b ; y = - z ; if - ( 0 ) then if -21 then { } else { } else a = y ; a = ( - ( 1 - a ) < - ( - x ) ) + y ; if z < a then { } else { } ; a = a ; b = x ; if a then b = -8 else if x - z then z = 22 else { } ; if x then { } else if - ( - ( -29 == 0 ) ) then if 1 then x = y else if 0 then { } else { } else b = -28 ; b = z ; b = b <= ( z == - a ) ; a = - ( 20 ) ; y = y ; if x + -15 || 0 == z then if a then { } else if b -0 then { } else { } else { } ; x = 0 ; y = 1 ; b = x ; b = - x ; a = 0 && ( - b && 1 ) ; b = 0 ; if b then z = - ( 0 ) else z = z ; if z then if x == - ( 0 ) then { } else z = y else b = ( 30 - - ( 16 ) ) / ( y && ( 1 || 0 ) / 1 ) ; x = - ( 1 ) ; a = 1 ; z = b ; x = 0 ; b = - ( - x ) && x ; while z == 0 && -17 do if 4 then b = - ( - y <= - ( 0 ) ) && 10 else { z = 0 } }

*******************
but expected
*******************
{
  y = - ( a <= ( z <= - y ) + 1 ) ;
  x = y ;
  if 1 then
    x = x
  else if x && z then
    if a then { } else { }
  else { } ;
  z = y ;
  if y then { } else
    while z do
      z = y -15 - - ( x < 0 ) || 0 ;
  while 1 == 16 do { } ;
  b = a ;
  if b < a then { } else
    a = x ;
  while 15 * z do
    if x == 0 then { } else { } ;
  if x * b then { } else
    z = b + b ;
  z = 8 ;
  a = 0 ;
  b = x ;
  z = - x <= ( - ( -7 ) || z <= -22 && y ) <= ( 1 / z < 0 <= ( 2 || -3 ) ) / b ;
  y = - z ;
  if - ( 0 ) then
    if -21 then { } else { }
  else
    a = y ;
  a = ( - ( 1 - a ) < - ( - x ) ) + y ;
  if z < a then { } else { } ;
  a = a ;
  b = x ;
  if a then
    b = -8
  else if x - z then
    z = 22
  else { } ;
  if x then { } else if - ( - ( -29 == 0 ) ) then
    if 1 then
      x = y
    else if 0 then { } else { }
  else
    b = -28 ;
  b = z ;
  b = b <= ( z == - a ) ;
  a = - ( 20 ) ;
  y = y ;
  if x + -15 || 0 == z then
    if a then { } else if b -0 then { } else { }
  else { } ;
  x = 0 ;
  y = 1 ;
  b = x ;
  b = - x ;
  a = 0 && ( - b && 1 ) ;
  b = 0 ;
  if b then
    z = - ( 0 )
  else
    z = z ;
  if z then
    if x == - ( 0 ) then { } else
      z = y
  else
    b = ( 30 - - ( 16 ) ) / ( y && ( 1 || 0 ) / 1 ) ;
  x = - ( 1 ) ;
  a = 1 ;
  z = b ;
  x = 0 ;
  b = - ( - x ) && x ;
  while z == 0 && -17 do
    if 4 then
      b = - ( - y <= - ( 0 ) ) && 10
    else {
      z = 0
    }
}

*******************

AST
Seq [Assign "z" (Uminus (Var "b")),If (Uminus (Const 0)) (Assign "z" (Binop Div (Uminus (Binop And (Var "a") (Const 0))) (Binop Equal (Const 1) (Const 0)))) (Assign "y" (Binop Or (Uminus (Const 0)) (Binop Div (Uminus (Var "b")) (Binop Equal (Const 1) (Var "y"))))),Assign "x" (Var "a"),Assign "z" (Binop Minus (Const 28) (Var "z")),Assign "y" (Var "b"),Assign "z" (Uminus (Var "b")),If (Uminus (Const 0)) (Assign "x" (Var "x")) (Assign "a" (Const 0)),Assign "x" (Const 1),Assign "x" (Binop Less (Binop Div (Binop Minus (Const 1) (Const 1)) (Var "a")) (Binop And (Const 0) (Const 1))),If (Uminus (Var "b")) (If (Var "y") (Assign "x" (Binop Plus (Binop Less (Var "a") (Const 25)) (Var "x"))) (Seq [])) (Assign "z" (Binop And (Binop Less (Var "z") (Var "x")) (Var "y"))),Assign "a" (Var "z"),If (Const (-29)) (Seq []) (Seq [If (Binop Minus (Const (-6)) (Binop Plus (Const 1) (Var "y"))) (Seq []) (Seq [])]),Assign "a" (Const 0),Assign "z" (Var "a"),Assign "y" (Uminus (Const 0)),Assign "z" (Var "z"),Assign "z" (Var "b"),Assign "z" (Binop Equal (Const 1) (Binop And (Binop Less (Binop Equal (Var "x") (Binop Minus (Var "y") (Var "x"))) (Var "y")) (Binop Equal (Const 28) (Binop Div (Binop Times (Const 1) (Var "z")) (Uminus (Const 0)))))),If (Var "y") (If (Uminus (Var "a")) (Seq []) (Assign "z" (Const 0))) (Seq []),Assign "z" (Const 14),Assign "y" (Var "b"),If (Var "x") (If (Const 1) (Seq []) (Seq [])) (Assign "x" (Var "z")),Assign "b" (Var "b"),Assign "y" (Uminus (Uminus (Var "a"))),If (Binop Less (Binop Div (Var "b") (Var "b")) (Binop Plus (Binop Plus (Uminus (Uminus (Const 30))) (Var "a")) (Var "z"))) (Seq [Assign "z" (Const 24)]) (Assign "a" (Var "b"))]
 was printed as
*******************
{ z = - b ; if - ( 0 ) then z = - ( a && 0 ) / ( 1 == 0 ) else y = - ( 0 ) || - b / ( 1 == y ) ; x = a ; z = 28 - z ; y = b ; z = - b ; if - ( 0 ) then x = x else a = 0 ; x = 1 ; x = ( 1 -1 ) / a < ( 0 && 1 ) ; if - b then if y then x = ( a < 25 ) + x else { } else z = z < x && y ; a = z ; if -29 then { } else { if -6 - ( 1 + y ) then { } else { } } ; a = 0 ; z = a ; y = - ( 0 ) ; z = z ; z = b ; z = 1 == ( x == y - x < y && 28 == 1 * z / - ( 0 ) ) ; if y then if - a then { } else z = 0 else { } ; z = 14 ; y = b ; if x then if 1 then { } else { } else x = z ; b = b ; y = - ( - a ) ; if b / b < - ( - ( 30 ) ) + a + z then { z = 24 } else a = b }

*******************
but expected
*******************
{
  z = - b ;
  if - ( 0 ) then
    z = - ( a && 0 ) / ( 1 == 0 )
  else
    y = - ( 0 ) || - b / ( 1 == y ) ;
  x = a ;
  z = 28 - z ;
  y = b ;
  z = - b ;
  if - ( 0 ) then
    x = x
  else
    a = 0 ;
  x = 1 ;
  x = ( 1 -1 ) / a < ( 0 && 1 ) ;
  if - b then
    if y then
      x = ( a < 25 ) + x
    else { }
  else
    z = z < x && y ;
  a = z ;
  if -29 then { } else {
    if -6 - ( 1 + y ) then { } else { }
  } ;
  a = 0 ;
  z = a ;
  y = - ( 0 ) ;
  z = z ;
  z = b ;
  z = 1 == ( x == y - x < y && 28 == 1 * z / - ( 0 ) ) ;
  if y then
    if - a then { } else
      z = 0
  else { } ;
  z = 14 ;
  y = b ;
  if x then
    if 1 then { } else { }
  else
    x = z ;
  b = b ;
  y = - ( - a ) ;
  if b / b < - ( - ( 30 ) ) + a + z then {
    z = 24
  } else
    a = b
}

*******************

AST
While (Var "a") (Seq [Assign "b" (Const 0)])
 was printed as
*******************
while a do { b = 0 }

*******************
but expected
*******************
while a do {
  b = 0
}

*******************

AST
If (Binop Or (Binop Minus (Const 25) (Binop Or (Var "b") (Const 1))) (Var "a")) (Assign "x" (Binop Minus (Const 1) (Binop Times (Binop Minus (Var "a") (Binop Plus (Binop And (Const 0) (Const 1)) (Uminus (Const 0)))) (Const (-8))))) (Assign "x" (Const 0))
 was printed as
*******************
if 25 - ( b || 1 ) || a then x = 1 - ( a - ( ( 0 && 1 ) + - ( 0 ) ) ) * -8 else x = 0

*******************
but expected
*******************
if 25 - ( b || 1 ) || a then
  x = 1 - ( a - ( ( 0 && 1 ) + - ( 0 ) ) ) * -8
else
  x = 0

*******************

AST
Seq [Assign "x" (Uminus (Binop LessEq (Binop Less (Var "b") (Const 0)) (Var "y"))),If (Var "b") (Assign "y" (Var "x")) (Seq [If (Uminus (Var "y")) (Seq []) (Seq [])]),If (Uminus (Binop Equal (Var "y") (Var "z"))) (If (Binop Equal (Const 1) (Const 0)) (While (Binop Minus (Uminus (Const 0)) (Const 16)) (Seq [])) (If (Const 4) (Seq []) (Seq []))) (Assign "b" (Var "a")),Assign "z" (Binop Equal (Binop LessEq (Const 0) (Binop LessEq (Var "x") (Var "b"))) (Binop LessEq (Var "a") (Const (-14)))),Assign "x" (Const 0),If (Const 1) (Assign "y" (Uminus (Binop Equal (Const 1) (Var "y")))) (Seq []),Assign "z" (Const 0),Assign "x" (Var "a"),Assign "a" (Binop Equal (Var "a") (Uminus (Const 1))),If (Const 1) (Assign "z" (Var "b")) (Seq []),Assign "a" (Binop Minus (Var "y") (Const 0)),If (Const 1) (Seq []) (Seq []),While (Binop LessEq (Var "z") (Const (-7))) (If (Uminus (Var "z")) (Assign "a" (Const 29)) (Seq []))]
 was printed as
*******************
{ x = - ( b < 0 <= y ) ; if b then y = x else { if - y then { } else { } } ; if - ( y == z ) then if 1 == 0 then while - ( 0 ) -16 do { } else if 4 then { } else { } else b = a ; z = 0 <= ( x <= b ) == ( a <= -14 ) ; x = 0 ; if 1 then y = - ( 1 == y ) else { } ; z = 0 ; x = a ; a = a == - ( 1 ) ; if 1 then z = b else { } ; a = y -0 ; if 1 then { } else { } ; while z <= -7 do if - z then a = 29 else { } }

*******************
but expected
*******************
{
  x = - ( b < 0 <= y ) ;
  if b then
    y = x
  else {
    if - y then { } else { }
  } ;
  if - ( y == z ) then
    if 1 == 0 then
      while - ( 0 ) -16 do { }
    else if 4 then { } else { }
  else
    b = a ;
  z = 0 <= ( x <= b ) == ( a <= -14 ) ;
  x = 0 ;
  if 1 then
    y = - ( 1 == y )
  else { } ;
  z = 0 ;
  x = a ;
  a = a == - ( 1 ) ;
  if 1 then
    z = b
  else { } ;
  a = y -0 ;
  if 1 then { } else { } ;
  while z <= -7 do
    if - z then
      a = 29
    else { }
}

*******************

AST
Seq [Assign "x" (Const 0),Assign "x" (Var "a"),Assign "z" (Const 1)]
 was printed as
*******************
{ x = 0 ; x = a ; z = 1 }

*******************
but expected
*******************
{
  x = 0 ;
  x = a ;
  z = 1
}

*******************

AST
Seq [Assign "x" (Const 0),If (Const 0) (Assign "x" (Binop Times (Const 0) (Var "x"))) (Assign "a" (Var "a")),While (Const (-24)) (If (Var "x") (Assign "b" (Binop And (Const 0) (Uminus (Const 0)))) (Seq [Assign "x" (Const 0)])),While (Var "z") (Seq [While (Const 0) (Seq [])]),Assign "z" (Var "y"),Assign "y" (Const 1),Assign "z" (Var "x")]
 was printed as
*******************
{ x = 0 ; if 0 then x = 0 * x else a = a ; while -24 do if x then b = 0 && - ( 0 ) else { x = 0 } ; while z do { while 0 do { } } ; z = y ; y = 1 ; z = x }

*******************
but expected
*******************
{
  x = 0 ;
  if 0 then
    x = 0 * x
  else
    a = a ;
  while -24 do
    if x then
      b = 0 && - ( 0 )
    else {
      x = 0
    } ;
  while z do {
    while 0 do { }
  } ;
  z = y ;
  y = 1 ;
  z = x
}

*******************

AST
Seq [Assign "a" (Const (-12)),While (Binop Equal (Binop Less (Var "a") (Var "y")) (Binop And (Binop Div (Uminus (Uminus (Var "z"))) (Const 1)) (Const 1))) (If (Var "x") (While (Binop Plus (Binop Equal (Const (-24)) (Binop Equal (Const (-15)) (Var "z"))) (Binop Minus (Uminus (Uminus (Const (-7)))) (Uminus (Var "y")))) (Assign "b" (Binop Less (Binop Or (Var "z") (Var "a")) (Var "a")))) (If (Var "x") (Seq []) (If (Const 0) (Seq []) (Seq []))))]
 was printed as
*******************
{ a = -12 ; while a < y == ( - ( - z ) / 1 && 1 ) do if x then while ( -24 == ( -15 == z ) ) + ( - ( - ( -7 ) ) - - y ) do b = ( z || a ) < a else if x then { } else if 0 then { } else { } }

*******************
but expected
*******************
{
  a = -12 ;
  while a < y == ( - ( - z ) / 1 && 1 ) do
    if x then
      while ( -24 == ( -15 == z ) ) + ( - ( - ( -7 ) ) - - y ) do
        b = ( z || a ) < a
    else if x then { } else if 0 then { } else { }
}

*******************

AST
While (Const 1) (Seq [If (Const 9) (Assign "y" (Var "z")) (Seq []),If (Var "x") (Assign "z" (Binop Equal (Const 1) (Binop LessEq (Const (-25)) (Const 1)))) (If (Const 0) (Seq []) (Seq [])),Assign "z" (Binop And (Var "z") (Var "a")),Assign "a" (Var "z"),Assign "b" (Var "x"),While (Binop Less (Binop Minus (Var "y") (Var "x")) (Binop Div (Binop Times (Var "y") (Binop Or (Const 0) (Binop Plus (Var "z") (Const (-24))))) (Binop Div (Binop Equal (Const 1) (Var "z")) (Binop Div (Const (-11)) (Var "y"))))) (Assign "a" (Const 0))])
 was printed as
*******************
while 1 do { if 9 then y = z else { } ; if x then z = 1 == ( -25 <= 1 ) else if 0 then { } else { } ; z = z && a ; a = z ; b = x ; while y - x < y * ( 0 || z + -24 ) / ( ( 1 == z ) / ( -11 / y ) ) do a = 0 }

*******************
but expected
*******************
while 1 do {
  if 9 then
    y = z
  else { } ;
  if x then
    z = 1 == ( -25 <= 1 )
  else if 0 then { } else { } ;
  z = z && a ;
  a = z ;
  b = x ;
  while y - x < y * ( 0 || z + -24 ) / ( ( 1 == z ) / ( -11 / y ) ) do
    a = 0
}

*******************

AST
Seq [While (Var "z") (Assign "y" (Var "z")),Assign "y" (Var "z"),If (Uminus (Binop Times (Binop Minus (Binop Less (Const 0) (Binop Equal (Const 1) (Const 1))) (Binop LessEq (Binop LessEq (Const (-14)) (Var "y")) (Binop Times (Var "b") (Const (-16))))) (Const 0))) (Assign "b" (Binop Or (Var "a") (Const 18))) (Seq []),Assign "y" (Const 1),If (Binop Minus (Binop Equal (Const 0) (Const 1)) (Var "x")) (Assign "b" (Binop LessEq (Binop Times (Uminus (Const (-16))) (Const (-7))) (Const 0))) (Assign "z" (Var "z")),Assign "y" (Uminus (Var "y")),Assign "x" (Binop Div (Const (-26)) (Binop Equal (Binop Equal (Binop Div (Var "z") (Var "a")) (Uminus (Binop Minus (Var "y") (Const 0)))) (Uminus (Var "b")))),Assign "a" (Binop Or (Binop And (Const 0) (Var "y")) (Binop Times (Binop Div (Const 1) (Binop And (Const 0) (Var "a"))) (Var "z"))),Assign "z" (Binop Plus (Binop Times (Var "z") (Const 7)) (Uminus (Const 1))),If (Const 1) (If (Var "x") (Assign "y" (Const (-29))) (Seq [])) (Assign "z" (Var "x")),Assign "a" (Var "z"),If (Binop Equal (Var "z") (Var "x")) (Seq [Assign "z" (Const 1)]) (Seq [Assign "x" (Binop Minus (Binop And (Var "b") (Binop Or (Var "a") (Var "z"))) (Binop And (Binop And (Const 0) (Binop Equal (Binop Times (Var "z") (Var "b")) (Binop And (Var "a") (Var "b")))) (Var "x")))]),If (Const 0) (Assign "b" (Var "a")) (Seq []),Assign "b" (Binop LessEq (Binop Plus (Binop Plus (Var "b") (Binop Minus (Var "a") (Binop Equal (Var "z") (Const 1)))) (Var "a")) (Uminus (Binop Plus (Const 0) (Var "a")))),Assign "a" (Var "x"),Assign "z" (Binop Plus (Const 1) (Const 0)),While (Uminus (Uminus (Const 0))) (Assign "z" (Const 23))]
 was printed as
*******************
{ while z do y = z ; y = z ; if - ( ( ( 0 < ( 1 == 1 ) ) - ( -14 <= y <= b * -16 ) ) * 0 ) then b = a || 18 else { } ; y = 1 ; if ( 0 == 1 ) - x then b = - ( -16 ) * -7 <= 0 else z = z ; y = - y ; x = -26 / ( z / a == - ( y -0 ) == - b ) ; a = 0 && y || 1 / ( 0 && a ) * z ; z = z * 7 + - ( 1 ) ; if 1 then if x then y = -29 else { } else z = x ; a = z ; if z == x then { z = 1 } else { x = ( b && ( a || z ) ) - ( 0 && z * b == ( a && b ) && x ) } ; if 0 then b = a else { } ; b = b + ( a - ( z == 1 ) ) + a <= - ( 0 + a ) ; a = x ; z = 1 + 0 ; while - ( - ( 0 ) ) do z = 23 }

*******************
but expected
*******************
{
  while z do
    y = z ;
  y = z ;
  if - ( ( ( 0 < ( 1 == 1 ) ) - ( -14 <= y <= b * -16 ) ) * 0 ) then
    b = a || 18
  else { } ;
  y = 1 ;
  if ( 0 == 1 ) - x then
    b = - ( -16 ) * -7 <= 0
  else
    z = z ;
  y = - y ;
  x = -26 / ( z / a == - ( y -0 ) == - b ) ;
  a = 0 && y || 1 / ( 0 && a ) * z ;
  z = z * 7 + - ( 1 ) ;
  if 1 then
    if x then
      y = -29
    else { }
  else
    z = x ;
  a = z ;
  if z == x then {
    z = 1
  } else {
    x = ( b && ( a || z ) ) - ( 0 && z * b == ( a && b ) && x )
  } ;
  if 0 then
    b = a
  else { } ;
  b = b + ( a - ( z == 1 ) ) + a <= - ( 0 + a ) ;
  a = x ;
  z = 1 + 0 ;
  while - ( - ( 0 ) ) do
    z = 23
}

*******************

AST
If (Const 0) (While (Const 30) (Assign "x" (Const 18))) (Assign "y" (Var "b"))
 was printed as
*******************
if 0 then while 30 do x = 18 else y = b

*******************
but expected
*******************
if 0 then
  while 30 do
    x = 18
else
  y = b

*******************

AST
While (Binop Times (Const 0) (Var "x")) (Seq [While (Const (-23)) (Assign "a" (Binop Minus (Binop And (Var "a") (Var "z")) (Const 1))),Assign "z" (Binop LessEq (Binop Minus (Var "b") (Const 14)) (Const (-18))),Assign "z" (Var "b"),Assign "y" (Var "y"),Assign "y" (Binop Less (Binop Or (Binop Less (Var "a") (Binop And (Var "z") (Binop And (Var "z") (Const 1)))) (Binop Plus (Binop Times (Const 0) (Var "z")) (Const 0))) (Var "b")),Assign "a" (Uminus (Var "a"))])
 was printed as
*******************
while 0 * x do { while -23 do a = ( a && z ) -1 ; z = b -14 <= -18 ; z = b ; y = y ; y = ( a < ( z && ( z && 1 ) ) || 0 * z + 0 ) < b ; a = - a }

*******************
but expected
*******************
while 0 * x do {
  while -23 do
    a = ( a && z ) -1 ;
  z = b -14 <= -18 ;
  z = b ;
  y = y ;
  y = ( a < ( z && ( z && 1 ) ) || 0 * z + 0 ) < b ;
  a = - a
}

*******************

AST
Seq [While (Binop And (Binop Div (Binop Times (Const 0) (Const 0)) (Const 1)) (Const 1)) (Assign "z" (Var "y")),While (Binop And (Const 1) (Binop Plus (Binop Times (Const 1) (Const 1)) (Const 1))) (Assign "x" (Uminus (Var "b"))),Assign "z" (Binop Or (Uminus (Var "y")) (Const 0)),Assign "y" (Const 1),Assign "x" (Var "b"),Assign "y" (Const 1),Assign "a" (Var "z"),Assign "a" (Const 4),Assign "b" (Uminus (Const 0)),If (Const 0) (If (Var "z") (Assign "a" (Var "a")) (Assign "y" (Uminus (Uminus (Const 0))))) (Seq []),Assign "a" (Binop Plus (Binop Times (Var "x") (Binop Or (Binop Or (Const 1) (Var "x")) (Var "b"))) (Var "y")),If (Const 1) (If (Const (-21)) (Seq []) (If (Binop Plus (Var "x") (Binop And (Binop Or (Const 1) (Uminus (Binop And (Const 0) (Const 0)))) (Uminus (Binop Times (Var "x") (Binop Plus (Const 1) (Var "b")))))) (Seq []) (Seq []))) (Seq [If (Var "b") (Seq []) (Seq [])]),Assign "x" (Binop Times (Binop Equal (Var "a") (Binop Plus (Const 1) (Var "b"))) (Uminus (Var "z"))),While (Var "y") (Assign "z" (Var "x")),If (Var "z") (While (Binop Or (Binop Or (Const 1) (Binop LessEq (Binop Equal (Binop Times (Var "y") (Const 1)) (Const 1)) (Const 0))) (Const (-11))) (Seq [])) (Seq []),Assign "x" (Const 1),Assign "y" (Const 1),Assign "a" (Var "x"),If (Binop Or (Uminus (Var "z")) (Var "b")) (Assign "b" (Var "b")) (Assign "a" (Uminus (Const 1))),Assign "z" (Binop Equal (Const 1) (Const 1))]
 was printed as
*******************
{ while 0 * 0 / 1 && 1 do z = y ; while 1 && 1 * 1 + 1 do x = - b ; z = - y || 0 ; y = 1 ; x = b ; y = 1 ; a = z ; a = 4 ; b = - ( 0 ) ; if 0 then if z then a = a else y = - ( - ( 0 ) ) else { } ; a = x * ( 1 || x || b ) + y ; if 1 then if -21 then { } else if x + ( ( 1 || - ( 0 && 0 ) ) && - ( x * ( 1 + b ) ) ) then { } else { } else { if b then { } else { } } ; x = ( a == 1 + b ) * - z ; while y do z = x ; if z then while 1 || y * 1 == 1 <= 0 || -11 do { } else { } ; x = 1 ; y = 1 ; a = x ; if - z || b then b = b else a = - ( 1 ) ; z = 1 == 1 }

*******************
but expected
*******************
{
  while 0 * 0 / 1 && 1 do
    z = y ;
  while 1 && 1 * 1 + 1 do
    x = - b ;
  z = - y || 0 ;
  y = 1 ;
  x = b ;
  y = 1 ;
  a = z ;
  a = 4 ;
  b = - ( 0 ) ;
  if 0 then
    if z then
      a = a
    else
      y = - ( - ( 0 ) )
  else { } ;
  a = x * ( 1 || x || b ) + y ;
  if 1 then
    if -21 then { } else if x + ( ( 1 || - ( 0 && 0 ) ) && - ( x * ( 1 + b ) ) ) then { } else { }
  else {
    if b then { } else { }
  } ;
  x = ( a == 1 + b ) * - z ;
  while y do
    z = x ;
  if z then
    while 1 || y * 1 == 1 <= 0 || -11 do { }
  else { } ;
  x = 1 ;
  y = 1 ;
  a = x ;
  if - z || b then
    b = b
  else
    a = - ( 1 ) ;
  z = 1 == 1
}

*******************

AST
While (Var "a") (Seq [If (Var "x") (Assign "z" (Const (-16))) (Seq []),If (Const (-5)) (Seq []) (Seq []),While (Binop Times (Binop Or (Uminus (Binop Times (Const 24) (Const 1))) (Const 0)) (Binop Equal (Var "x") (Binop And (Const 1) (Binop Times (Const 6) (Uminus (Var "x")))))) (If (Const 0) (Assign "a" (Binop Div (Binop Plus (Var "b") (Uminus (Uminus (Binop Div (Const 0) (Const 1))))) (Binop Times (Var "a") (Var "a")))) (Seq [])),Assign "z" (Binop Less (Const (-28)) (Binop Div (Binop Times (Var "b") (Binop LessEq (Const (-13)) (Uminus (Var "z")))) (Const 1))),Assign "x" (Var "a")])
 was printed as
*******************
while a do { if x then z = -16 else { } ; if -5 then { } else { } ; while ( - ( 24 * 1 ) || 0 ) * ( x == ( 1 && 6 * - x ) ) do if 0 then a = ( b + - ( - ( 0 / 1 ) ) ) / ( a * a ) else { } ; z = -28 < b * ( -13 <= - z ) / 1 ; x = a }

*******************
but expected
*******************
while a do {
  if x then
    z = -16
  else { } ;
  if -5 then { } else { } ;
  while ( - ( 24 * 1 ) || 0 ) * ( x == ( 1 && 6 * - x ) ) do
    if 0 then
      a = ( b + - ( - ( 0 / 1 ) ) ) / ( a * a )
    else { } ;
  z = -28 < b * ( -13 <= - z ) / 1 ;
  x = a
}

*******************

AST
Seq [Assign "x" (Binop Or (Const 1) (Binop Times (Binop Less (Const 0) (Const 28)) (Var "y"))),Assign "b" (Binop Or (Var "z") (Binop LessEq (Binop Div (Uminus (Const (-20))) (Const 20)) (Var "z"))),Assign "z" (Var "b"),Assign "x" (Const 1),Assign "y" (Const 0),Assign "x" (Var "z"),Assign "y" (Uminus (Const 1)),While (Binop Less (Uminus (Uminus (Binop Or (Const 0) (Binop LessEq (Var "b") (Const 0))))) (Binop Or (Var "y") (Binop Div (Var "x") (Binop Less (Const (-14)) (Const 1))))) (Assign "b" (Const 1)),Assign "y" (Binop Plus (Var "a") (Const 1)),Assign "b" (Const 0),Assign "y" (Binop Or (Var "y") (Uminus (Var "a"))),Assign "a" (Binop Div (Binop Equal (Var "a") (Const 1)) (Binop Less (Const 0) (Var "a"))),While (Uminus (Uminus (Binop Or (Binop Or (Const 23) (Const 0)) (Var "x")))) (Assign "b" (Uminus (Binop Times (Const 0) (Var "y")))),Assign "a" (Binop And (Const 0) (Var "x")),If (Const 1) (Seq []) (Seq []),While (Binop And (Uminus (Uminus (Uminus (Var "z")))) (Const 0)) (Assign "b" (Var "b")),Assign "a" (Var "a"),Assign "b" (Const 2),Assign "y" (Var "x"),While (Var "a") (If (Const 1) (Seq []) (While (Uminus (Const 0)) (Seq []))),Assign "z" (Binop Plus (Var "y") (Binop Times (Const 1) (Binop Plus (Var "a") (Const (-25))))),Assign "z" (Const 0),Assign "x" (Binop Less (Const 28) (Uminus (Binop Div (Const (-18)) (Const 1))))]
 was printed as
*******************
{ x = 1 || ( 0 < 28 ) * y ; b = z || - ( -20 ) / 20 <= z ; z = b ; x = 1 ; y = 0 ; x = z ; y = - ( 1 ) ; while - ( - ( 0 || b <= 0 ) ) < ( y || x / ( -14 < 1 ) ) do b = 1 ; y = a + 1 ; b = 0 ; y = y || - a ; a = ( a == 1 ) / ( 0 < a ) ; while - ( - ( 23 || 0 || x ) ) do b = - ( 0 * y ) ; a = 0 && x ; if 1 then { } else { } ; while - ( - ( - z ) ) && 0 do b = b ; a = a ; b = 2 ; y = x ; while a do if 1 then { } else while - ( 0 ) do { } ; z = y + 1 * ( a + -25 ) ; z = 0 ; x = 28 < - ( -18 / 1 ) }

*******************
but expected
*******************
{
  x = 1 || ( 0 < 28 ) * y ;
  b = z || - ( -20 ) / 20 <= z ;
  z = b ;
  x = 1 ;
  y = 0 ;
  x = z ;
  y = - ( 1 ) ;
  while - ( - ( 0 || b <= 0 ) ) < ( y || x / ( -14 < 1 ) ) do
    b = 1 ;
  y = a + 1 ;
  b = 0 ;
  y = y || - a ;
  a = ( a == 1 ) / ( 0 < a ) ;
  while - ( - ( 23 || 0 || x ) ) do
    b = - ( 0 * y ) ;
  a = 0 && x ;
  if 1 then { } else { } ;
  while - ( - ( - z ) ) && 0 do
    b = b ;
  a = a ;
  b = 2 ;
  y = x ;
  while a do
    if 1 then { } else
      while - ( 0 ) do { } ;
  z = y + 1 * ( a + -25 ) ;
  z = 0 ;
  x = 28 < - ( -18 / 1 )
}

*******************

AST
Seq [If (Const (-7)) (Seq [Assign "z" (Binop Or (Binop Less (Binop Div (Var "a") (Var "a")) (Const 0)) (Binop Minus (Binop Plus (Const (-4)) (Var "a")) (Var "y")))]) (Assign "b" (Binop Less (Var "z") (Var "x"))),Assign "a" (Binop And (Uminus (Const 1)) (Binop And (Const 16) (Var "a"))),If (Uminus (Binop And (Binop And (Binop Or (Binop Less (Const 0) (Const 1)) (Const 1)) (Var "a")) (Const (-23)))) (Assign "y" (Var "y")) (Assign "b" (Binop Less (Binop Minus (Var "y") (Const 1)) (Var "z"))),Assign "a" (Binop And (Binop Or (Const 1) (Var "y")) (Var "y")),Assign "y" (Const 0),Assign "b" (Const 1),Assign "a" (Var "z"),While (Var "x") (Assign "y" (Var "b")),Assign "x" (Const 1),While (Var "x") (Seq []),If (Var "z") (Seq []) (Assign "y" (Var "a")),If (Binop Or (Binop LessEq (Const 0) (Var "z")) (Const 0)) (Assign "x" (Binop And (Binop Times (Var "x") (Const 0)) (Binop LessEq (Const 0) (Uminus (Var "y"))))) (Assign "x" (Binop Div (Uminus (Binop Minus (Binop Less (Const 0) (Binop Div (Const 1) (Var "x"))) (Var "x"))) (Var "z"))),Assign "a" (Binop LessEq (Binop LessEq (Var "y") (Const 9)) (Binop Plus (Binop LessEq (Var "z") (Const 1)) (Var "a"))),Assign "z" (Var "x")]
 was printed as
*******************
{ if -7 then { z = a / a < 0 || -4 + a - y } else b = z < x ; a = - ( 1 ) && ( 16 && a ) ; if - ( ( 0 < 1 || 1 ) && a && -23 ) then y = y else b = y -1 < z ; a = ( 1 || y ) && y ; y = 0 ; b = 1 ; a = z ; while x do y = b ; x = 1 ; while x do { } ; if z then { } else y = a ; if 0 <= z || 0 then x = x * 0 && 0 <= - y else x = - ( ( 0 < 1 / x ) - x ) / z ; a = y <= 9 <= ( z <= 1 ) + a ; z = x }

*******************
but expected
*******************
{
  if -7 then {
    z = a / a < 0 || -4 + a - y
  } else
    b = z < x ;
  a = - ( 1 ) && ( 16 && a ) ;
  if - ( ( 0 < 1 || 1 ) && a && -23 ) then
    y = y
  else
    b = y -1 < z ;
  a = ( 1 || y ) && y ;
  y = 0 ;
  b = 1 ;
  a = z ;
  while x do
    y = b ;
  x = 1 ;
  while x do { } ;
  if z then { } else
    y = a ;
  if 0 <= z || 0 then
    x = x * 0 && 0 <= - y
  else
    x = - ( ( 0 < 1 / x ) - x ) / z ;
  a = y <= 9 <= ( z <= 1 ) + a ;
  z = x
}

*******************

AST
If (Const 0) (Seq [Assign "a" (Const 1)]) (Seq [])
 was printed as
*******************
if 0 then { a = 1 } else { }

*******************
but expected
*******************
if 0 then {
  a = 1
} else { }

*******************

AST
Seq [Assign "x" (Binop Plus (Var "z") (Binop And (Var "a") (Const 1))),Assign "b" (Binop Times (Const 1) (Const 0)),Assign "x" (Const 0),Assign "z" (Var "z"),Assign "a" (Const 1),Assign "x" (Const 20),If (Uminus (Binop Div (Var "y") (Const 1))) (While (Const 0) (Assign "b" (Binop Div (Binop LessEq (Var "y") (Uminus (Const (-9)))) (Binop Plus (Const 1) (Const 0))))) (Seq []),Assign "b" (Const 1),While (Binop Plus (Uminus (Binop And (Const 0) (Var "a"))) (Var "z")) (Seq []),Assign "z" (Const 1),Assign "a" (Const 1),Assign "y" (Binop Div (Binop Div (Binop And (Var "z") (Binop Equal (Const 1) (Var "a"))) (Const 1)) (Uminus (Const 1))),Assign "a" (Const 1),Assign "b" (Var "y"),Assign "b" (Const 0),While (Var "y") (While (Var "a") (While (Binop Equal (Var "z") (Var "z")) (If (Const 18) (Seq []) (Seq [])))),Assign "x" (Var "a"),Assign "x" (Binop Or (Const 0) (Const (-21))),If (Binop And (Var "a") (Binop Times (Uminus (Var "a")) (Const 1))) (Assign "z" (Uminus (Var "x"))) (Seq [Assign "y" (Var "a"),Assign "a" (Binop Equal (Binop Plus (Const 0) (Var "b")) (Binop Plus (Var "b") (Binop Equal (Var "y") (Const 1))))])]
 was printed as
*******************
{ x = z + ( a && 1 ) ; b = 1 * 0 ; x = 0 ; z = z ; a = 1 ; x = 20 ; if - ( y / 1 ) then while 0 do b = ( y <= - ( -9 ) ) / ( 1 + 0 ) else { } ; b = 1 ; while - ( 0 && a ) + z do { } ; z = 1 ; a = 1 ; y = ( z && 1 == a ) / 1 / - ( 1 ) ; a = 1 ; b = y ; b = 0 ; while y do while a do while z == z do if 18 then { } else { } ; x = a ; x = 0 || -21 ; if a && - a * 1 then z = - x else { y = a ; a = 0 + b == b + ( y == 1 ) } }

*******************
but expected
*******************
{
  x = z + ( a && 1 ) ;
  b = 1 * 0 ;
  x = 0 ;
  z = z ;
  a = 1 ;
  x = 20 ;
  if - ( y / 1 ) then
    while 0 do
      b = ( y <= - ( -9 ) ) / ( 1 + 0 )
  else { } ;
  b = 1 ;
  while - ( 0 && a ) + z do { } ;
  z = 1 ;
  a = 1 ;
  y = ( z && 1 == a ) / 1 / - ( 1 ) ;
  a = 1 ;
  b = y ;
  b = 0 ;
  while y do
    while a do
      while z == z do
        if 18 then { } else { } ;
  x = a ;
  x = 0 || -21 ;
  if a && - a * 1 then
    z = - x
  else {
    y = a ;
    a = 0 + b == b + ( y == 1 )
  }
}

*******************

AST
If (Const (-18)) (Assign "b" (Const (-27))) (Seq [Assign "x" (Const 1),Assign "a" (Binop Less (Const 0) (Binop Minus (Var "b") (Uminus (Var "a")))),Assign "x" (Binop And (Const 0) (Var "a"))])
 was printed as
*******************
if -18 then b = -27 else { x = 1 ; a = 0 < b - - a ; x = 0 && a }

*******************
but expected
*******************
if -18 then
  b = -27
else {
  x = 1 ;
  a = 0 < b - - a ;
  x = 0 && a
}

*******************

AST
Seq [Assign "b" (Var "y"),If (Binop Or (Uminus (Binop Div (Var "z") (Binop And (Var "y") (Var "x")))) (Var "y")) (Seq []) (Seq [Assign "a" (Binop Minus (Var "x") (Uminus (Binop Less (Var "b") (Binop Minus (Uminus (Var "b")) (Uminus (Var "z"))))))]),If (Var "a") (If (Binop Minus (Var "z") (Binop Or (Const 1) (Var "x"))) (While (Binop Div (Const 0) (Var "a")) (Seq [])) (If (Binop Minus (Binop Times (Var "a") (Binop Or (Const 8) (Var "y"))) (Const 1)) (If (Binop Div (Var "a") (Var "x")) (Seq []) (Seq [])) (Assign "a" (Const (-5))))) (If (Const 5) (Assign "z" (Var "z")) (Seq [])),Assign "b" (Var "x"),While (Binop Less (Uminus (Var "a")) (Const 15)) (Assign "x" (Binop Minus (Const 1) (Const 1))),Assign "x" (Const 0),Assign "x" (Var "b"),Assign "a" (Const 0),Assign "x" (Const 0)]
 was printed as
*******************
{ b = y ; if - ( z / ( y && x ) ) || y then { } else { a = x - - ( b < - b - - z ) } ; if a then if z - ( 1 || x ) then while 0 / a do { } else if a * ( 8 || y ) -1 then if a / x then { } else { } else a = -5 else if 5 then z = z else { } ; b = x ; while - a < 15 do x = 1 -1 ; x = 0 ; x = b ; a = 0 ; x = 0 }

*******************
but expected
*******************
{
  b = y ;
  if - ( z / ( y && x ) ) || y then { } else {
    a = x - - ( b < - b - - z )
  } ;
  if a then
    if z - ( 1 || x ) then
      while 0 / a do { }
    else if a * ( 8 || y ) -1 then
      if a / x then { } else { }
    else
      a = -5
  else if 5 then
    z = z
  else { } ;
  b = x ;
  while - a < 15 do
    x = 1 -1 ;
  x = 0 ;
  x = b ;
  a = 0 ;
  x = 0
}

*******************

AST
Seq [While (Binop Equal (Binop Or (Const 0) (Var "b")) (Var "a")) (Assign "y" (Const (-30))),If (Uminus (Binop Plus (Const 0) (Const 0))) (Assign "a" (Var "x")) (Assign "y" (Const 1)),Assign "x" (Var "z"),Assign "y" (Binop Minus (Var "b") (Var "b")),If (Binop Equal (Var "y") (Const 0)) (Assign "a" (Uminus (Const 1))) (If (Binop Equal (Binop Minus (Var "z") (Var "x")) (Var "b")) (Assign "b" (Var "y")) (Seq [Assign "b" (Var "y")])),Assign "y" (Var "a"),While (Binop And (Binop Less (Var "a") (Var "x")) (Var "a")) (Assign "z" (Binop Or (Const 0) (Const 0))),Assign "y" (Uminus (Binop Plus (Const 1) (Binop Plus (Binop Div (Const 1) (Var "a")) (Binop Times (Binop Div (Var "y") (Const 1)) (Const 0))))),Assign "x" (Binop Or (Binop Plus (Const 0) (Const 1)) (Const 0)),Assign "a" (Const (-9)),While (Var "b") (If (Var "a") (Assign "a" (Uminus (Const (-23)))) (Assign "z" (Const 0))),Assign "a" (Var "y"),Assign "z" (Const 0),If (Var "x") (Assign "a" (Const (-22))) (Assign "y" (Binop Minus (Var "a") (Uminus (Var "b")))),If (Var "x") (Assign "a" (Const 1)) (While (Uminus (Const 0)) (Assign "y" (Binop Div (Binop Times (Binop Less (Var "b") (Binop Less (Binop Equal (Var "a") (Const (-10))) (Uminus (Const 1)))) (Binop Equal (Const 0) (Const 0))) (Uminus (Const 0))))),Assign "x" (Var "b"),If (Uminus (Const (-26))) (Assign "y" (Const 0)) (Assign "y" (Var "b")),Assign "a" (Binop Equal (Var "x") (Var "y")),Assign "y" (Var "z"),Assign "a" (Uminus (Uminus (Var "x"))),If (Uminus (Var "y")) (Assign "z" (Const 7)) (While (Var "b") (Assign "a" (Binop Times (Binop Minus (Uminus (Binop Plus (Var "b") (Binop Times (Var "x") (Const 1)))) (Binop Less (Uminus (Binop And (Var "a") (Var "a"))) (Const 19))) (Binop Or (Binop Div (Var "z") (Binop Div (Binop Less (Var "z") (Var "a")) (Binop Or (Const 1) (Const (-30))))) (Binop Plus (Binop Times (Binop Times (Var "z") (Var "x")) (Const (-12))) (Uminus (Var "z"))))))),Assign "b" (Const 2),If (Const 0) (Assign "a" (Binop Times (Const 0) (Var "a"))) (If (Uminus (Var "a")) (Assign "x" (Var "y")) (Seq [Assign "z" (Const 1)]))]
 was printed as
*******************
{ while ( 0 || b ) == a do y = -30 ; if - ( 0 + 0 ) then a = x else y = 1 ; x = z ; y = b - b ; if y == 0 then a = - ( 1 ) else if z - x == b then b = y else { b = y } ; y = a ; while a < x && a do z = 0 || 0 ; y = - ( 1 + ( 1 / a + y / 1 * 0 ) ) ; x = 0 + 1 || 0 ; a = -9 ; while b do if a then a = - ( -23 ) else z = 0 ; a = y ; z = 0 ; if x then a = -22 else y = a - - b ; if x then a = 1 else while - ( 0 ) do y = ( b < ( a == -10 < - ( 1 ) ) ) * ( 0 == 0 ) / - ( 0 ) ; x = b ; if - ( -26 ) then y = 0 else y = b ; a = x == y ; y = z ; a = - ( - x ) ; if - y then z = 7 else while b do a = ( - ( b + x * 1 ) - ( - ( a && a ) < 19 ) ) * ( z / ( ( z < a ) / ( 1 || -30 ) ) || z * x * -12 + - z ) ; b = 2 ; if 0 then a = 0 * a else if - a then x = y else { z = 1 } }

*******************
but expected
*******************
{
  while ( 0 || b ) == a do
    y = -30 ;
  if - ( 0 + 0 ) then
    a = x
  else
    y = 1 ;
  x = z ;
  y = b - b ;
  if y == 0 then
    a = - ( 1 )
  else if z - x == b then
    b = y
  else {
    b = y
  } ;
  y = a ;
  while a < x && a do
    z = 0 || 0 ;
  y = - ( 1 + ( 1 / a + y / 1 * 0 ) ) ;
  x = 0 + 1 || 0 ;
  a = -9 ;
  while b do
    if a then
      a = - ( -23 )
    else
      z = 0 ;
  a = y ;
  z = 0 ;
  if x then
    a = -22
  else
    y = a - - b ;
  if x then
    a = 1
  else
    while - ( 0 ) do
      y = ( b < ( a == -10 < - ( 1 ) ) ) * ( 0 == 0 ) / - ( 0 ) ;
  x = b ;
  if - ( -26 ) then
    y = 0
  else
    y = b ;
  a = x == y ;
  y = z ;
  a = - ( - x ) ;
  if - y then
    z = 7
  else
    while b do
      a = ( - ( b + x * 1 ) - ( - ( a && a ) < 19 ) ) * ( z / ( ( z < a ) / ( 1 || -30 ) ) || z * x * -12 + - z ) ;
  b = 2 ;
  if 0 then
    a = 0 * a
  else if - a then
    x = y
  else {
    z = 1
  }
}

*******************

AST
If (Const 0) (While (Var "y") (Seq [Assign "z" (Uminus (Var "y")),Assign "z" (Binop LessEq (Binop Div (Binop And (Binop Minus (Var "y") (Const 5)) (Var "b")) (Var "b")) (Var "a"))])) (Assign "x" (Var "x"))
 was printed as
*******************
if 0 then while y do { z = - y ; z = ( y -5 && b ) / b <= a } else x = x

*******************
but expected
*******************
if 0 then
  while y do {
    z = - y ;
    z = ( y -5 && b ) / b <= a
  }
else
  x = x

*******************

AST
Seq [Assign "a" (Var "b"),Assign "z" (Var "a"),If (Var "b") (Assign "z" (Binop Plus (Const 0) (Var "b"))) (Seq []),While (Const (-10)) (Seq [Assign "y" (Const (-9)),Assign "y" (Binop Times (Const 0) (Binop Less (Var "a") (Const 1)))])]
 was printed as
*******************
{ a = b ; z = a ; if b then z = 0 + b else { } ; while -10 do { y = -9 ; y = 0 * ( a < 1 ) } }

*******************
but expected
*******************
{
  a = b ;
  z = a ;
  if b then
    z = 0 + b
  else { } ;
  while -10 do {
    y = -9 ;
    y = 0 * ( a < 1 )
  }
}

*******************

AST
Seq [If (Var "b") (Assign "a" (Const 0)) (While (Const 1) (Assign "x" (Const 1))),If (Binop Equal (Var "a") (Var "x")) (Assign "z" (Var "z")) (Assign "y" (Uminus (Binop Plus (Binop Plus (Uminus (Uminus (Var "b"))) (Binop Or (Var "b") (Binop Equal (Var "y") (Const 1)))) (Binop LessEq (Const 30) (Var "x"))))),Assign "z" (Var "x"),Assign "z" (Binop LessEq (Var "z") (Const 6)),Assign "z" (Const 13),Assign "y" (Const (-2)),Assign "y" (Var "a"),Assign "a" (Binop Less (Const 11) (Var "b")),Assign "z" (Const 1),Assign "y" (Var "a"),If (Uminus (Binop Or (Var "y") (Var "x"))) (Assign "b" (Var "a")) (Assign "z" (Binop Minus (Const 0) (Const (-13)))),Assign "x" (Uminus (Binop Minus (Var "a") (Const 0))),Assign "a" (Const 0),Assign "z" (Const (-16)),Assign "a" (Var "y"),If (Binop Minus (Const 0) (Var "z")) (Seq []) (Assign "x" (Binop Times (Var "z") (Const (-20)))),While (Var "z") (Assign "x" (Binop And (Const 0) (Var "x"))),If (Binop Minus (Var "z") (Var "x")) (While (Binop Times (Var "y") (Uminus (Var "y"))) (Assign "z" (Const (-13)))) (Seq []),Assign "x" (Var "x"),While (Const 0) (If (Binop Div (Var "b") (Var "b")) (Assign "z" (Binop Or (Uminus (Var "a")) (Uminus (Uminus (Binop Minus (Binop And (Const 1) (Var "y")) (Binop Minus (Var "b") (Var "z"))))))) (Seq [])),Assign "y" (Binop LessEq (Binop Times (Const 0) (Const 0)) (Const 0)),Assign "b" (Binop LessEq (Const 0) (Binop And (Uminus (Const 24)) (Var "b"))),If (Binop Less (Binop Or (Binop Plus (Const 0) (Const 1)) (Var "a")) (Const 6)) (Assign "y" (Binop Equal (Uminus (Binop And (Var "b") (Var "z"))) (Binop Equal (Var "z") (Uminus (Binop Plus (Var "a") (Var "b")))))) (Assign "b" (Uminus (Binop Minus (Var "b") (Const 17)))),Assign "z" (Var "y"),While (Const 1) (If (Binop Or (Binop Or (Const 1) (Const 11)) (Binop Equal (Var "b") (Var "a"))) (Assign "b" (Var "z")) (Seq []))]
 was printed as
*******************
{ if b then a = 0 else while 1 do x = 1 ; if a == x then z = z else y = - ( - ( - b ) + ( b || y == 1 ) + ( 30 <= x ) ) ; z = x ; z = z <= 6 ; z = 13 ; y = -2 ; y = a ; a = 11 < b ; z = 1 ; y = a ; if - ( y || x ) then b = a else z = 0 - -13 ; x = - ( a -0 ) ; a = 0 ; z = -16 ; a = y ; if 0 - z then { } else x = z * -20 ; while z do x = 0 && x ; if z - x then while y * - y do z = -13 else { } ; x = x ; while 0 do if b / b then z = - a || - ( - ( ( 1 && y ) - ( b - z ) ) ) else { } ; y = 0 * 0 <= 0 ; b = 0 <= ( - ( 24 ) && b ) ; if ( 0 + 1 || a ) < 6 then y = - ( b && z ) == ( z == - ( a + b ) ) else b = - ( b -17 ) ; z = y ; while 1 do if 1 || 11 || b == a then b = z else { } }

*******************
but expected
*******************
{
  if b then
    a = 0
  else
    while 1 do
      x = 1 ;
  if a == x then
    z = z
  else
    y = - ( - ( - b ) + ( b || y == 1 ) + ( 30 <= x ) ) ;
  z = x ;
  z = z <= 6 ;
  z = 13 ;
  y = -2 ;
  y = a ;
  a = 11 < b ;
  z = 1 ;
  y = a ;
  if - ( y || x ) then
    b = a
  else
    z = 0 - -13 ;
  x = - ( a -0 ) ;
  a = 0 ;
  z = -16 ;
  a = y ;
  if 0 - z then { } else
    x = z * -20 ;
  while z do
    x = 0 && x ;
  if z - x then
    while y * - y do
      z = -13
  else { } ;
  x = x ;
  while 0 do
    if b / b then
      z = - a || - ( - ( ( 1 && y ) - ( b - z ) ) )
    else { } ;
  y = 0 * 0 <= 0 ;
  b = 0 <= ( - ( 24 ) && b ) ;
  if ( 0 + 1 || a ) < 6 then
    y = - ( b && z ) == ( z == - ( a + b ) )
  else
    b = - ( b -17 ) ;
  z = y ;
  while 1 do
    if 1 || 11 || b == a then
      b = z
    else { }
}

*******************

AST
While (Uminus (Binop Less (Var "y") (Var "b"))) (If (Uminus (Const (-2))) (Seq [While (Uminus (Const 0)) (If (Const 1) (Seq []) (Seq [])),While (Var "z") (Seq [])]) (Seq [Assign "a" (Uminus (Const 0))]))
 was printed as
*******************
while - ( y < b ) do if - ( -2 ) then { while - ( 0 ) do if 1 then { } else { } ; while z do { } } else { a = - ( 0 ) }

*******************
but expected
*******************
while - ( y < b ) do
  if - ( -2 ) then {
    while - ( 0 ) do
      if 1 then { } else { } ;
    while z do { }
  } else {
    a = - ( 0 )
  }

*******************

AST
If (Var "z") (If (Const 1) (If (Const 1) (Seq [If (Const 1) (Seq []) (Seq [])]) (Seq [Assign "z" (Var "b")])) (Seq [])) (Seq [Assign "b" (Binop Div (Const 1) (Const 19)),Assign "b" (Var "b"),If (Uminus (Binop LessEq (Binop And (Binop Minus (Const 4) (Var "y")) (Binop Times (Var "a") (Binop Times (Const 0) (Var "a")))) (Const 18))) (Assign "z" (Const 1)) (If (Const 1) (If (Binop Times (Const 0) (Binop Less (Const 0) (Binop And (Var "a") (Var "x")))) (Seq []) (Seq [])) (Seq []))])
 was printed as
*******************
if z then if 1 then if 1 then { if 1 then { } else { } } else { z = b } else { } else { b = 1 / 19 ; b = b ; if - ( ( 4 - y && a * ( 0 * a ) ) <= 18 ) then z = 1 else if 1 then if 0 * ( 0 < ( a && x ) ) then { } else { } else { } }

*******************
but expected
*******************
if z then
  if 1 then
    if 1 then {
      if 1 then { } else { }
    } else {
      z = b
    }
  else { }
else {
  b = 1 / 19 ;
  b = b ;
  if - ( ( 4 - y && a * ( 0 * a ) ) <= 18 ) then
    z = 1
  else if 1 then
    if 0 * ( 0 < ( a && x ) ) then { } else { }
  else { }
}

*******************

AST
If (Binop LessEq (Const 0) (Const 1)) (While (Binop Div (Const 0) (Binop Div (Var "z") (Uminus (Binop Minus (Var "z") (Binop Less (Var "x") (Const 1)))))) (Assign "z" (Var "a"))) (Assign "z" (Var "b"))
 was printed as
*******************
if 0 <= 1 then while 0 / ( z / - ( z - ( x < 1 ) ) ) do z = a else z = b

*******************
but expected
*******************
if 0 <= 1 then
  while 0 / ( z / - ( z - ( x < 1 ) ) ) do
    z = a
else
  z = b

*******************

AST
While (Var "a") (Seq [Assign "x" (Uminus (Binop And (Const 0) (Var "b")))])
 was printed as
*******************
while a do { x = - ( 0 && b ) }

*******************
but expected
*******************
while a do {
  x = - ( 0 && b )
}

*******************

AST
If (Binop Less (Const 9) (Uminus (Var "y"))) (If (Const 12) (Assign "b" (Const 26)) (Assign "y" (Binop Div (Binop And (Var "a") (Binop Minus (Binop LessEq (Var "x") (Const 1)) (Var "y"))) (Const 0)))) (Seq [Assign "x" (Var "y"),Assign "a" (Var "z"),Assign "a" (Const 0)])
 was printed as
*******************
if 9 < - y then if 12 then b = 26 else y = ( a && ( x <= 1 ) - y ) / 0 else { x = y ; a = z ; a = 0 }

*******************
but expected
*******************
if 9 < - y then
  if 12 then
    b = 26
  else
    y = ( a && ( x <= 1 ) - y ) / 0
else {
  x = y ;
  a = z ;
  a = 0
}

*******************

AST
Seq [If (Var "y") (If (Const 13) (Seq []) (If (Binop Equal (Var "y") (Binop Times (Var "a") (Const 1))) (Seq []) (Seq []))) (Seq []),Assign "a" (Const 0),Assign "y" (Binop Times (Const (-7)) (Uminus (Const 1))),Assign "x" (Uminus (Var "a")),Assign "y" (Var "y"),Assign "a" (Const (-8)),Assign "y" (Var "z"),Assign "y" (Const 1),Assign "z" (Uminus (Const 13)),While (Binop Or (Var "b") (Binop Or (Binop Plus (Binop Equal (Var "z") (Var "y")) (Var "y")) (Const 1))) (Seq []),If (Var "b") (Assign "a" (Binop Less (Const 8) (Const (-4)))) (If (Var "b") (Seq []) (Seq [])),Assign "a" (Var "b"),Assign "b" (Const 1),Assign "x" (Const 1),Assign "b" (Var "b"),While (Var "y") (If (Binop Plus (Var "z") (Var "b")) (While (Binop Minus (Uminus (Const (-3))) (Binop Equal (Const 0) (Const 1))) (Seq [])) (If (Binop And (Const 0) (Var "z")) (Assign "z" (Var "a")) (If (Binop Or (Const 19) (Const 0)) (Seq []) (Seq [])))),Assign "y" (Const (-1)),If (Const 21) (Seq [Assign "z" (Binop Equal (Const 1) (Const 1))]) (Assign "a" (Var "x")),Assign "y" (Const 1),Assign "z" (Var "a"),Assign "z" (Const 0),Assign "y" (Const 0),Assign "a" (Const 1),Assign "b" (Binop Plus (Var "x") (Uminus (Uminus (Const 1)))),If (Binop And (Binop Div (Const 0) (Binop Equal (Binop Less (Var "a") (Var "z")) (Const 1))) (Binop Plus (Binop Equal (Binop Or (Binop Or (Var "z") (Var "y")) (Var "b")) (Binop And (Binop Equal (Const 0) (Var "y")) (Var "a"))) (Var "x"))) (If (Binop Div (Uminus (Uminus (Binop Times (Var "x") (Var "b")))) (Var "z")) (Seq []) (Seq [])) (Seq []),While (Binop LessEq (Uminus (Binop Plus (Var "y") (Uminus (Const 1)))) (Uminus (Var "y"))) (Seq []),Assign "a" (Const (-26)),While (Const 0) (If (Var "x") (Assign "x" (Var "x")) (If (Const 0) (Seq []) (Seq []))),While (Const 0) (While (Uminus (Binop Equal (Var "z") (Uminus (Const 0)))) (Assign "x" (Var "z"))),Assign "y" (Binop LessEq (Const 0) (Var "z")),While (Binop Times (Var "b") (Const (-30))) (Assign "x" (Var "x")),Assign "z" (Uminus (Var "a")),If (Const 0) (Seq []) (Seq [])]
 was printed as
*******************
{ if y then if 13 then { } else if y == a * 1 then { } else { } else { } ; a = 0 ; y = -7 * - ( 1 ) ; x = - a ; y = y ; a = -8 ; y = z ; y = 1 ; z = - ( 13 ) ; while b || ( ( z == y ) + y || 1 ) do { } ; if b then a = 8 < -4 else if b then { } else { } ; a = b ; b = 1 ; x = 1 ; b = b ; while y do if z + b then while - ( -3 ) - ( 0 == 1 ) do { } else if 0 && z then z = a else if 19 || 0 then { } else { } ; y = -1 ; if 21 then { z = 1 == 1 } else a = x ; y = 1 ; z = a ; z = 0 ; y = 0 ; a = 1 ; b = x + - ( - ( 1 ) ) ; if 0 / ( a < z == 1 ) && ( ( z || y || b ) == ( 0 == y && a ) ) + x then if - ( - ( x * b ) ) / z then { } else { } else { } ; while - ( y + - ( 1 ) ) <= - y do { } ; a = -26 ; while 0 do if x then x = x else if 0 then { } else { } ; while 0 do while - ( z == - ( 0 ) ) do x = z ; y = 0 <= z ; while b * -30 do x = x ; z = - a ; if 0 then { } else { } }

*******************
but expected
*******************
{
  if y then
    if 13 then { } else if y == a * 1 then { } else { }
  else { } ;
  a = 0 ;
  y = -7 * - ( 1 ) ;
  x = - a ;
  y = y ;
  a = -8 ;
  y = z ;
  y = 1 ;
  z = - ( 13 ) ;
  while b || ( ( z == y ) + y || 1 ) do { } ;
  if b then
    a = 8 < -4
  else if b then { } else { } ;
  a = b ;
  b = 1 ;
  x = 1 ;
  b = b ;
  while y do
    if z + b then
      while - ( -3 ) - ( 0 == 1 ) do { }
    else if 0 && z then
      z = a
    else if 19 || 0 then { } else { } ;
  y = -1 ;
  if 21 then {
    z = 1 == 1
  } else
    a = x ;
  y = 1 ;
  z = a ;
  z = 0 ;
  y = 0 ;
  a = 1 ;
  b = x + - ( - ( 1 ) ) ;
  if 0 / ( a < z == 1 ) && ( ( z || y || b ) == ( 0 == y && a ) ) + x then
    if - ( - ( x * b ) ) / z then { } else { }
  else { } ;
  while - ( y + - ( 1 ) ) <= - y do { } ;
  a = -26 ;
  while 0 do
    if x then
      x = x
    else if 0 then { } else { } ;
  while 0 do
    while - ( z == - ( 0 ) ) do
      x = z ;
  y = 0 <= z ;
  while b * -30 do
    x = x ;
  z = - a ;
  if 0 then { } else { }
}

*******************

AST
If (Binop Div (Var "b") (Binop And (Uminus (Const 0)) (Const (-5)))) (Assign "b" (Uminus (Binop Div (Const (-2)) (Uminus (Var "b"))))) (Assign "y" (Var "y"))
 was printed as
*******************
if b / ( - ( 0 ) && -5 ) then b = - ( -2 / - b ) else y = y

*******************
but expected
*******************
if b / ( - ( 0 ) && -5 ) then
  b = - ( -2 / - b )
else
  y = y

*******************

AST
If (Binop Less (Var "a") (Const 0)) (Seq [While (Uminus (Const 0)) (Assign "y" (Var "a")),If (Uminus (Binop LessEq (Binop Plus (Var "b") (Const 7)) (Binop Equal (Binop Times (Var "y") (Var "y")) (Uminus (Uminus (Var "b")))))) (Seq []) (Assign "x" (Var "y")),Assign "x" (Const 0),Assign "x" (Const (-26)),Assign "a" (Binop Minus (Const 24) (Uminus (Var "z"))),Assign "b" (Const (-7))]) (Assign "y" (Var "x"))
 was printed as
*******************
if a < 0 then { while - ( 0 ) do y = a ; if - ( b + 7 <= ( y * y == - ( - b ) ) ) then { } else x = y ; x = 0 ; x = -26 ; a = 24 - - z ; b = -7 } else y = x

*******************
but expected
*******************
if a < 0 then {
  while - ( 0 ) do
    y = a ;
  if - ( b + 7 <= ( y * y == - ( - b ) ) ) then { } else
    x = y ;
  x = 0 ;
  x = -26 ;
  a = 24 - - z ;
  b = -7
} else
  y = x

*******************

AST
If (Const 1) (Assign "y" (Const (-22))) (Seq [If (Const 0) (Seq [Assign "x" (Binop Minus (Binop Times (Const 0) (Uminus (Binop Less (Const 29) (Uminus (Var "z"))))) (Var "b"))]) (Assign "z" (Uminus (Var "z"))),Assign "x" (Const 1),Assign "a" (Binop Div (Var "a") (Const 1)),Assign "x" (Binop Minus (Var "z") (Var "z")),Assign "y" (Binop Less (Const 1) (Uminus (Var "x"))),While (Binop Less (Var "z") (Const 0)) (Assign "z" (Var "x")),While (Const 1) (Assign "a" (Binop And (Var "y") (Var "a")))])
 was printed as
*******************
if 1 then y = -22 else { if 0 then { x = 0 * - ( 29 < - z ) - b } else z = - z ; x = 1 ; a = a / 1 ; x = z - z ; y = 1 < - x ; while z < 0 do z = x ; while 1 do a = y && a }

*******************
but expected
*******************
if 1 then
  y = -22
else {
  if 0 then {
    x = 0 * - ( 29 < - z ) - b
  } else
    z = - z ;
  x = 1 ;
  a = a / 1 ;
  x = z - z ;
  y = 1 < - x ;
  while z < 0 do
    z = x ;
  while 1 do
    a = y && a
}

*******************

AST
While (Const 1) (Assign "z" (Var "y"))
 was printed as
*******************
while 1 do z = y

*******************
but expected
*******************
while 1 do
  z = y

*******************

AST
Seq [If (Binop LessEq (Const 22) (Var "z")) (Seq []) (Seq [If (Var "z") (Seq []) (Seq [])]),Assign "b" (Uminus (Binop LessEq (Binop Or (Const (-25)) (Const 1)) (Var "x"))),If (Const 0) (Assign "x" (Var "z")) (Seq [Assign "z" (Var "a")]),If (Binop Or (Uminus (Const 1)) (Const 1)) (Assign "b" (Const 1)) (Assign "y" (Binop Div (Const 0) (Var "x"))),If (Var "z") (Assign "b" (Var "x")) (Assign "a" (Const 1)),Assign "x" (Var "z")]
 was printed as
*******************
{ if 22 <= z then { } else { if z then { } else { } } ; b = - ( ( -25 || 1 ) <= x ) ; if 0 then x = z else { z = a } ; if - ( 1 ) || 1 then b = 1 else y = 0 / x ; if z then b = x else a = 1 ; x = z }

*******************
but expected
*******************
{
  if 22 <= z then { } else {
    if z then { } else { }
  } ;
  b = - ( ( -25 || 1 ) <= x ) ;
  if 0 then
    x = z
  else {
    z = a
  } ;
  if - ( 1 ) || 1 then
    b = 1
  else
    y = 0 / x ;
  if z then
    b = x
  else
    a = 1 ;
  x = z
}

*******************

AST
If (Const 1) (Assign "z" (Const 0)) (If (Const 1) (Assign "b" (Binop Or (Var "x") (Binop Equal (Binop Equal (Uminus (Var "a")) (Const (-30))) (Var "a")))) (Assign "z" (Uminus (Binop And (Const 1) (Const 0)))))
 was printed as
*******************
if 1 then z = 0 else if 1 then b = x || - a == -30 == a else z = - ( 1 && 0 )

*******************
but expected
*******************
if 1 then
  z = 0
else if 1 then
  b = x || - a == -30 == a
else
  z = - ( 1 && 0 )

*******************

AST
While (Const 0) (Assign "x" (Uminus (Const 0)))
 was printed as
*******************
while 0 do x = - ( 0 )

*******************
but expected
*******************
while 0 do
  x = - ( 0 )

*******************

AST
If (Binop Less (Binop Div (Binop Equal (Var "a") (Const 1)) (Var "y")) (Var "a")) (Seq []) (Seq [While (Const (-11)) (Assign "x" (Const 6)),Assign "z" (Var "x"),If (Const 0) (Assign "z" (Var "y")) (Assign "a" (Binop Minus (Binop Times (Binop Or (Const 0) (Var "a")) (Const 0)) (Binop Times (Uminus (Binop Div (Uminus (Const (-13))) (Var "y"))) (Uminus (Var "b")))))])
 was printed as
*******************
if ( a == 1 ) / y < a then { } else { while -11 do x = 6 ; z = x ; if 0 then z = y else a = ( 0 || a ) * 0 - - ( - ( -13 ) / y ) * - b }

*******************
but expected
*******************
if ( a == 1 ) / y < a then { } else {
  while -11 do
    x = 6 ;
  z = x ;
  if 0 then
    z = y
  else
    a = ( 0 || a ) * 0 - - ( - ( -13 ) / y ) * - b
}

*******************

AST
If (Binop Times (Var "x") (Const 1)) (Assign "x" (Var "z")) (Assign "x" (Var "b"))
 was printed as
*******************
if x * 1 then x = z else x = b

*******************
but expected
*******************
if x * 1 then
  x = z
else
  x = b

*******************

AST
Seq [Assign "b" (Uminus (Var "b")),If (Var "z") (While (Binop Or (Binop Equal (Var "y") (Const 0)) (Var "y")) (Assign "a" (Binop Or (Binop Or (Var "a") (Var "b")) (Const 0)))) (Seq []),Assign "a" (Const 1),If (Var "x") (Seq []) (Seq []),Assign "b" (Const (-26)),Assign "x" (Var "a"),While (Binop Plus (Var "b") (Binop LessEq (Binop LessEq (Binop Plus (Const 0) (Const 1)) (Binop Or (Var "z") (Binop Minus (Var "b") (Const 0)))) (Const (-7)))) (Assign "b" (Binop Plus (Var "y") (Var "z"))),Assign "a" (Binop Or (Const 1) (Var "x")),Assign "x" (Const 1),If (Const 1) (Assign "b" (Var "x")) (While (Const (-18)) (Seq [])),Assign "a" (Var "a"),If (Var "a") (Assign "b" (Var "b")) (Seq []),If (Var "a") (If (Var "y") (Seq []) (Seq [])) (Seq []),Assign "a" (Uminus (Binop LessEq (Const 1) (Binop LessEq (Uminus (Binop Or (Const 0) (Var "x"))) (Uminus (Binop Times (Var "x") (Const 1)))))),While (Var "y") (Assign "x" (Var "a"))]
 was printed as
*******************
{ b = - b ; if z then while y == 0 || y do a = a || b || 0 else { } ; a = 1 ; if x then { } else { } ; b = -26 ; x = a ; while b + ( 0 + 1 <= ( z || b -0 ) <= -7 ) do b = y + z ; a = 1 || x ; x = 1 ; if 1 then b = x else while -18 do { } ; a = a ; if a then b = b else { } ; if a then if y then { } else { } else { } ; a = - ( 1 <= ( - ( 0 || x ) <= - ( x * 1 ) ) ) ; while y do x = a }

*******************
but expected
*******************
{
  b = - b ;
  if z then
    while y == 0 || y do
      a = a || b || 0
  else { } ;
  a = 1 ;
  if x then { } else { } ;
  b = -26 ;
  x = a ;
  while b + ( 0 + 1 <= ( z || b -0 ) <= -7 ) do
    b = y + z ;
  a = 1 || x ;
  x = 1 ;
  if 1 then
    b = x
  else
    while -18 do { } ;
  a = a ;
  if a then
    b = b
  else { } ;
  if a then
    if y then { } else { }
  else { } ;
  a = - ( 1 <= ( - ( 0 || x ) <= - ( x * 1 ) ) ) ;
  while y do
    x = a
}

*******************

AST
If (Const (-13)) (Assign "y" (Const 1)) (Seq [])
 was printed as
*******************
if -13 then y = 1 else { }

*******************
but expected
*******************
if -13 then
  y = 1
else { }

*******************

AST
While (Binop Less (Binop Times (Var "a") (Uminus (Uminus (Uminus (Var "x"))))) (Binop Or (Binop Plus (Binop Plus (Binop Minus (Var "b") (Var "x")) (Binop Minus (Var "x") (Const 0))) (Binop Plus (Binop LessEq (Const 1) (Const 0)) (Binop Plus (Const 0) (Const 1)))) (Const 1))) (Assign "y" (Var "b"))
 was printed as
*******************
while a * - ( - ( - x ) ) < ( b - x + ( x -0 ) + ( ( 1 <= 0 ) + ( 0 + 1 ) ) || 1 ) do y = b

*******************
but expected
*******************
while a * - ( - ( - x ) ) < ( b - x + ( x -0 ) + ( ( 1 <= 0 ) + ( 0 + 1 ) ) || 1 ) do
  y = b

*******************

AST
Seq [Assign "y" (Var "y"),Assign "b" (Binop Less (Var "a") (Binop Minus (Binop Div (Binop And (Binop Less (Const 1) (Var "y")) (Const 1)) (Var "y")) (Const 0))),Assign "a" (Binop Div (Uminus (Const 1)) (Const 1)),Assign "y" (Const 1),Assign "z" (Binop Div (Binop And (Var "b") (Binop Plus (Binop Equal (Var "a") (Binop Or (Const 1) (Var "b"))) (Const (-27)))) (Var "y")),Assign "x" (Var "a"),While (Const 16) (Seq []),If (Binop Less (Binop Or (Var "b") (Var "x")) (Uminus (Binop Plus (Var "a") (Const (-2))))) (Assign "a" (Var "z")) (Assign "a" (Binop LessEq (Var "y") (Var "y"))),While (Uminus (Uminus (Binop Minus (Const 0) (Const 20)))) (Assign "x" (Binop Less (Binop Less (Var "a") (Uminus (Uminus (Const 1)))) (Var "x"))),Assign "b" (Var "a"),Assign "z" (Const (-27)),Assign "z" (Const 0),While (Binop Plus (Uminus (Binop And (Const 0) (Var "x"))) (Binop Times (Uminus (Binop Plus (Const 0) (Uminus (Var "x")))) (Binop Div (Binop And (Binop Less (Var "y") (Var "x")) (Binop Less (Var "x") (Const 0))) (Const 0)))) (Seq []),Assign "a" (Const 1),Assign "b" (Const 7),If (Uminus (Binop Div (Const 0) (Binop Less (Const 0) (Const 0)))) (Assign "a" (Uminus (Const 1))) (Assign "z" (Var "y")),If (Const 1) (If (Binop Less (Binop Minus (Var "x") (Binop And (Binop Plus (Binop Less (Const (-18)) (Const 0)) (Binop Div (Const 0) (Const 0))) (Const 1))) (Var "b")) (Assign "z" (Uminus (Const (-11)))) (Seq [])) (If (Binop LessEq (Binop Less (Const 0) (Const (-1))) (Uminus (Var "z"))) (Seq []) (While (Const (-23)) (Seq []))),Assign "a" (Var "b"),If (Binop Minus (Binop LessEq (Binop Div (Uminus (Var "x")) (Var "a")) (Binop Minus (Binop Equal (Var "z") (Var "y")) (Var "a"))) (Binop Less (Binop Or (Var "a") (Binop Or (Const 0) (Var "a"))) (Var "b"))) (Assign "y" (Binop Less (Binop Times (Const 1) (Binop Less (Binop Or (Const 1) (Binop Minus (Var "b") (Var "a"))) (Var "y"))) (Const 1))) (If (Const (-12)) (While (Binop Equal (Const 1) (Binop Plus (Uminus (Uminus (Uminus (Var "y")))) (Const 1))) (Seq [])) (Seq [Assign "b" (Var "x")])),If (Uminus (Var "y")) (If (Binop Minus (Var "x") (Const (-1))) (Seq []) (Seq [])) (Assign "b" (Var "y"))]
 was printed as
*******************
{ y = y ; b = a < ( 1 < y && 1 ) / y -0 ; a = - ( 1 ) / 1 ; y = 1 ; z = ( b && ( a == ( 1 || b ) ) + -27 ) / y ; x = a ; while 16 do { } ; if ( b || x ) < - ( a + -2 ) then a = z else a = y <= y ; while - ( - ( 0 -20 ) ) do x = a < - ( - ( 1 ) ) < x ; b = a ; z = -27 ; z = 0 ; while - ( 0 && x ) + - ( 0 + - x ) * ( ( y < x && x < 0 ) / 0 ) do { } ; a = 1 ; b = 7 ; if - ( 0 / ( 0 < 0 ) ) then a = - ( 1 ) else z = y ; if 1 then if x - ( ( -18 < 0 ) + 0 / 0 && 1 ) < b then z = - ( -11 ) else { } else if 0 < -1 <= - z then { } else while -23 do { } ; a = b ; if ( - x / a <= ( z == y ) - a ) - ( ( a || ( 0 || a ) ) < b ) then y = 1 * ( ( 1 || b - a ) < y ) < 1 else if -12 then while 1 == - ( - ( - y ) ) + 1 do { } else { b = x } ; if - y then if x - -1 then { } else { } else b = y }

*******************
but expected
*******************
{
  y = y ;
  b = a < ( 1 < y && 1 ) / y -0 ;
  a = - ( 1 ) / 1 ;
  y = 1 ;
  z = ( b && ( a == ( 1 || b ) ) + -27 ) / y ;
  x = a ;
  while 16 do { } ;
  if ( b || x ) < - ( a + -2 ) then
    a = z
  else
    a = y <= y ;
  while - ( - ( 0 -20 ) ) do
    x = a < - ( - ( 1 ) ) < x ;
  b = a ;
  z = -27 ;
  z = 0 ;
  while - ( 0 && x ) + - ( 0 + - x ) * ( ( y < x && x < 0 ) / 0 ) do { } ;
  a = 1 ;
  b = 7 ;
  if - ( 0 / ( 0 < 0 ) ) then
    a = - ( 1 )
  else
    z = y ;
  if 1 then
    if x - ( ( -18 < 0 ) + 0 / 0 && 1 ) < b then
      z = - ( -11 )
    else { }
  else if 0 < -1 <= - z then { } else
    while -23 do { } ;
  a = b ;
  if ( - x / a <= ( z == y ) - a ) - ( ( a || ( 0 || a ) ) < b ) then
    y = 1 * ( ( 1 || b - a ) < y ) < 1
  else if -12 then
    while 1 == - ( - ( - y ) ) + 1 do { }
  else {
    b = x
  } ;
  if - y then
    if x - -1 then { } else { }
  else
    b = y
}

*******************

AST
If (Binop Minus (Const 0) (Binop Div (Const 0) (Uminus (Const 1)))) (Seq [If (Const 20) (Assign "b" (Uminus (Const 0))) (Assign "x" (Var "a")),Assign "z" (Binop Div (Const 6) (Uminus (Binop Div (Uminus (Const 1)) (Var "a")))),Assign "a" (Binop Minus (Binop Or (Const 1) (Binop Or (Var "z") (Binop And (Var "a") (Const (-21))))) (Var "a")),If (Var "x") (Assign "y" (Uminus (Binop Equal (Binop Or (Var "x") (Binop Less (Binop And (Const 0) (Const 0)) (Binop And (Var "y") (Var "a")))) (Const 1)))) (Assign "x" (Const 1)),Assign "a" (Uminus (Var "y")),Assign "b" (Var "y"),Assign "x" (Const 1)]) (Seq [Assign "b" (Binop Plus (Const 1) (Uminus (Binop Div (Binop Or (Const 0) (Const (-16))) (Binop Plus (Uminus (Const 4)) (Uminus (Const 0)))))),If (Const 1) (Seq []) (Seq []),Assign "z" (Binop Plus (Var "a") (Uminus (Const 0))),While (Const 1) (Assign "a" (Var "z")),Assign "b" (Var "y"),If (Binop Equal (Const (-25)) (Uminus (Binop And (Var "y") (Var "a")))) (Assign "x" (Var "b")) (Assign "a" (Const 0)),Assign "y" (Binop Times (Var "y") (Var "a"))])
 was printed as
*******************
if 0 -0 / - ( 1 ) then { if 20 then b = - ( 0 ) else x = a ; z = 6 / - ( - ( 1 ) / a ) ; a = ( 1 || ( z || a && -21 ) ) - a ; if x then y = - ( ( x || ( 0 && 0 ) < ( y && a ) ) == 1 ) else x = 1 ; a = - y ; b = y ; x = 1 } else { b = 1 + - ( ( 0 || -16 ) / ( - ( 4 ) + - ( 0 ) ) ) ; if 1 then { } else { } ; z = a + - ( 0 ) ; while 1 do a = z ; b = y ; if -25 == - ( y && a ) then x = b else a = 0 ; y = y * a }

*******************
but expected
*******************
if 0 -0 / - ( 1 ) then {
  if 20 then
    b = - ( 0 )
  else
    x = a ;
  z = 6 / - ( - ( 1 ) / a ) ;
  a = ( 1 || ( z || a && -21 ) ) - a ;
  if x then
    y = - ( ( x || ( 0 && 0 ) < ( y && a ) ) == 1 )
  else
    x = 1 ;
  a = - y ;
  b = y ;
  x = 1
} else {
  b = 1 + - ( ( 0 || -16 ) / ( - ( 4 ) + - ( 0 ) ) ) ;
  if 1 then { } else { } ;
  z = a + - ( 0 ) ;
  while 1 do
    a = z ;
  b = y ;
  if -25 == - ( y && a ) then
    x = b
  else
    a = 0 ;
  y = y * a
}

*******************

AST
If (Var "y") (Seq [Assign "y" (Const (-19)),Assign "x" (Const 0),If (Const (-4)) (Assign "y" (Binop Div (Binop Times (Binop Or (Binop Equal (Const (-29)) (Var "z")) (Binop Less (Const 1) (Uminus (Var "b")))) (Binop Minus (Uminus (Var "b")) (Binop Less (Binop Minus (Const 0) (Const 30)) (Const 9)))) (Uminus (Const 0)))) (If (Const 0) (Assign "z" (Uminus (Uminus (Binop Equal (Var "b") (Const (-11)))))) (Seq []))]) (Seq [While (Binop Div (Var "z") (Binop Minus (Const 1) (Const 1))) (Seq []),Assign "a" (Binop Equal (Var "z") (Binop Div (Const 1) (Binop Plus (Binop And (Const 1) (Uminus (Var "b"))) (Const 1)))),While (Const 1) (Seq []),Assign "b" (Const 0),Assign "a" (Uminus (Var "b")),Assign "z" (Var "y")])
 was printed as
*******************
if y then { y = -19 ; x = 0 ; if -4 then y = ( -29 == z || 1 < - b ) * ( - b - ( 0 -30 < 9 ) ) / - ( 0 ) else if 0 then z = - ( - ( b == -11 ) ) else { } } else { while z / ( 1 -1 ) do { } ; a = z == 1 / ( ( 1 && - b ) + 1 ) ; while 1 do { } ; b = 0 ; a = - b ; z = y }

*******************
but expected
*******************
if y then {
  y = -19 ;
  x = 0 ;
  if -4 then
    y = ( -29 == z || 1 < - b ) * ( - b - ( 0 -30 < 9 ) ) / - ( 0 )
  else if 0 then
    z = - ( - ( b == -11 ) )
  else { }
} else {
  while z / ( 1 -1 ) do { } ;
  a = z == 1 / ( ( 1 && - b ) + 1 ) ;
  while 1 do { } ;
  b = 0 ;
  a = - b ;
  z = y
}

*******************

AST
While (Var "z") (Assign "b" (Binop Div (Const (-17)) (Var "a")))
 was printed as
*******************
while z do b = -17 / a

*******************
but expected
*******************
while z do
  b = -17 / a

*******************

AST
Seq [If (Uminus (Binop And (Const 0) (Uminus (Const 0)))) (Seq [Assign "y" (Var "a")]) (Seq []),If (Const 1) (Assign "x" (Var "y")) (If (Binop Times (Const 1) (Var "y")) (Assign "y" (Binop Times (Binop Times (Binop And (Const 9) (Var "y")) (Const 1)) (Const 1))) (Assign "x" (Const 0))),Assign "a" (Binop Or (Var "b") (Var "b")),Assign "b" (Const 1),While (Var "a") (Seq []),Assign "y" (Binop Times (Var "y") (Binop Times (Var "y") (Const 1))),Assign "a" (Uminus (Binop Times (Var "y") (Var "y"))),Assign "a" (Const 1),Assign "x" (Var "a"),Assign "z" (Var "x"),If (Const 1) (Assign "b" (Const 1)) (Assign "b" (Binop Times (Binop And (Var "a") (Const 1)) (Var "x"))),Assign "x" (Var "b"),If (Binop Times (Const (-25)) (Binop Or (Uminus (Binop Minus (Var "a") (Uminus (Var "a")))) (Binop Minus (Binop Div (Var "y") (Const 1)) (Var "y")))) (Seq []) (If (Uminus (Const (-27))) (While (Binop Equal (Var "z") (Const 1)) (Seq [])) (Assign "x" (Const 3))),If (Const 0) (Seq [Assign "x" (Uminus (Var "b"))]) (Assign "z" (Const 0)),Assign "z" (Var "x"),If (Binop Div (Binop And (Const 0) (Const 1)) (Const 0)) (While (Binop Less (Const 0) (Var "a")) (While (Var "x") (Seq []))) (Seq []),Assign "a" (Binop Div (Var "a") (Binop Plus (Const 1) (Var "z"))),Assign "x" (Const (-4)),If (Binop Equal (Const 0) (Const 0)) (If (Binop Div (Var "y") (Var "a")) (Assign "a" (Var "z")) (Assign "b" (Const 0))) (Seq []),If (Const 0) (Assign "y" (Uminus (Binop Div (Const 0) (Const 1)))) (Seq [If (Var "b") (If (Const 1) (Seq []) (Seq [])) (Assign "y" (Uminus (Const 1)))])]
 was printed as
*******************
{ if - ( 0 && - ( 0 ) ) then { y = a } else { } ; if 1 then x = y else if 1 * y then y = ( 9 && y ) * 1 * 1 else x = 0 ; a = b || b ; b = 1 ; while a do { } ; y = y * ( y * 1 ) ; a = - ( y * y ) ; a = 1 ; x = a ; z = x ; if 1 then b = 1 else b = ( a && 1 ) * x ; x = b ; if -25 * ( - ( a - - a ) || y / 1 - y ) then { } else if - ( -27 ) then while z == 1 do { } else x = 3 ; if 0 then { x = - b } else z = 0 ; z = x ; if ( 0 && 1 ) / 0 then while 0 < a do while x do { } else { } ; a = a / ( 1 + z ) ; x = -4 ; if 0 == 0 then if y / a then a = z else b = 0 else { } ; if 0 then y = - ( 0 / 1 ) else { if b then if 1 then { } else { } else y = - ( 1 ) } }

*******************
but expected
*******************
{
  if - ( 0 && - ( 0 ) ) then {
    y = a
  } else { } ;
  if 1 then
    x = y
  else if 1 * y then
    y = ( 9 && y ) * 1 * 1
  else
    x = 0 ;
  a = b || b ;
  b = 1 ;
  while a do { } ;
  y = y * ( y * 1 ) ;
  a = - ( y * y ) ;
  a = 1 ;
  x = a ;
  z = x ;
  if 1 then
    b = 1
  else
    b = ( a && 1 ) * x ;
  x = b ;
  if -25 * ( - ( a - - a ) || y / 1 - y ) then { } else if - ( -27 ) then
    while z == 1 do { }
  else
    x = 3 ;
  if 0 then {
    x = - b
  } else
    z = 0 ;
  z = x ;
  if ( 0 && 1 ) / 0 then
    while 0 < a do
      while x do { }
  else { } ;
  a = a / ( 1 + z ) ;
  x = -4 ;
  if 0 == 0 then
    if y / a then
      a = z
    else
      b = 0
  else { } ;
  if 0 then
    y = - ( 0 / 1 )
  else {
    if b then
      if 1 then { } else { }
    else
      y = - ( 1 )
  }
}

*******************

AST
Seq [Assign "z" (Binop Div (Var "z") (Binop Plus (Var "a") (Const (-20)))),Assign "a" (Binop Div (Binop Div (Const 0) (Binop Minus (Const 7) (Binop Times (Const 7) (Const (-21))))) (Const 1)),Assign "y" (Binop And (Var "x") (Var "y")),Assign "b" (Const 1),Assign "a" (Binop Less (Const 0) (Var "b")),If (Const 0) (Seq [Assign "b" (Binop Plus (Binop Or (Const 0) (Binop Plus (Var "y") (Var "z"))) (Binop Div (Const 0) (Const 0)))]) (Assign "b" (Binop LessEq (Const 26) (Binop Plus (Binop Div (Binop Times (Var "z") (Const (-22))) (Var "y")) (Var "a")))),Assign "b" (Binop Times (Var "z") (Const 0)),Assign "z" (Var "b"),Assign "x" (Uminus (Var "y")),Assign "b" (Uminus (Binop Less (Var "b") (Binop Minus (Binop Times (Const 9) (Const 0)) (Const 1)))),Assign "x" (Const 0),Assign "a" (Uminus (Const 0))]
 was printed as
*******************
{ z = z / ( a + -20 ) ; a = 0 / ( 7 -7 * -21 ) / 1 ; y = x && y ; b = 1 ; a = 0 < b ; if 0 then { b = ( 0 || y + z ) + 0 / 0 } else b = 26 <= z * -22 / y + a ; b = z * 0 ; z = b ; x = - y ; b = - ( b < 9 * 0 -1 ) ; x = 0 ; a = - ( 0 ) }

*******************
but expected
*******************
{
  z = z / ( a + -20 ) ;
  a = 0 / ( 7 -7 * -21 ) / 1 ;
  y = x && y ;
  b = 1 ;
  a = 0 < b ;
  if 0 then {
    b = ( 0 || y + z ) + 0 / 0
  } else
    b = 26 <= z * -22 / y + a ;
  b = z * 0 ;
  z = b ;
  x = - y ;
  b = - ( b < 9 * 0 -1 ) ;
  x = 0 ;
  a = - ( 0 )
}

*******************

AST
Seq [If (Const 1) (While (Const 14) (If (Const 20) (Seq []) (Seq []))) (While (Const 26) (Assign "z" (Binop Div (Binop Plus (Var "b") (Var "y")) (Var "b")))),Assign "a" (Var "a"),If (Uminus (Const 0)) (If (Var "y") (If (Binop Plus (Binop Or (Binop Minus (Binop Plus (Binop Minus (Const 0) (Var "b")) (Const 0)) (Binop LessEq (Binop LessEq (Const 0) (Const 1)) (Const (-26)))) (Binop Equal (Const 0) (Var "z"))) (Binop Times (Const 0) (Const 1))) (Seq []) (Seq [])) (Assign "x" (Var "z"))) (Seq []),Assign "b" (Binop Div (Var "z") (Const 14)),If (Const 1) (If (Binop And (Const 1) (Var "y")) (Assign "y" (Var "x")) (Seq [])) (Seq [])]
 was printed as
*******************
{ if 1 then while 14 do if 20 then { } else { } else while 26 do z = ( b + y ) / b ; a = a ; if - ( 0 ) then if y then if ( 0 - b + 0 - ( 0 <= 1 <= -26 ) || 0 == z ) + 0 * 1 then { } else { } else x = z else { } ; b = z / 14 ; if 1 then if 1 && y then y = x else { } else { } }

*******************
but expected
*******************
{
  if 1 then
    while 14 do
      if 20 then { } else { }
  else
    while 26 do
      z = ( b + y ) / b ;
  a = a ;
  if - ( 0 ) then
    if y then
      if ( 0 - b + 0 - ( 0 <= 1 <= -26 ) || 0 == z ) + 0 * 1 then { } else { }
    else
      x = z
  else { } ;
  b = z / 14 ;
  if 1 then
    if 1 && y then
      y = x
    else { }
  else { }
}

*******************

AST
Seq [If (Var "z") (Seq []) (If (Binop Equal (Uminus (Const 8)) (Binop Or (Binop Equal (Var "y") (Var "x")) (Binop LessEq (Const 1) (Binop Div (Var "b") (Const 1))))) (While (Uminus (Uminus (Uminus (Const 1)))) (Assign "z" (Uminus (Uminus (Var "b"))))) (Seq [])),Assign "z" (Binop LessEq (Const (-14)) (Binop And (Var "y") (Binop LessEq (Const (-25)) (Const 0)))),Assign "y" (Const (-24)),Assign "z" (Const 1),Assign "z" (Uminus (Var "x")),Assign "x" (Binop Plus (Var "z") (Const 0)),Assign "z" (Var "a"),Assign "a" (Binop And (Binop Or (Const 0) (Binop Minus (Var "z") (Const 1))) (Var "y")),Assign "a" (Binop Times (Binop LessEq (Uminus (Binop Or (Binop Or (Var "z") (Const 1)) (Binop LessEq (Const 0) (Var "b")))) (Const 0)) (Binop Or (Binop Times (Const 0) (Binop Plus (Const 1) (Const 0))) (Binop Times (Const 0) (Const (-14))))),Assign "y" (Const 1),While (Const 0) (Seq [Assign "a" (Binop And (Var "b") (Var "z"))]),Assign "b" (Binop Plus (Const 0) (Var "y")),Assign "y" (Const 0),Assign "a" (Binop Div (Binop Div (Const 0) (Binop Less (Var "x") (Const 1))) (Const 0)),If (Const 26) (While (Uminus (Var "x")) (Seq [])) (While (Uminus (Const 0)) (Seq [])),Assign "x" (Const 1),If (Var "x") (Assign "z" (Var "z")) (Seq []),Assign "y" (Binop Div (Const 0) (Var "y")),Assign "y" (Binop Div (Const 1) (Var "y")),If (Binop Or (Const (-25)) (Const 1)) (Seq [If (Binop Div (Const 0) (Const (-13))) (Seq []) (Seq [])]) (Seq [Assign "x" (Uminus (Var "x"))]),Assign "x" (Const 1)]
 was printed as
*******************
{ if z then { } else if - ( 8 ) == ( y == x || 1 <= b / 1 ) then while - ( - ( - ( 1 ) ) ) do z = - ( - b ) else { } ; z = -14 <= ( y && -25 <= 0 ) ; y = -24 ; z = 1 ; z = - x ; x = z + 0 ; z = a ; a = ( 0 || z -1 ) && y ; a = ( - ( z || 1 || 0 <= b ) <= 0 ) * ( 0 * ( 1 + 0 ) || 0 * -14 ) ; y = 1 ; while 0 do { a = b && z } ; b = 0 + y ; y = 0 ; a = 0 / ( x < 1 ) / 0 ; if 26 then while - x do { } else while - ( 0 ) do { } ; x = 1 ; if x then z = z else { } ; y = 0 / y ; y = 1 / y ; if -25 || 1 then { if 0 / -13 then { } else { } } else { x = - x } ; x = 1 }

*******************
but expected
*******************
{
  if z then { } else if - ( 8 ) == ( y == x || 1 <= b / 1 ) then
    while - ( - ( - ( 1 ) ) ) do
      z = - ( - b )
  else { } ;
  z = -14 <= ( y && -25 <= 0 ) ;
  y = -24 ;
  z = 1 ;
  z = - x ;
  x = z + 0 ;
  z = a ;
  a = ( 0 || z -1 ) && y ;
  a = ( - ( z || 1 || 0 <= b ) <= 0 ) * ( 0 * ( 1 + 0 ) || 0 * -14 ) ;
  y = 1 ;
  while 0 do {
    a = b && z
  } ;
  b = 0 + y ;
  y = 0 ;
  a = 0 / ( x < 1 ) / 0 ;
  if 26 then
    while - x do { }
  else
    while - ( 0 ) do { } ;
  x = 1 ;
  if x then
    z = z
  else { } ;
  y = 0 / y ;
  y = 1 / y ;
  if -25 || 1 then {
    if 0 / -13 then { } else { }
  } else {
    x = - x
  } ;
  x = 1
}

*******************

AST
If (Binop LessEq (Var "x") (Var "y")) (While (Binop Div (Binop Less (Binop Less (Binop Minus (Var "b") (Const 1)) (Binop LessEq (Const (-26)) (Binop And (Const 0) (Const 0)))) (Const 1)) (Binop LessEq (Uminus (Binop Times (Uminus (Var "x")) (Const 1))) (Var "z"))) (If (Const 0) (Assign "z" (Const (-15))) (Assign "a" (Const 1)))) (If (Var "a") (Assign "a" (Binop And (Var "x") (Var "y"))) (Assign "z" (Const (-5))))
 was printed as
*******************
if x <= y then while ( b -1 < ( -26 <= ( 0 && 0 ) ) < 1 ) / ( - ( - x * 1 ) <= z ) do if 0 then z = -15 else a = 1 else if a then a = x && y else z = -5

*******************
but expected
*******************
if x <= y then
  while ( b -1 < ( -26 <= ( 0 && 0 ) ) < 1 ) / ( - ( - x * 1 ) <= z ) do
    if 0 then
      z = -15
    else
      a = 1
else if a then
  a = x && y
else
  z = -5

*******************

AST
Seq [Assign "x" (Var "z"),While (Binop Minus (Binop LessEq (Var "y") (Const 21)) (Const 1)) (Assign "z" (Var "z")),Assign "x" (Const 0),Assign "z" (Const 1),Assign "x" (Const 1),Assign "x" (Const (-7)),Assign "z" (Uminus (Var "x")),While (Binop Less (Binop Div (Binop And (Const 0) (Uminus (Uminus (Const 1)))) (Var "z")) (Var "y")) (Assign "b" (Binop Or (Var "z") (Const 0))),If (Var "x") (Assign "b" (Var "z")) (Assign "b" (Const 1)),If (Const (-30)) (While (Binop Plus (Uminus (Const (-23))) (Var "b")) (Seq [])) (If (Binop LessEq (Var "z") (Binop And (Var "a") (Const 1))) (Seq []) (Assign "y" (Const 1))),Assign "x" (Const 0),If (Binop Less (Const 1) (Uminus (Uminus (Const 1)))) (Seq []) (Seq [If (Const 0) (Seq []) (Seq [])]),Assign "x" (Binop Or (Uminus (Var "x")) (Binop Times (Var "b") (Binop Div (Var "y") (Uminus (Var "a"))))),If (Var "z") (Assign "y" (Var "a")) (Seq []),Assign "b" (Var "y"),While (Var "x") (Assign "a" (Const (-21))),While (Binop Equal (Uminus (Var "x")) (Var "b")) (Seq [Assign "x" (Binop Equal (Var "z") (Const 15))]),If (Binop LessEq (Const 0) (Var "y")) (Assign "x" (Binop And (Binop Less (Var "z") (Const (-16))) (Var "x"))) (Seq []),Assign "b" (Const (-14)),If (Const (-2)) (Assign "y" (Binop Minus (Const 0) (Const 1))) (Seq [Assign "y" (Binop Equal (Uminus (Uminus (Const 13))) (Const (-2))),If (Const 1) (Seq []) (Seq [])]),Assign "z" (Binop Less (Const 1) (Binop Times (Binop Times (Const 0) (Const 29)) (Uminus (Binop And (Binop Less (Var "a") (Var "x")) (Var "y")))))]
 was printed as
*******************
{ x = z ; while ( y <= 21 ) -1 do z = z ; x = 0 ; z = 1 ; x = 1 ; x = -7 ; z = - x ; while ( 0 && - ( - ( 1 ) ) ) / z < y do b = z || 0 ; if x then b = z else b = 1 ; if -30 then while - ( -23 ) + b do { } else if z <= ( a && 1 ) then { } else y = 1 ; x = 0 ; if 1 < - ( - ( 1 ) ) then { } else { if 0 then { } else { } } ; x = - x || b * ( y / - a ) ; if z then y = a else { } ; b = y ; while x do a = -21 ; while - x == b do { x = z == 15 } ; if 0 <= y then x = z < -16 && x else { } ; b = -14 ; if -2 then y = 0 -1 else { y = - ( - ( 13 ) ) == -2 ; if 1 then { } else { } } ; z = 1 < 0 * 29 * - ( a < x && y ) }

*******************
but expected
*******************
{
  x = z ;
  while ( y <= 21 ) -1 do
    z = z ;
  x = 0 ;
  z = 1 ;
  x = 1 ;
  x = -7 ;
  z = - x ;
  while ( 0 && - ( - ( 1 ) ) ) / z < y do
    b = z || 0 ;
  if x then
    b = z
  else
    b = 1 ;
  if -30 then
    while - ( -23 ) + b do { }
  else if z <= ( a && 1 ) then { } else
    y = 1 ;
  x = 0 ;
  if 1 < - ( - ( 1 ) ) then { } else {
    if 0 then { } else { }
  } ;
  x = - x || b * ( y / - a ) ;
  if z then
    y = a
  else { } ;
  b = y ;
  while x do
    a = -21 ;
  while - x == b do {
    x = z == 15
  } ;
  if 0 <= y then
    x = z < -16 && x
  else { } ;
  b = -14 ;
  if -2 then
    y = 0 -1
  else {
    y = - ( - ( 13 ) ) == -2 ;
    if 1 then { } else { }
  } ;
  z = 1 < 0 * 29 * - ( a < x && y )
}

*******************

AST
Seq [Assign "a" (Const 0),Assign "b" (Binop Less (Binop Equal (Const (-19)) (Const 19)) (Const 0)),While (Const 6) (Assign "z" (Const 0))]
 was printed as
*******************
{ a = 0 ; b = -19 == 19 < 0 ; while 6 do z = 0 }

*******************
but expected
*******************
{
  a = 0 ;
  b = -19 == 19 < 0 ;
  while 6 do
    z = 0
}

*******************

AST
Seq [While (Const 14) (If (Binop Less (Uminus (Var "a")) (Binop LessEq (Binop Less (Const 1) (Var "y")) (Var "z"))) (Seq []) (Seq [])),While (Var "a") (If (Const 1) (Seq []) (Seq [])),If (Var "z") (Seq [Assign "b" (Binop Plus (Var "z") (Var "z"))]) (Seq []),Assign "z" (Uminus (Var "y")),If (Uminus (Const 0)) (Assign "y" (Binop Minus (Var "x") (Var "y"))) (While (Const 19) (Assign "x" (Uminus (Binop Minus (Uminus (Const 0)) (Var "x"))))),Assign "z" (Var "y"),Assign "a" (Const 0),Assign "x" (Uminus (Const 1)),Assign "a" (Const 1),Assign "z" (Const 1),Assign "a" (Binop Plus (Const 1) (Binop LessEq (Var "z") (Binop Div (Const 1) (Uminus (Const 0))))),Assign "z" (Const 29),Assign "z" (Const 0),Assign "y" (Const 1),While (Binop Minus (Const 0) (Var "y")) (Seq []),Assign "z" (Const 1),If (Uminus (Var "b")) (If (Const 0) (Seq []) (Seq [])) (If (Const 29) (Seq []) (Seq [])),Assign "b" (Binop Or (Binop Or (Binop Or (Var "z") (Var "z")) (Var "b")) (Const 0)),Assign "z" (Const 1),Assign "z" (Const 0),Assign "x" (Uminus (Binop Plus (Const 0) (Var "y"))),If (Uminus (Binop Or (Uminus (Var "a")) (Const 30))) (If (Var "b") (Seq []) (Seq [])) (Seq []),While (Var "a") (If (Const 0) (Seq []) (Assign "a" (Var "a"))),If (Var "b") (Assign "a" (Binop Less (Uminus (Var "b")) (Binop Less (Var "y") (Var "y")))) (Assign "a" (Const 1)),While (Binop Div (Binop Equal (Const 0) (Var "y")) (Const 1)) (Assign "x" (Const 0)),Assign "x" (Uminus (Const 1)),Assign "z" (Const (-18)),Assign "y" (Binop Or (Var "y") (Const 0)),While (Const 1) (Assign "z" (Binop Div (Const (-29)) (Const 1))),Assign "b" (Binop Times (Const 0) (Binop Equal (Const 0) (Binop Or (Const 0) (Binop Plus (Binop Div (Var "a") (Const 1)) (Var "x"))))),Assign "y" (Binop LessEq (Binop Div (Var "z") (Binop Times (Const 1) (Var "b"))) (Binop Or (Binop Times (Var "y") (Binop And (Const (-25)) (Const 0))) (Binop Times (Const (-26)) (Var "a"))))]
 was printed as
*******************
{ while 14 do if - a < ( 1 < y <= z ) then { } else { } ; while a do if 1 then { } else { } ; if z then { b = z + z } else { } ; z = - y ; if - ( 0 ) then y = x - y else while 19 do x = - ( - ( 0 ) - x ) ; z = y ; a = 0 ; x = - ( 1 ) ; a = 1 ; z = 1 ; a = 1 + ( z <= 1 / - ( 0 ) ) ; z = 29 ; z = 0 ; y = 1 ; while 0 - y do { } ; z = 1 ; if - b then if 0 then { } else { } else if 29 then { } else { } ; b = z || z || b || 0 ; z = 1 ; z = 0 ; x = - ( 0 + y ) ; if - ( - a || 30 ) then if b then { } else { } else { } ; while a do if 0 then { } else a = a ; if b then a = - b < ( y < y ) else a = 1 ; while ( 0 == y ) / 1 do x = 0 ; x = - ( 1 ) ; z = -18 ; y = y || 0 ; while 1 do z = -29 / 1 ; b = 0 * ( 0 == ( 0 || a / 1 + x ) ) ; y = z / ( 1 * b ) <= ( y * ( -25 && 0 ) || -26 * a ) }

*******************
but expected
*******************
{
  while 14 do
    if - a < ( 1 < y <= z ) then { } else { } ;
  while a do
    if 1 then { } else { } ;
  if z then {
    b = z + z
  } else { } ;
  z = - y ;
  if - ( 0 ) then
    y = x - y
  else
    while 19 do
      x = - ( - ( 0 ) - x ) ;
  z = y ;
  a = 0 ;
  x = - ( 1 ) ;
  a = 1 ;
  z = 1 ;
  a = 1 + ( z <= 1 / - ( 0 ) ) ;
  z = 29 ;
  z = 0 ;
  y = 1 ;
  while 0 - y do { } ;
  z = 1 ;
  if - b then
    if 0 then { } else { }
  else if 29 then { } else { } ;
  b = z || z || b || 0 ;
  z = 1 ;
  z = 0 ;
  x = - ( 0 + y ) ;
  if - ( - a || 30 ) then
    if b then { } else { }
  else { } ;
  while a do
    if 0 then { } else
      a = a ;
  if b then
    a = - b < ( y < y )
  else
    a = 1 ;
  while ( 0 == y ) / 1 do
    x = 0 ;
  x = - ( 1 ) ;
  z = -18 ;
  y = y || 0 ;
  while 1 do
    z = -29 / 1 ;
  b = 0 * ( 0 == ( 0 || a / 1 + x ) ) ;
  y = z / ( 1 * b ) <= ( y * ( -25 && 0 ) || -26 * a )
}

*******************

AST
Seq [If (Const 0) (If (Binop Times (Uminus (Const 1)) (Var "b")) (While (Const 0) (Assign "b" (Binop Times (Var "z") (Uminus (Binop And (Const (-7)) (Var "y")))))) (Assign "b" (Const 0))) (Seq [If (Binop Plus (Const (-4)) (Var "x")) (Assign "a" (Binop Div (Var "y") (Var "a"))) (Assign "b" (Uminus (Const 0))),Assign "y" (Const 0)]),Assign "a" (Const 0),Assign "a" (Binop Minus (Uminus (Var "x")) (Uminus (Var "y"))),Assign "a" (Uminus (Binop Less (Binop Div (Const 0) (Const 24)) (Binop Div (Binop Minus (Binop Plus (Var "x") (Var "x")) (Var "a")) (Binop Plus (Var "z") (Const 1))))),Assign "a" (Const 8),Assign "a" (Var "a"),Assign "a" (Binop Plus (Var "x") (Var "z")),Assign "a" (Binop And (Const (-7)) (Uminus (Const 0))),Assign "x" (Binop Times (Const 1) (Var "y")),Assign "y" (Const (-30)),Assign "y" (Binop Minus (Const 1) (Var "y")),If (Var "b") (Seq []) (Seq []),Assign "b" (Var "b"),Assign "z" (Binop Equal (Binop And (Const 1) (Const 0)) (Const 1)),If (Uminus (Binop LessEq (Binop LessEq (Const 1) (Const 29)) (Const 1))) (Seq []) (Assign "z" (Binop And (Const 1) (Binop Less (Binop Div (Var "z") (Binop Minus (Const 24) (Binop And (Const 0) (Var "a")))) (Binop Minus (Uminus (Var "z")) (Binop Div (Var "y") (Var "z")))))),If (Binop Times (Binop Or (Const 0) (Const 1)) (Const 0)) (Assign "x" (Var "b")) (Seq []),Assign "z" (Const 0),While (Const 1) (Assign "x" (Var "x")),Assign "b" (Var "a"),While (Binop Or (Binop Equal (Uminus (Var "b")) (Uminus (Binop Less (Const 1) (Var "z")))) (Const 1)) (Assign "x" (Const (-19))),Assign "b" (Var "a"),Assign "z" (Binop Less (Uminus (Uminus (Binop And (Const 0) (Uminus (Const 1))))) (Const 1)),While (Binop Minus (Binop Times (Uminus (Var "z")) (Var "b")) (Uminus (Const 13))) (Assign "x" (Binop Equal (Uminus (Var "b")) (Binop And (Const 1) (Const 0)))),Assign "z" (Var "y"),While (Binop Times (Var "y") (Binop Minus (Const 21) (Const (-7)))) (Assign "b" (Const 0)),If (Binop Or (Const 0) (Binop Or (Const 0) (Binop Times (Binop Less (Const (-6)) (Var "z")) (Binop Div (Uminus (Const 1)) (Uminus (Var "b")))))) (Assign "b" (Binop Or (Uminus (Uminus (Const 0))) (Var "b"))) (Assign "y" (Binop And (Const 0) (Const 0)))]
 was printed as
*******************
{ if 0 then if - ( 1 ) * b then while 0 do b = z * - ( -7 && y ) else b = 0 else { if -4 + x then a = y / a else b = - ( 0 ) ; y = 0 } ; a = 0 ; a = - x - - y ; a = - ( 0 / 24 < ( x + x - a ) / ( z + 1 ) ) ; a = 8 ; a = a ; a = x + z ; a = -7 && - ( 0 ) ; x = 1 * y ; y = -30 ; y = 1 - y ; if b then { } else { } ; b = b ; z = ( 1 && 0 ) == 1 ; if - ( 1 <= 29 <= 1 ) then { } else z = 1 && z / ( 24 - ( 0 && a ) ) < - z - y / z ; if ( 0 || 1 ) * 0 then x = b else { } ; z = 0 ; while 1 do x = x ; b = a ; while - b == - ( 1 < z ) || 1 do x = -19 ; b = a ; z = - ( - ( 0 && - ( 1 ) ) ) < 1 ; while - z * b - - ( 13 ) do x = - b == ( 1 && 0 ) ; z = y ; while y * ( 21 - -7 ) do b = 0 ; if 0 || ( 0 || ( -6 < z ) * ( - ( 1 ) / - b ) ) then b = - ( - ( 0 ) ) || b else y = 0 && 0 }

*******************
but expected
*******************
{
  if 0 then
    if - ( 1 ) * b then
      while 0 do
        b = z * - ( -7 && y )
    else
      b = 0
  else {
    if -4 + x then
      a = y / a
    else
      b = - ( 0 ) ;
    y = 0
  } ;
  a = 0 ;
  a = - x - - y ;
  a = - ( 0 / 24 < ( x + x - a ) / ( z + 1 ) ) ;
  a = 8 ;
  a = a ;
  a = x + z ;
  a = -7 && - ( 0 ) ;
  x = 1 * y ;
  y = -30 ;
  y = 1 - y ;
  if b then { } else { } ;
  b = b ;
  z = ( 1 && 0 ) == 1 ;
  if - ( 1 <= 29 <= 1 ) then { } else
    z = 1 && z / ( 24 - ( 0 && a ) ) < - z - y / z ;
  if ( 0 || 1 ) * 0 then
    x = b
  else { } ;
  z = 0 ;
  while 1 do
    x = x ;
  b = a ;
  while - b == - ( 1 < z ) || 1 do
    x = -19 ;
  b = a ;
  z = - ( - ( 0 && - ( 1 ) ) ) < 1 ;
  while - z * b - - ( 13 ) do
    x = - b == ( 1 && 0 ) ;
  z = y ;
  while y * ( 21 - -7 ) do
    b = 0 ;
  if 0 || ( 0 || ( -6 < z ) * ( - ( 1 ) / - b ) ) then
    b = - ( - ( 0 ) ) || b
  else
    y = 0 && 0
}

*******************

AST
Seq [Assign "z" (Binop Div (Var "a") (Const 0)),If (Const 1) (Assign "a" (Var "x")) (Seq []),Assign "b" (Var "a"),Assign "a" (Uminus (Const 0)),While (Binop Minus (Binop LessEq (Var "z") (Uminus (Binop LessEq (Const 1) (Const (-6))))) (Var "z")) (Seq []),Assign "a" (Const 0),Assign "a" (Uminus (Binop Times (Const 0) (Const (-2)))),Assign "b" (Var "x"),Assign "b" (Const 5),Assign "x" (Var "b"),If (Var "a") (Assign "b" (Var "b")) (If (Var "a") (If (Var "b") (Seq []) (Seq [])) (If (Const 1) (Seq []) (Seq []))),If (Var "z") (Seq []) (Assign "b" (Const 0)),Assign "z" (Uminus (Var "b")),Assign "a" (Binop Times (Binop LessEq (Var "x") (Uminus (Const 17))) (Var "a")),Assign "y" (Const 1),While (Var "a") (While (Const 1) (Seq [])),While (Binop LessEq (Const 23) (Uminus (Binop And (Const 1) (Uminus (Binop Or (Const 0) (Const 0)))))) (Seq []),Assign "z" (Const 0),Assign "y" (Var "a"),If (Var "z") (If (Var "y") (Assign "a" (Binop Equal (Const 1) (Binop Div (Const 0) (Const 1)))) (Seq [Assign "b" (Binop LessEq (Var "b") (Var "b"))])) (Seq [Assign "y" (Binop Or (Const 0) (Binop Equal (Binop Div (Var "z") (Const (-10))) (Binop Plus (Const 3) (Uminus (Var "x")))))]),Assign "z" (Var "z"),Assign "x" (Const 0),Assign "b" (Const 1)]
 was printed as
*******************
{ z = a / 0 ; if 1 then a = x else { } ; b = a ; a = - ( 0 ) ; while ( z <= - ( 1 <= -6 ) ) - z do { } ; a = 0 ; a = - ( 0 * -2 ) ; b = x ; b = 5 ; x = b ; if a then b = b else if a then if b then { } else { } else if 1 then { } else { } ; if z then { } else b = 0 ; z = - b ; a = ( x <= - ( 17 ) ) * a ; y = 1 ; while a do while 1 do { } ; while 23 <= - ( 1 && - ( 0 || 0 ) ) do { } ; z = 0 ; y = a ; if z then if y then a = 1 == 0 / 1 else { b = b <= b } else { y = 0 || z / -10 == 3 + - x } ; z = z ; x = 0 ; b = 1 }

*******************
but expected
*******************
{
  z = a / 0 ;
  if 1 then
    a = x
  else { } ;
  b = a ;
  a = - ( 0 ) ;
  while ( z <= - ( 1 <= -6 ) ) - z do { } ;
  a = 0 ;
  a = - ( 0 * -2 ) ;
  b = x ;
  b = 5 ;
  x = b ;
  if a then
    b = b
  else if a then
    if b then { } else { }
  else if 1 then { } else { } ;
  if z then { } else
    b = 0 ;
  z = - b ;
  a = ( x <= - ( 17 ) ) * a ;
  y = 1 ;
  while a do
    while 1 do { } ;
  while 23 <= - ( 1 && - ( 0 || 0 ) ) do { } ;
  z = 0 ;
  y = a ;
  if z then
    if y then
      a = 1 == 0 / 1
    else {
      b = b <= b
    }
  else {
    y = 0 || z / -10 == 3 + - x
  } ;
  z = z ;
  x = 0 ;
  b = 1
}

*******************

AST
Seq [If (Var "z") (Seq []) (Assign "x" (Var "z")),If (Const 0) (If (Uminus (Var "z")) (Assign "b" (Uminus (Var "b"))) (Seq [])) (Assign "x" (Uminus (Var "z"))),If (Var "y") (Seq []) (If (Binop Less (Uminus (Binop Minus (Binop Or (Binop Times (Var "x") (Var "z")) (Var "b")) (Binop And (Const 1) (Var "y")))) (Binop And (Const 1) (Binop Or (Binop LessEq (Var "a") (Binop Or (Var "x") (Const 1))) (Uminus (Binop Equal (Var "z") (Const 20)))))) (If (Var "b") (Seq []) (Seq [])) (Assign "b" (Binop Or (Var "x") (Binop Less (Var "x") (Var "x"))))),While (Var "z") (Seq []),If (Var "a") (Seq []) (Assign "z" (Binop Plus (Var "b") (Binop Times (Const 1) (Var "x")))),Assign "z" (Var "b"),Assign "y" (Binop LessEq (Binop Div (Const (-7)) (Var "x")) (Const 0)),Assign "b" (Var "a"),Assign "x" (Var "x"),Assign "x" (Var "y"),Assign "z" (Binop Times (Const 1) (Var "x")),Assign "b" (Const 1),Assign "x" (Binop Minus (Var "x") (Binop Div (Var "z") (Const 1))),Assign "b" (Binop LessEq (Const 1) (Var "y")),Assign "y" (Var "b"),If (Uminus (Binop Plus (Var "z") (Uminus (Binop Minus (Var "a") (Const (-8)))))) (While (Var "z") (Seq [])) (Seq []),Assign "x" (Binop LessEq (Var "y") (Uminus (Var "x"))),Assign "b" (Binop Times (Binop Minus (Var "x") (Binop LessEq (Const 1) (Var "b"))) (Uminus (Binop And (Binop Minus (Binop Plus (Var "x") (Const 1)) (Binop LessEq (Var "b") (Var "x"))) (Const 18)))),Assign "b" (Var "z"),Assign "b" (Const 0),Assign "a" (Var "a"),Assign "z" (Binop Times (Binop Or (Var "b") (Const 26)) (Var "z")),Assign "y" (Uminus (Binop Less (Uminus (Binop Times (Const 1) (Const 1))) (Var "a")))]
 was printed as
*******************
{ if z then { } else x = z ; if 0 then if - z then b = - b else { } else x = - z ; if y then { } else if - ( ( x * z || b ) - ( 1 && y ) ) < ( 1 && ( a <= ( x || 1 ) || - ( z == 20 ) ) ) then if b then { } else { } else b = x || x < x ; while z do { } ; if a then { } else z = b + 1 * x ; z = b ; y = -7 / x <= 0 ; b = a ; x = x ; x = y ; z = 1 * x ; b = 1 ; x = x - z / 1 ; b = 1 <= y ; y = b ; if - ( z + - ( a - -8 ) ) then while z do { } else { } ; x = y <= - x ; b = ( x - ( 1 <= b ) ) * - ( x + 1 - ( b <= x ) && 18 ) ; b = z ; b = 0 ; a = a ; z = ( b || 26 ) * z ; y = - ( - ( 1 * 1 ) < a ) }

*******************
but expected
*******************
{
  if z then { } else
    x = z ;
  if 0 then
    if - z then
      b = - b
    else { }
  else
    x = - z ;
  if y then { } else if - ( ( x * z || b ) - ( 1 && y ) ) < ( 1 && ( a <= ( x || 1 ) || - ( z == 20 ) ) ) then
    if b then { } else { }
  else
    b = x || x < x ;
  while z do { } ;
  if a then { } else
    z = b + 1 * x ;
  z = b ;
  y = -7 / x <= 0 ;
  b = a ;
  x = x ;
  x = y ;
  z = 1 * x ;
  b = 1 ;
  x = x - z / 1 ;
  b = 1 <= y ;
  y = b ;
  if - ( z + - ( a - -8 ) ) then
    while z do { }
  else { } ;
  x = y <= - x ;
  b = ( x - ( 1 <= b ) ) * - ( x + 1 - ( b <= x ) && 18 ) ;
  b = z ;
  b = 0 ;
  a = a ;
  z = ( b || 26 ) * z ;
  y = - ( - ( 1 * 1 ) < a )
}

*******************

AST
If (Binop Div (Binop Less (Const 1) (Binop And (Var "x") (Binop Times (Uminus (Const 1)) (Var "y")))) (Const 10)) (Seq []) (Seq [Assign "y" (Var "x"),Assign "a" (Var "x"),While (Binop Times (Const (-18)) (Var "x")) (Seq []),While (Var "y") (Assign "z" (Binop LessEq (Uminus (Binop Times (Var "x") (Binop Or (Const 0) (Const 1)))) (Const 16)))])
 was printed as
*******************
if ( 1 < ( x && - ( 1 ) * y ) ) / 10 then { } else { y = x ; a = x ; while -18 * x do { } ; while y do z = - ( x * ( 0 || 1 ) ) <= 16 }

*******************
but expected
*******************
if ( 1 < ( x && - ( 1 ) * y ) ) / 10 then { } else {
  y = x ;
  a = x ;
  while -18 * x do { } ;
  while y do
    z = - ( x * ( 0 || 1 ) ) <= 16
}

*******************

AST
Seq [If (Var "a") (Assign "x" (Binop Plus (Const 0) (Var "x"))) (Seq [Assign "a" (Var "z"),Assign "b" (Uminus (Binop Times (Binop Times (Var "a") (Binop Equal (Const 0) (Const (-23)))) (Var "z")))]),While (Const (-27)) (Assign "b" (Const (-25))),While (Const 0) (If (Binop Equal (Const 0) (Var "x")) (Assign "y" (Uminus (Binop Plus (Var "x") (Var "b")))) (Seq [Assign "x" (Const (-12))])),Assign "b" (Const 1),If (Const (-27)) (Assign "b" (Binop LessEq (Var "a") (Var "a"))) (Assign "a" (Binop Less (Const 26) (Uminus (Binop Or (Binop Less (Const 0) (Const 1)) (Uminus (Var "b")))))),While (Const 1) (While (Binop And (Const 0) (Binop LessEq (Const 13) (Var "a"))) (Seq [Assign "y" (Var "b")])),If (Const 0) (Assign "z" (Binop Equal (Const 1) (Binop Less (Uminus (Const 17)) (Var "b")))) (Assign "x" (Binop Plus (Const 1) (Var "x"))),If (Uminus (Var "b")) (While (Binop Equal (Const 18) (Var "y")) (Assign "a" (Const 1))) (Assign "x" (Binop Or (Binop Plus (Uminus (Uminus (Var "x"))) (Var "y")) (Const 1))),While (Binop Or (Var "a") (Uminus (Binop Or (Uminus (Var "z")) (Var "x")))) (Seq [While (Var "y") (Seq [])]),Assign "a" (Binop Minus (Binop And (Var "b") (Const 0)) (Var "z")),Assign "y" (Var "x"),Assign "z" (Const 0),While (Var "z") (Seq [Assign "z" (Var "a")]),Assign "z" (Binop LessEq (Const 1) (Const 1)),Assign "z" (Var "y"),If (Var "b") (Seq []) (Assign "b" (Binop Times (Const 22) (Const 0))),If (Binop Or (Binop Minus (Const (-17)) (Binop Or (Const 1) (Uminus (Binop LessEq (Const 1) (Const 1))))) (Const 4)) (Assign "b" (Binop Less (Var "z") (Binop Times (Var "a") (Binop Minus (Var "y") (Var "x"))))) (If (Const 0) (Seq [If (Binop Times (Binop Times (Const 1) (Const 1)) (Binop Times (Var "x") (Var "a"))) (Seq []) (Seq [])]) (Seq []))]
 was printed as
*******************
{ if a then x = 0 + x else { a = z ; b = - ( a * ( 0 == -23 ) * z ) } ; while -27 do b = -25 ; while 0 do if 0 == x then y = - ( x + b ) else { x = -12 } ; b = 1 ; if -27 then b = a <= a else a = 26 < - ( 0 < 1 || - b ) ; while 1 do while 0 && 13 <= a do { y = b } ; if 0 then z = 1 == ( - ( 17 ) < b ) else x = 1 + x ; if - b then while 18 == y do a = 1 else x = - ( - x ) + y || 1 ; while a || - ( - z || x ) do { while y do { } } ; a = ( b && 0 ) - z ; y = x ; z = 0 ; while z do { z = a } ; z = 1 <= 1 ; z = y ; if b then { } else b = 22 * 0 ; if -17 - ( 1 || - ( 1 <= 1 ) ) || 4 then b = z < a * ( y - x ) else if 0 then { if 1 * 1 * ( x * a ) then { } else { } } else { } }

*******************
but expected
*******************
{
  if a then
    x = 0 + x
  else {
    a = z ;
    b = - ( a * ( 0 == -23 ) * z )
  } ;
  while -27 do
    b = -25 ;
  while 0 do
    if 0 == x then
      y = - ( x + b )
    else {
      x = -12
    } ;
  b = 1 ;
  if -27 then
    b = a <= a
  else
    a = 26 < - ( 0 < 1 || - b ) ;
  while 1 do
    while 0 && 13 <= a do {
      y = b
    } ;
  if 0 then
    z = 1 == ( - ( 17 ) < b )
  else
    x = 1 + x ;
  if - b then
    while 18 == y do
      a = 1
  else
    x = - ( - x ) + y || 1 ;
  while a || - ( - z || x ) do {
    while y do { }
  } ;
  a = ( b && 0 ) - z ;
  y = x ;
  z = 0 ;
  while z do {
    z = a
  } ;
  z = 1 <= 1 ;
  z = y ;
  if b then { } else
    b = 22 * 0 ;
  if -17 - ( 1 || - ( 1 <= 1 ) ) || 4 then
    b = z < a * ( y - x )
  else if 0 then {
    if 1 * 1 * ( x * a ) then { } else { }
  } else { }
}

*******************

AST
If (Const 1) (Seq [If (Binop Div (Const 1) (Var "x")) (Seq [Assign "x" (Const 0)]) (Seq []),Assign "x" (Const (-9)),If (Var "z") (Seq []) (Assign "a" (Var "b")),Assign "z" (Binop Div (Var "y") (Var "z")),Assign "a" (Const (-11)),Assign "a" (Var "a"),Assign "x" (Binop Less (Var "x") (Const 0)),Assign "x" (Binop LessEq (Const 1) (Var "z")),Assign "y" (Uminus (Binop Less (Uminus (Const (-1))) (Const 0))),If (Binop Div (Binop Minus (Var "b") (Binop Plus (Const 0) (Const 1))) (Var "b")) (Seq []) (Assign "x" (Const 0))]) (Assign "b" (Binop And (Const (-15)) (Const 0)))
 was printed as
*******************
if 1 then { if 1 / x then { x = 0 } else { } ; x = -9 ; if z then { } else a = b ; z = y / z ; a = -11 ; a = a ; x = x < 0 ; x = 1 <= z ; y = - ( - ( -1 ) < 0 ) ; if ( b - ( 0 + 1 ) ) / b then { } else x = 0 } else b = -15 && 0

*******************
but expected
*******************
if 1 then {
  if 1 / x then {
    x = 0
  } else { } ;
  x = -9 ;
  if z then { } else
    a = b ;
  z = y / z ;
  a = -11 ;
  a = a ;
  x = x < 0 ;
  x = 1 <= z ;
  y = - ( - ( -1 ) < 0 ) ;
  if ( b - ( 0 + 1 ) ) / b then { } else
    x = 0
} else
  b = -15 && 0

*******************

AST
While (Var "x") (While (Const 0) (If (Const (-10)) (Assign "b" (Var "x")) (Assign "x" (Binop Less (Uminus (Var "x")) (Var "a")))))
 was printed as
*******************
while x do while 0 do if -10 then b = x else x = - x < a

*******************
but expected
*******************
while x do
  while 0 do
    if -10 then
      b = x
    else
      x = - x < a

*******************

AST
If (Const 2) (If (Const 13) (Assign "y" (Binop Div (Binop Minus (Binop Times (Binop Div (Const 7) (Const 8)) (Const (-3))) (Binop And (Uminus (Const 0)) (Const 0))) (Var "z"))) (While (Uminus (Const 0)) (Seq [Assign "a" (Const 1)]))) (Seq [If (Var "z") (Seq []) (Seq []),Assign "a" (Binop Less (Const (-10)) (Const 0)),If (Binop Equal (Binop Times (Var "b") (Binop And (Const 10) (Const 0))) (Const 0)) (Seq [If (Const 0) (Seq []) (Seq [])]) (If (Uminus (Var "a")) (Assign "x" (Var "y")) (Seq [])),While (Const 1) (Seq [])])
 was printed as
*******************
if 2 then if 13 then y = ( 7 / 8 * -3 - ( - ( 0 ) && 0 ) ) / z else while - ( 0 ) do { a = 1 } else { if z then { } else { } ; a = -10 < 0 ; if b * ( 10 && 0 ) == 0 then { if 0 then { } else { } } else if - a then x = y else { } ; while 1 do { } }

*******************
but expected
*******************
if 2 then
  if 13 then
    y = ( 7 / 8 * -3 - ( - ( 0 ) && 0 ) ) / z
  else
    while - ( 0 ) do {
      a = 1
    }
else {
  if z then { } else { } ;
  a = -10 < 0 ;
  if b * ( 10 && 0 ) == 0 then {
    if 0 then { } else { }
  } else if - a then
    x = y
  else { } ;
  while 1 do { }
}

*******************

AST
Seq [If (Var "y") (Seq [Assign "y" (Binop LessEq (Const 1) (Var "x"))]) (Assign "y" (Binop LessEq (Binop And (Var "a") (Binop Minus (Var "a") (Uminus (Uminus (Var "a"))))) (Uminus (Var "x")))),Assign "z" (Binop Minus (Const 0) (Var "x")),Assign "a" (Var "z"),While (Const 1) (Assign "y" (Const 10)),While (Binop Equal (Binop Less (Var "b") (Binop And (Var "x") (Const 1))) (Var "a")) (Assign "x" (Const (-4))),Assign "b" (Binop Minus (Const 0) (Const 1)),If (Binop LessEq (Binop Minus (Const 7) (Var "x")) (Var "b")) (Seq [Assign "z" (Uminus (Var "y")),Assign "x" (Binop Div (Var "y") (Binop Equal (Binop LessEq (Const 0) (Var "b")) (Binop Equal (Var "a") (Binop Minus (Const 1) (Uminus (Var "y")))))),If (Const 1) (Seq []) (Seq [])]) (While (Const 20) (While (Const 0) (Assign "y" (Const 3)))),While (Const 1) (Assign "a" (Binop And (Binop LessEq (Uminus (Binop Times (Var "b") (Var "b"))) (Uminus (Binop Div (Const 1) (Binop And (Var "a") (Const 16))))) (Var "a")))]
 was printed as
*******************
{ if y then { y = 1 <= x } else y = ( a && a - - ( - a ) ) <= - x ; z = 0 - x ; a = z ; while 1 do y = 10 ; while b < ( x && 1 ) == a do x = -4 ; b = 0 -1 ; if 7 - x <= b then { z = - y ; x = y / ( 0 <= b == ( a == 1 - - y ) ) ; if 1 then { } else { } } else while 20 do while 0 do y = 3 ; while 1 do a = - ( b * b ) <= - ( 1 / ( a && 16 ) ) && a }

*******************
but expected
*******************
{
  if y then {
    y = 1 <= x
  } else
    y = ( a && a - - ( - a ) ) <= - x ;
  z = 0 - x ;
  a = z ;
  while 1 do
    y = 10 ;
  while b < ( x && 1 ) == a do
    x = -4 ;
  b = 0 -1 ;
  if 7 - x <= b then {
    z = - y ;
    x = y / ( 0 <= b == ( a == 1 - - y ) ) ;
    if 1 then { } else { }
  } else
    while 20 do
      while 0 do
        y = 3 ;
  while 1 do
    a = - ( b * b ) <= - ( 1 / ( a && 16 ) ) && a
}

*******************

AST
Seq [Assign "x" (Var "z"),While (Binop Less (Const 1) (Const (-20))) (While (Uminus (Uminus (Const 0))) (Seq [])),Assign "z" (Const 0),If (Var "y") (Assign "z" (Var "y")) (Assign "x" (Const 0)),Assign "y" (Var "a"),If (Const 27) (Assign "x" (Binop Times (Var "b") (Var "a"))) (Seq []),Assign "y" (Binop And (Uminus (Binop Less (Binop Minus (Var "a") (Uminus (Const 1))) (Binop LessEq (Var "z") (Var "b")))) (Uminus (Binop Plus (Binop Minus (Var "a") (Var "x")) (Binop Plus (Var "y") (Const 0))))),While (Const 0) (If (Var "y") (Assign "y" (Const 0)) (Seq [])),Assign "y" (Var "y"),Assign "y" (Binop Plus (Binop Minus (Const 0) (Binop Plus (Var "b") (Var "b"))) (Var "b")),Assign "b" (Var "z"),While (Binop LessEq (Var "b") (Binop Times (Var "y") (Var "z"))) (While (Binop Less (Binop Or (Var "x") (Const (-21))) (Const 1)) (Assign "x" (Var "b")))]
 was printed as
*******************
{ x = z ; while 1 < -20 do while - ( - ( 0 ) ) do { } ; z = 0 ; if y then z = y else x = 0 ; y = a ; if 27 then x = b * a else { } ; y = - ( a - - ( 1 ) < ( z <= b ) ) && - ( a - x + ( y + 0 ) ) ; while 0 do if y then y = 0 else { } ; y = y ; y = 0 - ( b + b ) + b ; b = z ; while b <= y * z do while ( x || -21 ) < 1 do x = b }

*******************
but expected
*******************
{
  x = z ;
  while 1 < -20 do
    while - ( - ( 0 ) ) do { } ;
  z = 0 ;
  if y then
    z = y
  else
    x = 0 ;
  y = a ;
  if 27 then
    x = b * a
  else { } ;
  y = - ( a - - ( 1 ) < ( z <= b ) ) && - ( a - x + ( y + 0 ) ) ;
  while 0 do
    if y then
      y = 0
    else { } ;
  y = y ;
  y = 0 - ( b + b ) + b ;
  b = z ;
  while b <= y * z do
    while ( x || -21 ) < 1 do
      x = b
}

*******************

AST
Seq [Assign "b" (Binop Equal (Var "z") (Const 1)),Assign "a" (Var "y"),If (Var "z") (If (Var "z") (Seq []) (Seq [])) (If (Const 0) (Seq []) (Seq [])),If (Binop Times (Var "y") (Var "z")) (Seq []) (Assign "a" (Binop Equal (Var "x") (Var "a"))),Assign "y" (Uminus (Binop LessEq (Uminus (Var "b")) (Uminus (Var "a")))),If (Binop Equal (Binop Or (Uminus (Var "y")) (Var "z")) (Const (-13))) (If (Uminus (Binop Times (Binop Equal (Var "y") (Const 1)) (Const 0))) (Seq []) (Seq [])) (Assign "z" (Binop Plus (Const (-3)) (Const 1))),If (Uminus (Const 1)) (Seq []) (Seq []),Assign "y" (Const 0),Assign "x" (Binop Equal (Const 0) (Const 1)),Assign "b" (Var "a"),Assign "y" (Var "y"),Assign "b" (Const 1),Assign "b" (Binop Div (Const 1) (Binop Equal (Binop And (Binop LessEq (Const 0) (Const (-8))) (Const 0)) (Const 1))),Assign "z" (Binop Div (Const (-26)) (Binop Or (Var "b") (Const 1))),While (Var "y") (Assign "a" (Var "z")),Assign "x" (Const 1),Assign "z" (Const 0),Assign "y" (Binop Div (Const 1) (Uminus (Const 1))),Assign "y" (Const 1),Assign "a" (Binop Div (Var "b") (Const 1)),If (Const 8) (If (Binop LessEq (Uminus (Const 0)) (Var "a")) (Seq []) (Seq [])) (Assign "z" (Binop Or (Uminus (Const 0)) (Uminus (Uminus (Const 1))))),If (Const 0) (Seq [Assign "y" (Uminus (Uminus (Uminus (Const 27))))]) (Seq [If (Binop Or (Var "y") (Const 0)) (Seq []) (Seq [])]),Assign "a" (Binop Equal (Const (-23)) (Binop Div (Var "b") (Uminus (Var "a")))),Assign "b" (Binop Times (Const (-28)) (Const 0)),Assign "a" (Binop Plus (Var "b") (Binop Div (Uminus (Var "x")) (Var "b"))),Assign "x" (Const 0),While (Const 0) (Assign "b" (Uminus (Uminus (Binop Times (Binop And (Var "b") (Const 1)) (Var "x"))))),If (Var "a") (Seq []) (If (Var "x") (Assign "x" (Uminus (Const 27))) (While (Binop Div (Binop Equal (Const 1) (Var "a")) (Binop Less (Binop Minus (Const 1) (Uminus (Const 0))) (Binop Less (Var "y") (Var "y")))) (Seq []))),While (Binop And (Const (-26)) (Var "z")) (Seq []),If (Binop Less (Binop Or (Binop Plus (Var "a") (Binop Less (Uminus (Var "x")) (Const 0))) (Binop Minus (Var "z") (Const 1))) (Const 1)) (Assign "x" (Var "b")) (Seq []),Assign "z" (Var "x"),Assign "y" (Var "x")]
 was printed as
*******************
{ b = z == 1 ; a = y ; if z then if z then { } else { } else if 0 then { } else { } ; if y * z then { } else a = x == a ; y = - ( - b <= - a ) ; if ( - y || z ) == -13 then if - ( ( y == 1 ) * 0 ) then { } else { } else z = -3 + 1 ; if - ( 1 ) then { } else { } ; y = 0 ; x = 0 == 1 ; b = a ; y = y ; b = 1 ; b = 1 / ( ( 0 <= -8 && 0 ) == 1 ) ; z = -26 / ( b || 1 ) ; while y do a = z ; x = 1 ; z = 0 ; y = 1 / - ( 1 ) ; y = 1 ; a = b / 1 ; if 8 then if - ( 0 ) <= a then { } else { } else z = - ( 0 ) || - ( - ( 1 ) ) ; if 0 then { y = - ( - ( - ( 27 ) ) ) } else { if y || 0 then { } else { } } ; a = -23 == b / - a ; b = -28 * 0 ; a = b + - x / b ; x = 0 ; while 0 do b = - ( - ( ( b && 1 ) * x ) ) ; if a then { } else if x then x = - ( 27 ) else while ( 1 == a ) / ( 1 - - ( 0 ) < ( y < y ) ) do { } ; while -26 && z do { } ; if ( a + ( - x < 0 ) || z -1 ) < 1 then x = b else { } ; z = x ; y = x }

*******************
but expected
*******************
{
  b = z == 1 ;
  a = y ;
  if z then
    if z then { } else { }
  else if 0 then { } else { } ;
  if y * z then { } else
    a = x == a ;
  y = - ( - b <= - a ) ;
  if ( - y || z ) == -13 then
    if - ( ( y == 1 ) * 0 ) then { } else { }
  else
    z = -3 + 1 ;
  if - ( 1 ) then { } else { } ;
  y = 0 ;
  x = 0 == 1 ;
  b = a ;
  y = y ;
  b = 1 ;
  b = 1 / ( ( 0 <= -8 && 0 ) == 1 ) ;
  z = -26 / ( b || 1 ) ;
  while y do
    a = z ;
  x = 1 ;
  z = 0 ;
  y = 1 / - ( 1 ) ;
  y = 1 ;
  a = b / 1 ;
  if 8 then
    if - ( 0 ) <= a then { } else { }
  else
    z = - ( 0 ) || - ( - ( 1 ) ) ;
  if 0 then {
    y = - ( - ( - ( 27 ) ) )
  } else {
    if y || 0 then { } else { }
  } ;
  a = -23 == b / - a ;
  b = -28 * 0 ;
  a = b + - x / b ;
  x = 0 ;
  while 0 do
    b = - ( - ( ( b && 1 ) * x ) ) ;
  if a then { } else if x then
    x = - ( 27 )
  else
    while ( 1 == a ) / ( 1 - - ( 0 ) < ( y < y ) ) do { } ;
  while -26 && z do { } ;
  if ( a + ( - x < 0 ) || z -1 ) < 1 then
    x = b
  else { } ;
  z = x ;
  y = x
}

*******************

AST
Seq [If (Var "x") (Seq [Assign "b" (Var "b"),Assign "a" (Var "a"),If (Binop Equal (Const (-14)) (Binop Less (Const 0) (Binop Less (Uminus (Const 0)) (Binop And (Binop Div (Var "x") (Const 1)) (Const 1))))) (Assign "z" (Binop Or (Binop LessEq (Const 1) (Const (-17))) (Binop Or (Const 5) (Const 1)))) (Seq [])]) (Seq [Assign "x" (Binop LessEq (Const 0) (Const 0))]),Assign "x" (Uminus (Uminus (Var "b"))),If (Binop Or (Binop Minus (Const 0) (Binop Minus (Var "x") (Const 1))) (Const 1)) (Assign "x" (Uminus (Binop Div (Const 28) (Binop Div (Const 1) (Var "x"))))) (If (Binop Equal (Binop Plus (Uminus (Const (-18))) (Const 5)) (Var "x")) (Assign "x" (Binop Or (Var "a") (Const 0))) (Assign "b" (Binop Minus (Binop Equal (Binop Equal (Binop Less (Uminus (Var "x")) (Binop Div (Var "y") (Const 0))) (Binop Plus (Var "y") (Binop Plus (Var "y") (Const 0)))) (Const (-26))) (Var "y")))),Assign "b" (Binop Less (Const 1) (Binop Plus (Binop Equal (Const 0) (Binop Plus (Binop Div (Var "x") (Var "z")) (Uminus (Const (-15))))) (Const 0))),If (Binop Div (Binop LessEq (Binop Div (Binop LessEq (Binop Plus (Var "b") (Var "x")) (Uminus (Var "b"))) (Binop LessEq (Uminus (Const 5)) (Binop Equal (Const 1) (Var "b")))) (Const 1)) (Uminus (Uminus (Var "y")))) (Assign "a" (Var "y")) (Seq []),Assign "b" (Var "x"),Assign "x" (Binop Div (Var "y") (Const 1)),Assign "z" (Binop Div (Binop Equal (Uminus (Binop Or (Const 1) (Uminus (Var "z")))) (Const 28)) (Var "a")),If (Var "z") (Assign "z" (Uminus (Var "b"))) (Assign "x" (Binop Minus (Var "a") (Uminus (Var "y")))),If (Var "x") (Seq [While (Uminus (Binop LessEq (Binop Times (Var "y") (Var "a")) (Var "b"))) (Seq [])]) (Seq []),While (Uminus (Uminus (Binop Or (Binop And (Binop And (Var "y") (Var "a")) (Var "z")) (Const 0)))) (If (Var "b") (If (Var "a") (Seq []) (Seq [])) (Assign "b" (Var "y"))),Assign "y" (Const 6)]
 was printed as
*******************
{ if x then { b = b ; a = a ; if -14 == ( 0 < ( - ( 0 ) < ( x / 1 && 1 ) ) ) then z = 1 <= -17 || ( 5 || 1 ) else { } } else { x = 0 <= 0 } ; x = - ( - b ) ; if 0 - ( x -1 ) || 1 then x = - ( 28 / ( 1 / x ) ) else if - ( -18 ) + 5 == x then x = a || 0 else b = ( - x < y / 0 == y + ( y + 0 ) == -26 ) - y ; b = 1 < ( 0 == x / z + - ( -15 ) ) + 0 ; if ( ( b + x <= - b ) / ( - ( 5 ) <= ( 1 == b ) ) <= 1 ) / - ( - y ) then a = y else { } ; b = x ; x = y / 1 ; z = ( - ( 1 || - z ) == 28 ) / a ; if z then z = - b else x = a - - y ; if x then { while - ( y * a <= b ) do { } } else { } ; while - ( - ( y && a && z || 0 ) ) do if b then if a then { } else { } else b = y ; y = 6 }

*******************
but expected
*******************
{
  if x then {
    b = b ;
    a = a ;
    if -14 == ( 0 < ( - ( 0 ) < ( x / 1 && 1 ) ) ) then
      z = 1 <= -17 || ( 5 || 1 )
    else { }
  } else {
    x = 0 <= 0
  } ;
  x = - ( - b ) ;
  if 0 - ( x -1 ) || 1 then
    x = - ( 28 / ( 1 / x ) )
  else if - ( -18 ) + 5 == x then
    x = a || 0
  else
    b = ( - x < y / 0 == y + ( y + 0 ) == -26 ) - y ;
  b = 1 < ( 0 == x / z + - ( -15 ) ) + 0 ;
  if ( ( b + x <= - b ) / ( - ( 5 ) <= ( 1 == b ) ) <= 1 ) / - ( - y ) then
    a = y
  else { } ;
  b = x ;
  x = y / 1 ;
  z = ( - ( 1 || - z ) == 28 ) / a ;
  if z then
    z = - b
  else
    x = a - - y ;
  if x then {
    while - ( y * a <= b ) do { }
  } else { } ;
  while - ( - ( y && a && z || 0 ) ) do
    if b then
      if a then { } else { }
    else
      b = y ;
  y = 6
}

*******************

AST
Seq [Assign "z" (Binop Minus (Binop Less (Const 1) (Var "z")) (Var "z")),While (Const 1) (Assign "x" (Binop LessEq (Const 1) (Var "y"))),While (Uminus (Uminus (Const 1))) (Seq []),While (Binop Less (Binop Times (Const 0) (Const 0)) (Binop LessEq (Binop And (Var "z") (Var "a")) (Var "x"))) (Seq []),If (Binop LessEq (Var "z") (Uminus (Uminus (Const (-3))))) (Assign "y" (Var "b")) (Assign "x" (Const 1)),While (Uminus (Uminus (Binop And (Var "a") (Const 1)))) (Assign "a" (Const 0)),If (Const 1) (Seq []) (Seq []),Assign "x" (Const 1),Assign "z" (Const (-1)),Assign "a" (Const 1),Assign "y" (Var "a"),Assign "a" (Var "y"),Assign "a" (Uminus (Var "y")),Assign "z" (Const 1)]
 was printed as
*******************
{ z = ( 1 < z ) - z ; while 1 do x = 1 <= y ; while - ( - ( 1 ) ) do { } ; while 0 * 0 < ( ( z && a ) <= x ) do { } ; if z <= - ( - ( -3 ) ) then y = b else x = 1 ; while - ( - ( a && 1 ) ) do a = 0 ; if 1 then { } else { } ; x = 1 ; z = -1 ; a = 1 ; y = a ; a = y ; a = - y ; z = 1 }

*******************
but expected
*******************
{
  z = ( 1 < z ) - z ;
  while 1 do
    x = 1 <= y ;
  while - ( - ( 1 ) ) do { } ;
  while 0 * 0 < ( ( z && a ) <= x ) do { } ;
  if z <= - ( - ( -3 ) ) then
    y = b
  else
    x = 1 ;
  while - ( - ( a && 1 ) ) do
    a = 0 ;
  if 1 then { } else { } ;
  x = 1 ;
  z = -1 ;
  a = 1 ;
  y = a ;
  a = y ;
  a = - y ;
  z = 1
}

*******************

AST
While (Const 1) (Assign "a" (Var "b"))
 was printed as
*******************
while 1 do a = b

*******************
but expected
*******************
while 1 do
  a = b

*******************

AST
While (Var "z") (If (Binop Plus (Binop LessEq (Const 1) (Binop Div (Var "x") (Binop Minus (Const 0) (Uminus (Var "y"))))) (Var "a")) (If (Var "y") (While (Binop LessEq (Var "b") (Const (-10))) (Assign "z" (Binop Div (Const 0) (Const 1)))) (Assign "z" (Binop Or (Const 0) (Uminus (Var "z"))))) (If (Var "z") (Assign "b" (Var "a")) (If (Uminus (Var "z")) (Assign "b" (Const 0)) (While (Var "z") (Seq [])))))
 was printed as
*******************
while z do if ( 1 <= x / ( 0 - - y ) ) + a then if y then while b <= -10 do z = 0 / 1 else z = 0 || - z else if z then b = a else if - z then b = 0 else while z do { }

*******************
but expected
*******************
while z do
  if ( 1 <= x / ( 0 - - y ) ) + a then
    if y then
      while b <= -10 do
        z = 0 / 1
    else
      z = 0 || - z
  else if z then
    b = a
  else if - z then
    b = 0
  else
    while z do { }

*******************

AST
Seq [Assign "b" (Var "x"),While (Binop Or (Binop Or (Const (-10)) (Var "b")) (Binop Div (Const 0) (Binop Or (Binop Div (Binop Or (Var "x") (Var "a")) (Binop Plus (Const 0) (Const 0))) (Var "x")))) (Assign "b" (Const (-23))),If (Const 1) (Assign "a" (Const 4)) (If (Binop Or (Var "z") (Uminus (Uminus (Const (-21))))) (Seq []) (Seq [])),Assign "y" (Var "b"),Assign "b" (Uminus (Const 21)),Assign "y" (Binop Div (Binop Plus (Uminus (Uminus (Const 1))) (Var "x")) (Binop Less (Const 1) (Uminus (Uminus (Binop Minus (Const (-23)) (Var "b")))))),Assign "x" (Binop Div (Binop Times (Binop Equal (Var "y") (Const 1)) (Const 1)) (Const 0)),If (Var "z") (Assign "y" (Var "x")) (If (Const 0) (Assign "x" (Uminus (Var "z"))) (Seq [])),If (Binop Or (Var "x") (Uminus (Uminus (Binop Equal (Uminus (Var "b")) (Var "z"))))) (Assign "a" (Binop Or (Var "z") (Var "a"))) (Assign "z" (Binop Minus (Binop Or (Binop Or (Var "a") (Var "y")) (Var "b")) (Const 0))),If (Binop Less (Const 1) (Var "z")) (If (Const 4) (Seq [Assign "x" (Const 0)]) (Seq [])) (Assign "y" (Binop Or (Binop Minus (Binop Plus (Uminus (Var "x")) (Binop Or (Binop Div (Const 1) (Const 0)) (Binop Less (Const 0) (Const 1)))) (Binop Equal (Const 0) (Binop Times (Const 1) (Var "y")))) (Binop Less (Binop And (Uminus (Binop Equal (Var "y") (Var "x"))) (Binop And (Binop Div (Const 0) (Const 26)) (Var "y"))) (Binop LessEq (Var "y") (Var "a"))))),Assign "x" (Const 1)]
 was printed as
*******************
{ b = x ; while -10 || b || 0 / ( ( x || a ) / ( 0 + 0 ) || x ) do b = -23 ; if 1 then a = 4 else if z || - ( - ( -21 ) ) then { } else { } ; y = b ; b = - ( 21 ) ; y = ( - ( - ( 1 ) ) + x ) / ( 1 < - ( - ( -23 - b ) ) ) ; x = ( y == 1 ) * 1 / 0 ; if z then y = x else if 0 then x = - z else { } ; if x || - ( - ( - b == z ) ) then a = z || a else z = ( a || y || b ) -0 ; if 1 < z then if 4 then { x = 0 } else { } else y = - x + ( 1 / 0 || 0 < 1 ) - ( 0 == 1 * y ) || ( - ( y == x ) && ( 0 / 26 && y ) ) < ( y <= a ) ; x = 1 }

*******************
but expected
*******************
{
  b = x ;
  while -10 || b || 0 / ( ( x || a ) / ( 0 + 0 ) || x ) do
    b = -23 ;
  if 1 then
    a = 4
  else if z || - ( - ( -21 ) ) then { } else { } ;
  y = b ;
  b = - ( 21 ) ;
  y = ( - ( - ( 1 ) ) + x ) / ( 1 < - ( - ( -23 - b ) ) ) ;
  x = ( y == 1 ) * 1 / 0 ;
  if z then
    y = x
  else if 0 then
    x = - z
  else { } ;
  if x || - ( - ( - b == z ) ) then
    a = z || a
  else
    z = ( a || y || b ) -0 ;
  if 1 < z then
    if 4 then {
      x = 0
    } else { }
  else
    y = - x + ( 1 / 0 || 0 < 1 ) - ( 0 == 1 * y ) || ( - ( y == x ) && ( 0 / 26 && y ) ) < ( y <= a ) ;
  x = 1
}

*******************

AST
While (Var "x") (Assign "y" (Var "x"))
 was printed as
*******************
while x do y = x

*******************
but expected
*******************
while x do
  y = x

*******************

AST
Seq [Assign "z" (Const 0),Assign "x" (Binop And (Uminus (Binop Equal (Var "z") (Const 5))) (Binop Minus (Const (-23)) (Binop Less (Const (-18)) (Uminus (Binop LessEq (Var "y") (Var "y")))))),Assign "x" (Const 1),Assign "z" (Binop Div (Var "x") (Binop Minus (Binop Div (Binop Times (Const 0) (Binop And (Var "x") (Var "b"))) (Const 0)) (Uminus (Binop And (Binop And (Const (-29)) (Var "y")) (Const 0))))),Assign "y" (Var "y"),If (Const 0) (If (Var "b") (Assign "y" (Const 0)) (Assign "x" (Var "x"))) (Seq []),Assign "x" (Var "b"),If (Var "b") (Assign "z" (Uminus (Binop Or (Const 1) (Var "a")))) (If (Binop Times (Binop Minus (Const 1) (Var "b")) (Const 0)) (Seq []) (Seq [])),Assign "a" (Var "a"),Assign "z" (Var "z")]
 was printed as
*******************
{ z = 0 ; x = - ( z == 5 ) && -23 - ( -18 < - ( y <= y ) ) ; x = 1 ; z = x / ( 0 * ( x && b ) / 0 - - ( -29 && y && 0 ) ) ; y = y ; if 0 then if b then y = 0 else x = x else { } ; x = b ; if b then z = - ( 1 || a ) else if ( 1 - b ) * 0 then { } else { } ; a = a ; z = z }

*******************
but expected
*******************
{
  z = 0 ;
  x = - ( z == 5 ) && -23 - ( -18 < - ( y <= y ) ) ;
  x = 1 ;
  z = x / ( 0 * ( x && b ) / 0 - - ( -29 && y && 0 ) ) ;
  y = y ;
  if 0 then
    if b then
      y = 0
    else
      x = x
  else { } ;
  x = b ;
  if b then
    z = - ( 1 || a )
  else if ( 1 - b ) * 0 then { } else { } ;
  a = a ;
  z = z
}

*******************

AST
Seq [Assign "z" (Var "x"),If (Var "x") (If (Const 0) (Seq []) (Seq [])) (Assign "y" (Const 1)),While (Var "z") (Seq []),While (Var "z") (Assign "z" (Const (-17))),If (Var "y") (Assign "a" (Uminus (Uminus (Var "b")))) (Assign "x" (Const 8)),Assign "y" (Const 0),Assign "x" (Binop Times (Var "a") (Var "a")),Assign "y" (Const 1),If (Var "z") (If (Binop Equal (Const 30) (Const 0)) (Assign "y" (Binop LessEq (Var "x") (Const 0))) (Seq [])) (Assign "z" (Binop And (Var "x") (Binop Equal (Const (-28)) (Const 0)))),If (Binop Minus (Uminus (Var "y")) (Uminus (Const 1))) (Assign "x" (Binop Times (Uminus (Var "b")) (Var "a"))) (Assign "a" (Var "z")),If (Uminus (Binop Minus (Uminus (Binop Or (Var "y") (Var "a"))) (Var "y"))) (Assign "a" (Uminus (Uminus (Const (-30))))) (If (Const 0) (If (Var "x") (Seq []) (Seq [])) (Assign "y" (Const 0))),Assign "a" (Var "y"),Assign "z" (Binop And (Const 0) (Uminus (Binop Minus (Var "b") (Var "z")))),If (Uminus (Const 1)) (If (Var "z") (Seq []) (Seq [])) (Assign "y" (Uminus (Const 1))),If (Const 1) (Seq [Assign "b" (Const 16),If (Uminus (Const 1)) (Seq []) (Assign "x" (Binop Equal (Const 1) (Const 1)))]) (Assign "x" (Var "b")),If (Binop Less (Var "y") (Var "y")) (While (Var "y") (While (Uminus (Uminus (Binop And (Var "a") (Uminus (Binop And (Const 0) (Var "x")))))) (Seq []))) (Seq [Assign "x" (Var "x")]),If (Var "x") (While (Var "z") (Assign "x" (Var "y"))) (Seq [If (Binop LessEq (Const 19) (Const 29)) (Seq []) (Seq [])]),If (Var "y") (Seq [Assign "y" (Uminus (Const 1))]) (Assign "b" (Const 1)),While (Const 22) (Assign "z" (Binop Plus (Var "y") (Binop Times (Var "x") (Const 1)))),If (Var "y") (Assign "a" (Binop Or (Var "z") (Const 0))) (If (Var "b") (Assign "y" (Uminus (Var "b"))) (Assign "z" (Const 0)))]
 was printed as
*******************
{ z = x ; if x then if 0 then { } else { } else y = 1 ; while z do { } ; while z do z = -17 ; if y then a = - ( - b ) else x = 8 ; y = 0 ; x = a * a ; y = 1 ; if z then if 30 == 0 then y = x <= 0 else { } else z = x && -28 == 0 ; if - y - - ( 1 ) then x = - b * a else a = z ; if - ( - ( y || a ) - y ) then a = - ( - ( -30 ) ) else if 0 then if x then { } else { } else y = 0 ; a = y ; z = 0 && - ( b - z ) ; if - ( 1 ) then if z then { } else { } else y = - ( 1 ) ; if 1 then { b = 16 ; if - ( 1 ) then { } else x = 1 == 1 } else x = b ; if y < y then while y do while - ( - ( a && - ( 0 && x ) ) ) do { } else { x = x } ; if x then while z do x = y else { if 19 <= 29 then { } else { } } ; if y then { y = - ( 1 ) } else b = 1 ; while 22 do z = y + x * 1 ; if y then a = z || 0 else if b then y = - b else z = 0 }

*******************
but expected
*******************
{
  z = x ;
  if x then
    if 0 then { } else { }
  else
    y = 1 ;
  while z do { } ;
  while z do
    z = -17 ;
  if y then
    a = - ( - b )
  else
    x = 8 ;
  y = 0 ;
  x = a * a ;
  y = 1 ;
  if z then
    if 30 == 0 then
      y = x <= 0
    else { }
  else
    z = x && -28 == 0 ;
  if - y - - ( 1 ) then
    x = - b * a
  else
    a = z ;
  if - ( - ( y || a ) - y ) then
    a = - ( - ( -30 ) )
  else if 0 then
    if x then { } else { }
  else
    y = 0 ;
  a = y ;
  z = 0 && - ( b - z ) ;
  if - ( 1 ) then
    if z then { } else { }
  else
    y = - ( 1 ) ;
  if 1 then {
    b = 16 ;
    if - ( 1 ) then { } else
      x = 1 == 1
  } else
    x = b ;
  if y < y then
    while y do
      while - ( - ( a && - ( 0 && x ) ) ) do { }
  else {
    x = x
  } ;
  if x then
    while z do
      x = y
  else {
    if 19 <= 29 then { } else { }
  } ;
  if y then {
    y = - ( 1 )
  } else
    b = 1 ;
  while 22 do
    z = y + x * 1 ;
  if y then
    a = z || 0
  else if b then
    y = - b
  else
    z = 0
}

*******************

AST
Seq [Assign "z" (Const (-11)),While (Var "b") (Seq [Assign "y" (Const 0)]),Assign "x" (Binop Times (Binop Minus (Var "a") (Binop Or (Uminus (Uminus (Const 19))) (Var "z"))) (Const (-24))),If (Const 1) (If (Const 0) (Assign "z" (Const 1)) (Seq [])) (If (Var "x") (If (Const 1) (Seq []) (Seq [])) (Seq [])),If (Binop LessEq (Binop And (Const 1) (Var "y")) (Const 0)) (Seq [While (Const 1) (Assign "z" (Binop Less (Var "a") (Var "y")))]) (Assign "x" (Var "b")),Assign "z" (Const 0),Assign "y" (Binop Equal (Var "b") (Binop LessEq (Var "a") (Uminus (Var "a")))),Assign "z" (Var "y"),If (Binop LessEq (Uminus (Const (-5))) (Binop Div (Var "y") (Binop Div (Binop Plus (Const 0) (Const 0)) (Uminus (Binop Less (Var "y") (Const 1)))))) (Seq []) (Assign "z" (Const 0)),Assign "y" (Binop LessEq (Binop Plus (Const 0) (Var "z")) (Binop Equal (Uminus (Binop Minus (Binop Less (Var "y") (Const 0)) (Var "z"))) (Uminus (Binop Div (Const (-14)) (Var "a"))))),While (Uminus (Binop And (Uminus (Const (-15))) (Const 1))) (Assign "z" (Uminus (Var "b"))),If (Const 0) (Assign "y" (Const 26)) (While (Var "a") (While (Binop Times (Const 0) (Uminus (Var "b"))) (Seq []))),While (Uminus (Binop Less (Var "x") (Const 1))) (Seq [Assign "z" (Var "x")]),Assign "b" (Binop And (Var "x") (Binop Equal (Const 1) (Binop LessEq (Var "b") (Var "x"))))]
 was printed as
*******************
{ z = -11 ; while b do { y = 0 } ; x = ( a - ( - ( - ( 19 ) ) || z ) ) * -24 ; if 1 then if 0 then z = 1 else { } else if x then if 1 then { } else { } else { } ; if ( 1 && y ) <= 0 then { while 1 do z = a < y } else x = b ; z = 0 ; y = b == ( a <= - a ) ; z = y ; if - ( -5 ) <= y / ( ( 0 + 0 ) / - ( y < 1 ) ) then { } else z = 0 ; y = 0 + z <= ( - ( ( y < 0 ) - z ) == - ( -14 / a ) ) ; while - ( - ( -15 ) && 1 ) do z = - b ; if 0 then y = 26 else while a do while 0 * - b do { } ; while - ( x < 1 ) do { z = x } ; b = x && 1 == ( b <= x ) }

*******************
but expected
*******************
{
  z = -11 ;
  while b do {
    y = 0
  } ;
  x = ( a - ( - ( - ( 19 ) ) || z ) ) * -24 ;
  if 1 then
    if 0 then
      z = 1
    else { }
  else if x then
    if 1 then { } else { }
  else { } ;
  if ( 1 && y ) <= 0 then {
    while 1 do
      z = a < y
  } else
    x = b ;
  z = 0 ;
  y = b == ( a <= - a ) ;
  z = y ;
  if - ( -5 ) <= y / ( ( 0 + 0 ) / - ( y < 1 ) ) then { } else
    z = 0 ;
  y = 0 + z <= ( - ( ( y < 0 ) - z ) == - ( -14 / a ) ) ;
  while - ( - ( -15 ) && 1 ) do
    z = - b ;
  if 0 then
    y = 26
  else
    while a do
      while 0 * - b do { } ;
  while - ( x < 1 ) do {
    z = x
  } ;
  b = x && 1 == ( b <= x )
}

*******************

AST
If (Binop Div (Uminus (Binop Div (Var "z") (Var "z"))) (Var "y")) (If (Const 0) (Assign "z" (Binop Times (Binop LessEq (Var "b") (Var "x")) (Const 0))) (If (Var "y") (Seq []) (Assign "a" (Binop Minus (Const 1) (Binop Minus (Const 13) (Var "y")))))) (Assign "y" (Const 22))
 was printed as
*******************
if - ( z / z ) / y then if 0 then z = ( b <= x ) * 0 else if y then { } else a = 1 - ( 13 - y ) else y = 22

*******************
but expected
*******************
if - ( z / z ) / y then
  if 0 then
    z = ( b <= x ) * 0
  else if y then { } else
    a = 1 - ( 13 - y )
else
  y = 22

*******************

AST
If (Binop Less (Binop Times (Binop Less (Const (-6)) (Binop Times (Var "b") (Binop LessEq (Var "z") (Const 0)))) (Var "a")) (Binop And (Const (-23)) (Var "a"))) (While (Const 28) (Assign "z" (Const (-23)))) (Seq [Assign "b" (Var "z"),Assign "a" (Var "z"),Assign "b" (Const 0),If (Var "a") (If (Binop Times (Var "a") (Binop And (Const 0) (Var "a"))) (If (Var "b") (Seq []) (Seq [])) (If (Var "x") (Seq []) (Seq []))) (Seq [Assign "y" (Const 1)]),Assign "x" (Const 0),Assign "x" (Binop Plus (Binop Or (Uminus (Binop Minus (Var "b") (Const 1))) (Var "x")) (Var "y")),Assign "x" (Var "a"),Assign "z" (Var "a"),Assign "b" (Binop And (Binop LessEq (Uminus (Const 1)) (Binop Equal (Binop Minus (Binop Div (Var "b") (Var "z")) (Binop Or (Var "a") (Const 0))) (Binop Or (Const 16) (Var "x")))) (Var "x"))])
 was printed as
*******************
if ( -6 < b * ( z <= 0 ) ) * a < ( -23 && a ) then while 28 do z = -23 else { b = z ; a = z ; b = 0 ; if a then if a * ( 0 && a ) then if b then { } else { } else if x then { } else { } else { y = 1 } ; x = 0 ; x = ( - ( b -1 ) || x ) + y ; x = a ; z = a ; b = - ( 1 ) <= ( b / z - ( a || 0 ) == ( 16 || x ) ) && x }

*******************
but expected
*******************
if ( -6 < b * ( z <= 0 ) ) * a < ( -23 && a ) then
  while 28 do
    z = -23
else {
  b = z ;
  a = z ;
  b = 0 ;
  if a then
    if a * ( 0 && a ) then
      if b then { } else { }
    else if x then { } else { }
  else {
    y = 1
  } ;
  x = 0 ;
  x = ( - ( b -1 ) || x ) + y ;
  x = a ;
  z = a ;
  b = - ( 1 ) <= ( b / z - ( a || 0 ) == ( 16 || x ) ) && x
}

*******************

TOTAL ### 4
